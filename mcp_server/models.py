# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:06:03+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, confloat, conint, constr


class AcceleratorManufacturer(Enum):
    nvidia = 'nvidia'
    amd = 'amd'
    amazon_web_services = 'amazon-web-services'
    xilinx = 'xilinx'


class AcceleratorManufacturerSet(RootModel[List[AcceleratorManufacturer]]):
    root: List[AcceleratorManufacturer]


class AcceleratorName(Enum):
    a100 = 'a100'
    v100 = 'v100'
    k80 = 'k80'
    t4 = 't4'
    m60 = 'm60'
    radeon_pro_v520 = 'radeon-pro-v520'
    vu9p = 'vu9p'
    inferentia = 'inferentia'
    k520 = 'k520'


class AcceleratorNameSet(RootModel[List[AcceleratorName]]):
    root: List[AcceleratorName]


class AcceleratorType(Enum):
    gpu = 'gpu'
    fpga = 'fpga'
    inference = 'inference'


class AcceleratorTypeSet(RootModel[List[AcceleratorType]]):
    root: List[AcceleratorType]


class AccountAttributeName(Enum):
    supported_platforms = 'supported-platforms'
    default_vpc = 'default-vpc'


class AccountAttributeNameStringList(RootModel[List[AccountAttributeName]]):
    root: List[AccountAttributeName]


class ActivityStatus(Enum):
    error = 'error'
    pending_fulfillment = 'pending_fulfillment'
    pending_termination = 'pending_termination'
    fulfilled = 'fulfilled'


class AddressAttributeName(Enum):
    domain_name = 'domain-name'


class AddressFamily(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class AddressMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class AddressTransferStatus(Enum):
    pending = 'pending'
    disabled = 'disabled'
    accepted = 'accepted'


class Affinity(Enum):
    default = 'default'
    host = 'host'


class AllocationId(RootModel[str]):
    root: str


class AllocationIdList(RootModel[List[AllocationId]]):
    root: List[AllocationId]


class AllocationIds(RootModel[List[AllocationId]]):
    root: List[AllocationId]


class AllocationState(Enum):
    available = 'available'
    under_assessment = 'under-assessment'
    permanent_failure = 'permanent-failure'
    released = 'released'
    released_permanent_failure = 'released-permanent-failure'
    pending = 'pending'


class AllocationStrategy(Enum):
    lowestPrice = 'lowestPrice'
    diversified = 'diversified'
    capacityOptimized = 'capacityOptimized'
    capacityOptimizedPrioritized = 'capacityOptimizedPrioritized'
    priceCapacityOptimized = 'priceCapacityOptimized'


class AllocationType(Enum):
    used = 'used'


class AllowedInstanceType(
    RootModel[constr(pattern=r'[a-zA-Z0-9\.\*]+', min_length=1, max_length=30)]
):
    root: constr(pattern=r'[a-zA-Z0-9\.\*]+', min_length=1, max_length=30)


class AllowedInstanceTypeSet(RootModel[List[AllowedInstanceType]]):
    root: List[AllowedInstanceType] = Field(..., max_length=400, min_length=0)


class AllowsMultipleInstanceTypes(Enum):
    on = 'on'
    off = 'off'


class AnalysisStatus(Enum):
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'


class ApplianceModeSupportValue(Enum):
    enable = 'enable'
    disable = 'disable'


class ArchitectureType(Enum):
    i386 = 'i386'
    x86_64 = 'x86_64'
    arm64 = 'arm64'
    x86_64_mac = 'x86_64_mac'
    arm64_mac = 'arm64_mac'


class ArchitectureTypeList(RootModel[List[ArchitectureType]]):
    root: List[ArchitectureType]


class ArchitectureTypeSet(RootModel[List[ArchitectureType]]):
    root: List[ArchitectureType] = Field(..., max_length=3, min_length=0)


class ArchitectureValues(Enum):
    i386 = 'i386'
    x86_64 = 'x86_64'
    arm64 = 'arm64'
    x86_64_mac = 'x86_64_mac'
    arm64_mac = 'arm64_mac'


class AssociatedNetworkType(Enum):
    vpc = 'vpc'


class AssociationStatusCode(Enum):
    associating = 'associating'
    associated = 'associated'
    association_failed = 'association-failed'
    disassociating = 'disassociating'
    disassociated = 'disassociated'


class AttachmentStatus(Enum):
    attaching = 'attaching'
    attached = 'attached'
    detaching = 'detaching'
    detached = 'detached'


class AutoAcceptSharedAssociationsValue(Enum):
    enable = 'enable'
    disable = 'disable'


class AutoAcceptSharedAttachmentsValue(Enum):
    enable = 'enable'
    disable = 'disable'


class AutoPlacement(Enum):
    on = 'on'
    off = 'off'


class AutoRecoveryFlag(RootModel[bool]):
    root: bool


class AvailabilityZoneName(RootModel[str]):
    root: str


class AvailabilityZoneOptInStatus(Enum):
    opt_in_not_required = 'opt-in-not-required'
    opted_in = 'opted-in'
    not_opted_in = 'not-opted-in'


class AvailabilityZoneState(Enum):
    available = 'available'
    information = 'information'
    impaired = 'impaired'
    unavailable = 'unavailable'


class BareMetal(Enum):
    included = 'included'
    required = 'required'
    excluded = 'excluded'


class BareMetalFlag(RootModel[bool]):
    root: bool


class BaselineBandwidthInMbps(RootModel[int]):
    root: int


class BaselineIops(RootModel[int]):
    root: int


class BaselineThroughputInMBps(RootModel[float]):
    root: float


class BatchState(Enum):
    submitted = 'submitted'
    active = 'active'
    cancelled = 'cancelled'
    failed = 'failed'
    cancelled_running = 'cancelled_running'
    cancelled_terminating = 'cancelled_terminating'
    modifying = 'modifying'


class BgpStatus(Enum):
    up = 'up'
    down = 'down'


class Blob(RootModel[str]):
    root: str


class BlobAttributeValue(BaseModel):
    Value: Optional[Blob] = None


class Boolean(RootModel[bool]):
    root: bool


class BootModeType(Enum):
    legacy_bios = 'legacy-bios'
    uefi = 'uefi'


class BootModeTypeList(RootModel[List[BootModeType]]):
    root: List[BootModeType]


class BootModeValues(Enum):
    legacy_bios = 'legacy-bios'
    uefi = 'uefi'
    uefi_preferred = 'uefi-preferred'


class BoxedDouble(RootModel[float]):
    root: float


class BundleId(RootModel[str]):
    root: str


class BundleIdStringList(RootModel[List[BundleId]]):
    root: List[BundleId]


class BundleTaskState(Enum):
    pending = 'pending'
    waiting_for_shutdown = 'waiting-for-shutdown'
    bundling = 'bundling'
    storing = 'storing'
    cancelling = 'cancelling'
    complete = 'complete'
    failed = 'failed'


class BurstablePerformance(Enum):
    included = 'included'
    required = 'required'
    excluded = 'excluded'


class BurstablePerformanceFlag(RootModel[bool]):
    root: bool


class ByoipCidrState(Enum):
    advertised = 'advertised'
    deprovisioned = 'deprovisioned'
    failed_deprovision = 'failed-deprovision'
    failed_provision = 'failed-provision'
    pending_deprovision = 'pending-deprovision'
    pending_provision = 'pending-provision'
    provisioned = 'provisioned'
    provisioned_not_publicly_advertisable = 'provisioned-not-publicly-advertisable'


class CancelBatchErrorCode(Enum):
    fleetRequestIdDoesNotExist = 'fleetRequestIdDoesNotExist'
    fleetRequestIdMalformed = 'fleetRequestIdMalformed'
    fleetRequestNotInCancellableState = 'fleetRequestNotInCancellableState'
    unexpectedError = 'unexpectedError'


class CancelBundleTaskRequest(BaseModel):
    BundleId_1: BundleId = Field(..., alias='BundleId')
    DryRun: Optional[Boolean] = None


class CancelCapacityReservationFleetErrorCode(RootModel[str]):
    root: str


class CancelCapacityReservationFleetErrorMessage(RootModel[str]):
    root: str


class CancelCapacityReservationResult(BaseModel):
    Return: Optional[Boolean] = None


class CancelImageLaunchPermissionResult(BaseModel):
    Return: Optional[Boolean] = None


class CancelSpotInstanceRequestState(Enum):
    active = 'active'
    open = 'open'
    closed = 'closed'
    cancelled = 'cancelled'
    completed = 'completed'


class CapacityReservationFleetId(RootModel[str]):
    root: str


class CapacityReservationFleetIdSet(RootModel[List[CapacityReservationFleetId]]):
    root: List[CapacityReservationFleetId]


class CapacityReservationFleetState(Enum):
    submitted = 'submitted'
    modifying = 'modifying'
    active = 'active'
    partially_fulfilled = 'partially_fulfilled'
    expiring = 'expiring'
    expired = 'expired'
    cancelling = 'cancelling'
    cancelled = 'cancelled'
    failed = 'failed'


class CapacityReservationId(RootModel[str]):
    root: str


class CapacityReservationIdSet(RootModel[List[CapacityReservationId]]):
    root: List[CapacityReservationId]


class CapacityReservationInstancePlatform(Enum):
    Linux_UNIX = 'Linux/UNIX'
    Red_Hat_Enterprise_Linux = 'Red Hat Enterprise Linux'
    SUSE_Linux = 'SUSE Linux'
    Windows = 'Windows'
    Windows_with_SQL_Server = 'Windows with SQL Server'
    Windows_with_SQL_Server_Enterprise = 'Windows with SQL Server Enterprise'
    Windows_with_SQL_Server_Standard = 'Windows with SQL Server Standard'
    Windows_with_SQL_Server_Web = 'Windows with SQL Server Web'
    Linux_with_SQL_Server_Standard = 'Linux with SQL Server Standard'
    Linux_with_SQL_Server_Web = 'Linux with SQL Server Web'
    Linux_with_SQL_Server_Enterprise = 'Linux with SQL Server Enterprise'
    RHEL_with_SQL_Server_Standard = 'RHEL with SQL Server Standard'
    RHEL_with_SQL_Server_Enterprise = 'RHEL with SQL Server Enterprise'
    RHEL_with_SQL_Server_Web = 'RHEL with SQL Server Web'
    RHEL_with_HA = 'RHEL with HA'
    RHEL_with_HA_and_SQL_Server_Standard = 'RHEL with HA and SQL Server Standard'
    RHEL_with_HA_and_SQL_Server_Enterprise = 'RHEL with HA and SQL Server Enterprise'


class CapacityReservationPreference(Enum):
    open = 'open'
    none = 'none'


class CapacityReservationState(Enum):
    active = 'active'
    expired = 'expired'
    cancelled = 'cancelled'
    pending = 'pending'
    failed = 'failed'


class CapacityReservationTenancy(Enum):
    default = 'default'
    dedicated = 'dedicated'


class CarrierGatewayId(RootModel[str]):
    root: str


class CarrierGatewayIdSet(RootModel[List[CarrierGatewayId]]):
    root: List[CarrierGatewayId]


class CarrierGatewayMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class CarrierGatewayState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class CertificateArn(RootModel[str]):
    root: str


class CertificateId(RootModel[str]):
    root: str


class ClientCertificateRevocationListStatusCode(Enum):
    pending = 'pending'
    active = 'active'


class ClientVpnAssociationId(RootModel[str]):
    root: str


class ClientVpnAuthenticationType(Enum):
    certificate_authentication = 'certificate-authentication'
    directory_service_authentication = 'directory-service-authentication'
    federated_authentication = 'federated-authentication'


class ClientVpnAuthorizationRuleStatusCode(Enum):
    authorizing = 'authorizing'
    active = 'active'
    failed = 'failed'
    revoking = 'revoking'


class ClientVpnConnectionStatusCode(Enum):
    active = 'active'
    failed_to_terminate = 'failed-to-terminate'
    terminating = 'terminating'
    terminated = 'terminated'


class ClientVpnEndpointAttributeStatusCode(Enum):
    applying = 'applying'
    applied = 'applied'


class ClientVpnEndpointId(RootModel[str]):
    root: str


class ClientVpnEndpointIdList(RootModel[List[ClientVpnEndpointId]]):
    root: List[ClientVpnEndpointId]


class ClientVpnEndpointStatusCode(Enum):
    pending_associate = 'pending-associate'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class ClientVpnRouteStatusCode(Enum):
    creating = 'creating'
    active = 'active'
    failed = 'failed'
    deleting = 'deleting'


class CloudWatchLogGroupArn(RootModel[str]):
    root: str


class CoipPoolId(RootModel[str]):
    root: str


class CoipPoolMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class ComponentAccount(RootModel[constr(pattern=r'\d{12}')]):
    root: constr(pattern=r'\d{12}')


class ComponentRegion(RootModel[constr(pattern=r'[a-z]{2}-[a-z]+-[1-9]+')]):
    root: constr(pattern=r'[a-z]{2}-[a-z]+-[1-9]+')


class ConnectionNotificationId(RootModel[str]):
    root: str


class ConnectionNotificationIdsList(RootModel[List[ConnectionNotificationId]]):
    root: List[ConnectionNotificationId]


class ConnectionNotificationState(Enum):
    Enabled = 'Enabled'
    Disabled = 'Disabled'


class ConnectionNotificationType(Enum):
    Topic = 'Topic'


class ConnectivityType(Enum):
    private = 'private'
    public = 'public'


class ContainerFormat(Enum):
    ova = 'ova'


class ConversionTaskId(RootModel[str]):
    root: str


class ConversionTaskState(Enum):
    active = 'active'
    cancelling = 'cancelling'
    cancelled = 'cancelled'
    completed = 'completed'


class CopySnapshotRequestPSU(RootModel[SecretStr]):
    root: SecretStr


class CopyTagsFromSource(Enum):
    volume = 'volume'


class CoreCount(RootModel[int]):
    root: int


class CoreCountList(RootModel[List[CoreCount]]):
    root: List[CoreCount]


class CoreNetworkArn(RootModel[str]):
    root: str


class CpuManufacturer(Enum):
    intel = 'intel'
    amd = 'amd'
    amazon_web_services = 'amazon-web-services'


class CpuManufacturerSet(RootModel[List[CpuManufacturer]]):
    root: List[CpuManufacturer]


class CreateDefaultVpcRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class CreateRouteResult(BaseModel):
    Return: Optional[Boolean] = None


class CurrencyCodeValues(Enum):
    USD = 'USD'


class CurrentGenerationFlag(RootModel[bool]):
    root: bool


class CustomerGatewayId(RootModel[str]):
    root: str


class CustomerGatewayIdStringList(RootModel[List[CustomerGatewayId]]):
    root: List[CustomerGatewayId]


class DITMaxResults(RootModel[conint(ge=5, le=100)]):
    root: conint(ge=5, le=100)


class DITOMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DatafeedSubscriptionState(Enum):
    Active = 'Active'
    Inactive = 'Inactive'


class DateTime(RootModel[datetime]):
    root: datetime


class DedicatedHostFlag(RootModel[bool]):
    root: bool


class DedicatedHostId(RootModel[str]):
    root: str


class DedicatedHostIdList(RootModel[List[DedicatedHostId]]):
    root: List[DedicatedHostId]


class DefaultNetworkCardIndex(RootModel[int]):
    root: int


class DefaultRouteTableAssociationValue(Enum):
    enable = 'enable'
    disable = 'disable'


class DefaultRouteTablePropagationValue(Enum):
    enable = 'enable'
    disable = 'disable'


class DefaultTargetCapacityType(Enum):
    spot = 'spot'
    on_demand = 'on-demand'


class DefaultingDhcpOptionsId(RootModel[str]):
    root: str


class DeleteCarrierGatewayRequest(BaseModel):
    CarrierGatewayId_1: CarrierGatewayId = Field(..., alias='CarrierGatewayId')
    DryRun: Optional[Boolean] = None


class DeleteClientVpnEndpointRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None


class DeleteCustomerGatewayRequest(BaseModel):
    CustomerGatewayId_1: CustomerGatewayId = Field(..., alias='CustomerGatewayId')
    DryRun: Optional[Boolean] = None


class DeleteEgressOnlyInternetGatewayResult(BaseModel):
    ReturnCode: Optional[Boolean] = None


class DeleteFleetErrorCode(Enum):
    fleetIdDoesNotExist = 'fleetIdDoesNotExist'
    fleetIdMalformed = 'fleetIdMalformed'
    fleetNotInDeletableState = 'fleetNotInDeletableState'
    unexpectedError = 'unexpectedError'


class DeleteFpgaImageResult(BaseModel):
    Return: Optional[Boolean] = None


class DeleteNetworkInterfacePermissionResult(BaseModel):
    Return: Optional[Boolean] = None


class DeletePublicIpv4PoolResult(BaseModel):
    ReturnValue: Optional[Boolean] = None


class DeleteQueuedReservedInstancesErrorCode(Enum):
    reserved_instances_id_invalid = 'reserved-instances-id-invalid'
    reserved_instances_not_in_queued_state = 'reserved-instances-not-in-queued-state'
    unexpected_error = 'unexpected-error'


class DeleteSpotDatafeedSubscriptionRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class DeleteVpcEndpointConnectionNotificationsRequest(BaseModel):
    ConnectionNotificationIds: ConnectionNotificationIdsList
    DryRun: Optional[Boolean] = None


class DeleteVpcPeeringConnectionResult(BaseModel):
    Return: Optional[Boolean] = None


class DescribeAccountAttributesRequest(BaseModel):
    AttributeNames: Optional[AccountAttributeNameStringList] = None
    DryRun: Optional[Boolean] = None


class DescribeAddressTransfersMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeAggregateIdFormatRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class DescribeByoipCidrsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class DescribeCapacityReservationFleetsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class DescribeCapacityReservationsMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class DescribeClassicLinkInstancesMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeClientVpnAuthorizationRulesMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeClientVpnConnectionsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeClientVpnEndpointMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeClientVpnRoutesMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeClientVpnTargetNetworksMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeDhcpOptionsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeEgressOnlyInternetGatewaysMaxResults(RootModel[conint(ge=5, le=255)]):
    root: conint(ge=5, le=255)


class DescribeElasticGpusMaxResults(RootModel[conint(ge=10, le=1000)]):
    root: conint(ge=10, le=1000)


class DescribeExportImageTasksMaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class DescribeFastLaunchImagesRequestMaxResults(RootModel[conint(ge=0, le=200)]):
    root: conint(ge=0, le=200)


class DescribeFastSnapshotRestoresMaxResults(RootModel[conint(ge=0, le=200)]):
    root: conint(ge=0, le=200)


class DescribeFpgaImagesMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeHostReservationsMaxResults(RootModel[conint(ge=5, le=500)]):
    root: conint(ge=5, le=500)


class DescribeIamInstanceProfileAssociationsMaxResults(
    RootModel[conint(ge=5, le=1000)]
):
    root: conint(ge=5, le=1000)


class DescribeInstanceCreditSpecificationsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeInstanceEventNotificationAttributesRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class DescribeInternetGatewaysMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeLaunchTemplatesMaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class DescribeMovingAddressesMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeNatGatewaysMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeNetworkAclsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeNetworkInterfacePermissionsMaxResults(RootModel[conint(ge=5, le=255)]):
    root: conint(ge=5, le=255)


class DescribeNetworkInterfacesMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribePrincipalIdFormatMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class DescribeReplaceRootVolumeTasksMaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class DescribeRouteTablesMaxResults(RootModel[conint(ge=5, le=100)]):
    root: conint(ge=5, le=100)


class DescribeScheduledInstanceAvailabilityMaxResults(RootModel[conint(ge=5, le=300)]):
    root: conint(ge=5, le=300)


class DescribeSecurityGroupRulesMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeSecurityGroupsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeSnapshotTierStatusMaxResults(RootModel[int]):
    root: int


class DescribeSpotDatafeedSubscriptionRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class DescribeSpotFleetInstancesMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class DescribeSpotFleetRequestHistoryMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class DescribeStaleSecurityGroupsMaxResults(RootModel[conint(ge=5, le=255)]):
    root: conint(ge=5, le=255)


class DescribeStaleSecurityGroupsNextToken(
    RootModel[constr(min_length=1, max_length=1024)]
):
    root: constr(min_length=1, max_length=1024)


class DescribeStoreImageTasksRequestMaxResults(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class DescribeSubnetsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeTrunkInterfaceAssociationsMaxResults(RootModel[conint(ge=5, le=255)]):
    root: conint(ge=5, le=255)


class DescribeVerifiedAccessEndpointsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeVerifiedAccessGroupMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeVerifiedAccessInstanceLoggingConfigurationsMaxResults(
    RootModel[conint(ge=1, le=10)]
):
    root: conint(ge=1, le=10)


class DescribeVerifiedAccessInstancesMaxResults(RootModel[conint(ge=5, le=200)]):
    root: conint(ge=5, le=200)


class DescribeVerifiedAccessTrustProvidersMaxResults(RootModel[conint(ge=5, le=200)]):
    root: conint(ge=5, le=200)


class DescribeVpcClassicLinkDnsSupportMaxResults(RootModel[conint(ge=5, le=255)]):
    root: conint(ge=5, le=255)


class DescribeVpcClassicLinkDnsSupportNextToken(
    RootModel[constr(min_length=1, max_length=1024)]
):
    root: constr(min_length=1, max_length=1024)


class DescribeVpcPeeringConnectionsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DescribeVpcsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class DestinationFileFormat(Enum):
    plain_text = 'plain-text'
    parquet = 'parquet'


class DestinationOptionsRequest(BaseModel):
    FileFormat: Optional[DestinationFileFormat] = None
    HiveCompatiblePartitions: Optional[Boolean] = None
    PerHourPartition: Optional[Boolean] = None


class DestinationOptionsResponse(BaseModel):
    FileFormat: Optional[DestinationFileFormat] = None
    HiveCompatiblePartitions: Optional[Boolean] = None
    PerHourPartition: Optional[Boolean] = None


class DetachClassicLinkVpcResult(BaseModel):
    Return: Optional[Boolean] = None


class DeviceTrustProviderType(Enum):
    jamf = 'jamf'
    crowdstrike = 'crowdstrike'


class DeviceType(Enum):
    ebs = 'ebs'
    instance_store = 'instance-store'


class DhcpOptionsId(RootModel[str]):
    root: str


class DhcpOptionsIdStringList(RootModel[List[DhcpOptionsId]]):
    root: List[DhcpOptionsId]


class DisableAddressTransferRequest(BaseModel):
    AllocationId_1: AllocationId = Field(..., alias='AllocationId')
    DryRun: Optional[Boolean] = None


class DisableAwsNetworkPerformanceMetricSubscriptionResult(BaseModel):
    Output: Optional[Boolean] = None


class DisableEbsEncryptionByDefaultRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class DisableEbsEncryptionByDefaultResult(BaseModel):
    EbsEncryptionByDefault: Optional[Boolean] = None


class DisableImageDeprecationResult(BaseModel):
    Return: Optional[Boolean] = None


class DisableIpamOrganizationAdminAccountResult(BaseModel):
    Success: Optional[Boolean] = None


class DisableSerialConsoleAccessRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class DisableSerialConsoleAccessResult(BaseModel):
    SerialConsoleAccessEnabled: Optional[Boolean] = None


class DisableVpcClassicLinkDnsSupportResult(BaseModel):
    Return: Optional[Boolean] = None


class DisableVpcClassicLinkResult(BaseModel):
    Return: Optional[Boolean] = None


class DisassociateClientVpnTargetNetworkRequest(BaseModel):
    AssociationId: ClientVpnAssociationId
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None


class DisassociateEnclaveCertificateIamRoleResult(BaseModel):
    Return: Optional[Boolean] = None


class DiskCount(RootModel[int]):
    root: int


class DiskImageFormat(Enum):
    VMDK = 'VMDK'
    RAW = 'RAW'
    VHD = 'VHD'


class DiskSize(RootModel[int]):
    root: int


class DiskType(Enum):
    hdd = 'hdd'
    ssd = 'ssd'


class DnsNameState(Enum):
    pendingVerification = 'pendingVerification'
    verified = 'verified'
    failed = 'failed'


class DnsRecordIpType(Enum):
    ipv4 = 'ipv4'
    dualstack = 'dualstack'
    ipv6 = 'ipv6'
    service_defined = 'service-defined'


class DnsSupportValue(Enum):
    enable = 'enable'
    disable = 'disable'


class DomainType(Enum):
    vpc = 'vpc'
    standard = 'standard'


class Double(RootModel[float]):
    root: float


class DoubleWithConstraints(RootModel[confloat(ge=0.001, le=99.999)]):
    root: confloat(ge=0.001, le=99.999)


class DrainSeconds(RootModel[conint(ge=1, le=4000)]):
    root: conint(ge=1, le=4000)


class DynamicRoutingValue(Enum):
    enable = 'enable'
    disable = 'disable'


class EbsEncryptionSupport(Enum):
    unsupported = 'unsupported'
    supported = 'supported'


class EbsNvmeSupport(Enum):
    unsupported = 'unsupported'
    supported = 'supported'
    required = 'required'


class EbsOptimizedSupport(Enum):
    unsupported = 'unsupported'
    supported = 'supported'
    default = 'default'


class EfaSupportedFlag(RootModel[bool]):
    root: bool


class EgressOnlyInternetGatewayId(RootModel[str]):
    root: str


class EgressOnlyInternetGatewayIdList(RootModel[List[EgressOnlyInternetGatewayId]]):
    root: List[EgressOnlyInternetGatewayId]


class EipAllocationPublicIp(RootModel[str]):
    root: str


class ElasticGpuId(RootModel[str]):
    root: str


class ElasticGpuIdSet(RootModel[List[ElasticGpuId]]):
    root: List[ElasticGpuId]


class ElasticGpuState(Enum):
    ATTACHED = 'ATTACHED'


class ElasticGpuStatus(Enum):
    OK = 'OK'
    IMPAIRED = 'IMPAIRED'


class ElasticInferenceAcceleratorCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class ElasticIpAssociationId(RootModel[str]):
    root: str


class EnaSrdSupported(RootModel[bool]):
    root: bool


class EnaSrdUdpSpecification(BaseModel):
    EnaSrdUdpEnabled: Optional[Boolean] = None


class EnaSupport(Enum):
    unsupported = 'unsupported'
    supported = 'supported'
    required = 'required'


class EnableAwsNetworkPerformanceMetricSubscriptionResult(BaseModel):
    Output: Optional[Boolean] = None


class EnableEbsEncryptionByDefaultRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class EnableEbsEncryptionByDefaultResult(BaseModel):
    EbsEncryptionByDefault: Optional[Boolean] = None


class EnableImageDeprecationResult(BaseModel):
    Return: Optional[Boolean] = None


class EnableIpamOrganizationAdminAccountResult(BaseModel):
    Success: Optional[Boolean] = None


class EnableReachabilityAnalyzerOrganizationSharingRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class EnableReachabilityAnalyzerOrganizationSharingResult(BaseModel):
    ReturnValue: Optional[Boolean] = None


class EnableSerialConsoleAccessRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class EnableSerialConsoleAccessResult(BaseModel):
    SerialConsoleAccessEnabled: Optional[Boolean] = None


class EnableVpcClassicLinkDnsSupportResult(BaseModel):
    Return: Optional[Boolean] = None


class EnableVpcClassicLinkResult(BaseModel):
    Return: Optional[Boolean] = None


class EnclaveOptions(BaseModel):
    Enabled: Optional[Boolean] = None


class EnclaveOptionsRequest(BaseModel):
    Enabled: Optional[Boolean] = None


class EncryptionInTransitSupported(RootModel[bool]):
    root: bool


class EndDateType(Enum):
    unlimited = 'unlimited'
    limited = 'limited'


class EphemeralNvmeSupport(Enum):
    unsupported = 'unsupported'
    supported = 'supported'
    required = 'required'


class EventCode(Enum):
    instance_reboot = 'instance-reboot'
    system_reboot = 'system-reboot'
    system_maintenance = 'system-maintenance'
    instance_retirement = 'instance-retirement'
    instance_stop = 'instance-stop'


class EventType(Enum):
    instanceChange = 'instanceChange'
    fleetRequestChange = 'fleetRequestChange'
    error = 'error'
    information = 'information'


class ExcessCapacityTerminationPolicy(Enum):
    noTermination = 'noTermination'
    default = 'default'


class ExcludedInstanceType(
    RootModel[constr(pattern=r'[a-zA-Z0-9\.\*]+', min_length=1, max_length=30)]
):
    root: constr(pattern=r'[a-zA-Z0-9\.\*]+', min_length=1, max_length=30)


class ExcludedInstanceTypeSet(RootModel[List[ExcludedInstanceType]]):
    root: List[ExcludedInstanceType] = Field(..., max_length=400, min_length=0)


class ExportClientVpnClientCertificateRevocationListRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None


class ExportClientVpnClientConfigurationRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None


class ExportEnvironment(Enum):
    citrix = 'citrix'
    vmware = 'vmware'
    microsoft = 'microsoft'


class ExportImageTaskId(RootModel[str]):
    root: str


class ExportImageTaskIdList(RootModel[List[ExportImageTaskId]]):
    root: List[ExportImageTaskId]


class ExportTaskId(RootModel[str]):
    root: str


class ExportTaskIdStringList(RootModel[List[ExportTaskId]]):
    root: List[ExportTaskId]


class ExportTaskState(Enum):
    active = 'active'
    cancelling = 'cancelling'
    cancelled = 'cancelled'
    completed = 'completed'


class ExportVmTaskId(RootModel[str]):
    root: str


class FastLaunchResourceType(Enum):
    snapshot = 'snapshot'


class FastLaunchStateCode(Enum):
    enabling = 'enabling'
    enabling_failed = 'enabling-failed'
    enabled = 'enabled'
    enabled_failed = 'enabled-failed'
    disabling = 'disabling'
    disabling_failed = 'disabling-failed'


class FastSnapshotRestoreStateCode(Enum):
    enabling = 'enabling'
    optimizing = 'optimizing'
    enabled = 'enabled'
    disabling = 'disabling'
    disabled = 'disabled'


class FindingsFound(Enum):
    true = 'true'
    false = 'false'
    unknown = 'unknown'


class FleetActivityStatus(Enum):
    error = 'error'
    pending_fulfillment = 'pending_fulfillment'
    pending_termination = 'pending_termination'
    fulfilled = 'fulfilled'


class FleetCapacityReservationTenancy(Enum):
    default = 'default'


class FleetCapacityReservationUsageStrategy(Enum):
    use_capacity_reservations_first = 'use-capacity-reservations-first'


class FleetEventType(Enum):
    instance_change = 'instance-change'
    fleet_change = 'fleet-change'
    service_error = 'service-error'


class FleetExcessCapacityTerminationPolicy(Enum):
    no_termination = 'no-termination'
    termination = 'termination'


class FleetId(RootModel[str]):
    root: str


class FleetIdSet(RootModel[List[FleetId]]):
    root: List[FleetId]


class FleetInstanceMatchCriteria(Enum):
    open = 'open'


class FleetOnDemandAllocationStrategy(Enum):
    lowest_price = 'lowest-price'
    prioritized = 'prioritized'


class FleetReplacementStrategy(Enum):
    launch = 'launch'
    launch_before_terminate = 'launch-before-terminate'


class FleetStateCode(Enum):
    submitted = 'submitted'
    active = 'active'
    deleted = 'deleted'
    failed = 'failed'
    deleted_running = 'deleted_running'
    deleted_terminating = 'deleted_terminating'
    modifying = 'modifying'


class FleetType(Enum):
    request = 'request'
    maintain = 'maintain'
    instant = 'instant'


class Float(RootModel[float]):
    root: float


class FlowLogResourceId(RootModel[str]):
    root: str


class FlowLogResourceIds(RootModel[List[FlowLogResourceId]]):
    root: List[FlowLogResourceId]


class FlowLogsResourceType(Enum):
    VPC = 'VPC'
    Subnet = 'Subnet'
    NetworkInterface = 'NetworkInterface'
    TransitGateway = 'TransitGateway'
    TransitGatewayAttachment = 'TransitGatewayAttachment'


class FpgaDeviceCount(RootModel[int]):
    root: int


class FpgaDeviceManufacturerName(RootModel[str]):
    root: str


class FpgaDeviceMemorySize(RootModel[int]):
    root: int


class FpgaDeviceName(RootModel[str]):
    root: str


class FpgaImageAttributeName(Enum):
    description = 'description'
    name = 'name'
    loadPermission = 'loadPermission'
    productCodes = 'productCodes'


class FpgaImageId(RootModel[str]):
    root: str


class FpgaImageIdList(RootModel[List[FpgaImageId]]):
    root: List[FpgaImageId]


class FpgaImageStateCode(Enum):
    pending = 'pending'
    failed = 'failed'
    available = 'available'
    unavailable = 'unavailable'


class FreeTierEligibleFlag(RootModel[bool]):
    root: bool


class GVCDMaxResults(RootModel[conint(ge=200, le=1000)]):
    root: conint(ge=200, le=1000)


class GatewayAssociationState(Enum):
    associated = 'associated'
    not_associated = 'not-associated'
    associating = 'associating'
    disassociating = 'disassociating'


class GatewayType(Enum):
    ipsec_1 = 'ipsec.1'


class GetAssociatedEnclaveCertificateIamRolesRequest(BaseModel):
    CertificateArn: CertificateId
    DryRun: Optional[Boolean] = None


class GetCapacityReservationUsageRequestMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class GetEbsDefaultKmsKeyIdRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class GetEbsEncryptionByDefaultRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class GetEbsEncryptionByDefaultResult(BaseModel):
    EbsEncryptionByDefault: Optional[Boolean] = None


class GetGroupsForCapacityReservationRequestMaxResults(
    RootModel[conint(ge=1, le=1000)]
):
    root: conint(ge=1, le=1000)


class GetIpamPoolAllocationsMaxResults(RootModel[conint(ge=1000, le=100000)]):
    root: conint(ge=1000, le=100000)


class GetManagedPrefixListAssociationsMaxResults(RootModel[conint(ge=5, le=255)]):
    root: conint(ge=5, le=255)


class GetSerialConsoleAccessStatusRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class GetSerialConsoleAccessStatusResult(BaseModel):
    SerialConsoleAccessEnabled: Optional[Boolean] = None


class GetSubnetCidrReservationsMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class GpuDeviceCount(RootModel[int]):
    root: int


class GpuDeviceManufacturerName(RootModel[str]):
    root: str


class GpuDeviceMemorySize(RootModel[int]):
    root: int


class GpuDeviceName(RootModel[str]):
    root: str


class HibernationFlag(RootModel[bool]):
    root: bool


class HibernationOptions(BaseModel):
    Configured: Optional[Boolean] = None


class HibernationOptionsRequest(BaseModel):
    Configured: Optional[Boolean] = None


class HostMaintenance(Enum):
    on = 'on'
    off = 'off'


class HostRecovery(Enum):
    on = 'on'
    off = 'off'


class HostReservationId(RootModel[str]):
    root: str


class HostReservationIdSet(RootModel[List[HostReservationId]]):
    root: List[HostReservationId]


class HostTenancy(Enum):
    dedicated = 'dedicated'
    host = 'host'


class HostnameType(Enum):
    ip_name = 'ip-name'
    resource_name = 'resource-name'


class Hour(RootModel[conint(ge=0, le=23)]):
    root: conint(ge=0, le=23)


class HttpTokensState(Enum):
    optional = 'optional'
    required = 'required'


class HypervisorType(Enum):
    ovm = 'ovm'
    xen = 'xen'


class IamInstanceProfileAssociationId(RootModel[str]):
    root: str


class IamInstanceProfileAssociationState(Enum):
    associating = 'associating'
    associated = 'associated'
    disassociating = 'disassociating'
    disassociated = 'disassociated'


class Igmpv2SupportValue(Enum):
    enable = 'enable'
    disable = 'disable'


class ImageAttributeName(Enum):
    description = 'description'
    kernel = 'kernel'
    ramdisk = 'ramdisk'
    launchPermission = 'launchPermission'
    productCodes = 'productCodes'
    blockDeviceMapping = 'blockDeviceMapping'
    sriovNetSupport = 'sriovNetSupport'
    bootMode = 'bootMode'
    tpmSupport = 'tpmSupport'
    uefiData = 'uefiData'
    lastLaunchedTime = 'lastLaunchedTime'
    imdsSupport = 'imdsSupport'


class ImageId(RootModel[str]):
    root: str


class ImageIdList(RootModel[List[ImageId]]):
    root: List[ImageId]


class ImageIdStringList(RootModel[List[ImageId]]):
    root: List[ImageId]


class ImageState(Enum):
    pending = 'pending'
    available = 'available'
    invalid = 'invalid'
    deregistered = 'deregistered'
    transient = 'transient'
    failed = 'failed'
    error = 'error'


class ImageTypeValues(Enum):
    machine = 'machine'
    kernel = 'kernel'
    ramdisk = 'ramdisk'


class ImdsSupportValues(Enum):
    v2_0 = 'v2.0'


class ImportClientVpnClientCertificateRevocationListResult(BaseModel):
    Return: Optional[Boolean] = None


class ImportImageTaskId(RootModel[str]):
    root: str


class ImportManifestUrl(RootModel[SecretStr]):
    root: SecretStr


class ImportSnapshotTaskId(RootModel[str]):
    root: str


class ImportSnapshotTaskIdList(RootModel[List[ImportSnapshotTaskId]]):
    root: List[ImportSnapshotTaskId]


class ImportTaskId(RootModel[str]):
    root: str


class ImportTaskIdList(RootModel[List[ImportImageTaskId]]):
    root: List[ImportImageTaskId]


class InferenceDeviceCount(RootModel[int]):
    root: int


class InferenceDeviceManufacturerName(RootModel[str]):
    root: str


class InferenceDeviceName(RootModel[str]):
    root: str


class InstanceAttributeName(Enum):
    instanceType = 'instanceType'
    kernel = 'kernel'
    ramdisk = 'ramdisk'
    userData = 'userData'
    disableApiTermination = 'disableApiTermination'
    instanceInitiatedShutdownBehavior = 'instanceInitiatedShutdownBehavior'
    rootDeviceName = 'rootDeviceName'
    blockDeviceMapping = 'blockDeviceMapping'
    productCodes = 'productCodes'
    sourceDestCheck = 'sourceDestCheck'
    groupSet = 'groupSet'
    ebsOptimized = 'ebsOptimized'
    sriovNetSupport = 'sriovNetSupport'
    enaSupport = 'enaSupport'
    enclaveOptions = 'enclaveOptions'
    disableApiStop = 'disableApiStop'


class InstanceAutoRecoveryState(Enum):
    disabled = 'disabled'
    default = 'default'


class InstanceBootModeValues(Enum):
    legacy_bios = 'legacy-bios'
    uefi = 'uefi'


class InstanceEventId(RootModel[str]):
    root: str


class InstanceEventWindowCronExpression(RootModel[str]):
    root: str


class InstanceEventWindowId(RootModel[str]):
    root: str


class InstanceEventWindowIdSet(RootModel[List[InstanceEventWindowId]]):
    root: List[InstanceEventWindowId]


class InstanceEventWindowState(Enum):
    creating = 'creating'
    deleting = 'deleting'
    active = 'active'
    deleted = 'deleted'


class InstanceEventWindowStateChange(BaseModel):
    InstanceEventWindowId_1: Optional[InstanceEventWindowId] = Field(
        None, alias='InstanceEventWindowId'
    )
    State: Optional[InstanceEventWindowState] = None


class InstanceGeneration(Enum):
    current = 'current'
    previous = 'previous'


class InstanceGenerationSet(RootModel[List[InstanceGeneration]]):
    root: List[InstanceGeneration]


class InstanceHealthStatus(Enum):
    healthy = 'healthy'
    unhealthy = 'unhealthy'


class InstanceId(RootModel[str]):
    root: str


class InstanceIdForResolver(RootModel[str]):
    root: str


class InstanceIdList(RootModel[List[InstanceId]]):
    root: List[InstanceId]


class InstanceIdSet(RootModel[List[InstanceId]]):
    root: List[InstanceId]


class InstanceIdStringList(RootModel[List[InstanceId]]):
    root: List[InstanceId]


class InstanceIdWithVolumeResolver(RootModel[str]):
    root: str


class InstanceIdsSet(RootModel[List[InstanceId]]):
    root: List[InstanceId]


class InstanceInterruptionBehavior(Enum):
    hibernate = 'hibernate'
    stop = 'stop'
    terminate = 'terminate'


class InstanceLifecycle(Enum):
    spot = 'spot'
    on_demand = 'on-demand'


class InstanceLifecycleType(Enum):
    spot = 'spot'
    scheduled = 'scheduled'


class InstanceMaintenanceOptions(BaseModel):
    AutoRecovery: Optional[InstanceAutoRecoveryState] = None


class InstanceMaintenanceOptionsRequest(BaseModel):
    AutoRecovery: Optional[InstanceAutoRecoveryState] = None


class InstanceMatchCriteria(Enum):
    open = 'open'
    targeted = 'targeted'


class InstanceMetadataEndpointState(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class InstanceMetadataOptionsState(Enum):
    pending = 'pending'
    applied = 'applied'


class InstanceMetadataProtocolState(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class InstanceMetadataTagsState(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class InstanceStateName(Enum):
    pending = 'pending'
    running = 'running'
    shutting_down = 'shutting-down'
    terminated = 'terminated'
    stopping = 'stopping'
    stopped = 'stopped'


class InstanceStorageEncryptionSupport(Enum):
    unsupported = 'unsupported'
    required = 'required'


class InstanceStorageFlag(RootModel[bool]):
    root: bool


class InstanceType(Enum):
    a1_medium = 'a1.medium'
    a1_large = 'a1.large'
    a1_xlarge = 'a1.xlarge'
    a1_2xlarge = 'a1.2xlarge'
    a1_4xlarge = 'a1.4xlarge'
    a1_metal = 'a1.metal'
    c1_medium = 'c1.medium'
    c1_xlarge = 'c1.xlarge'
    c3_large = 'c3.large'
    c3_xlarge = 'c3.xlarge'
    c3_2xlarge = 'c3.2xlarge'
    c3_4xlarge = 'c3.4xlarge'
    c3_8xlarge = 'c3.8xlarge'
    c4_large = 'c4.large'
    c4_xlarge = 'c4.xlarge'
    c4_2xlarge = 'c4.2xlarge'
    c4_4xlarge = 'c4.4xlarge'
    c4_8xlarge = 'c4.8xlarge'
    c5_large = 'c5.large'
    c5_xlarge = 'c5.xlarge'
    c5_2xlarge = 'c5.2xlarge'
    c5_4xlarge = 'c5.4xlarge'
    c5_9xlarge = 'c5.9xlarge'
    c5_12xlarge = 'c5.12xlarge'
    c5_18xlarge = 'c5.18xlarge'
    c5_24xlarge = 'c5.24xlarge'
    c5_metal = 'c5.metal'
    c5a_large = 'c5a.large'
    c5a_xlarge = 'c5a.xlarge'
    c5a_2xlarge = 'c5a.2xlarge'
    c5a_4xlarge = 'c5a.4xlarge'
    c5a_8xlarge = 'c5a.8xlarge'
    c5a_12xlarge = 'c5a.12xlarge'
    c5a_16xlarge = 'c5a.16xlarge'
    c5a_24xlarge = 'c5a.24xlarge'
    c5ad_large = 'c5ad.large'
    c5ad_xlarge = 'c5ad.xlarge'
    c5ad_2xlarge = 'c5ad.2xlarge'
    c5ad_4xlarge = 'c5ad.4xlarge'
    c5ad_8xlarge = 'c5ad.8xlarge'
    c5ad_12xlarge = 'c5ad.12xlarge'
    c5ad_16xlarge = 'c5ad.16xlarge'
    c5ad_24xlarge = 'c5ad.24xlarge'
    c5d_large = 'c5d.large'
    c5d_xlarge = 'c5d.xlarge'
    c5d_2xlarge = 'c5d.2xlarge'
    c5d_4xlarge = 'c5d.4xlarge'
    c5d_9xlarge = 'c5d.9xlarge'
    c5d_12xlarge = 'c5d.12xlarge'
    c5d_18xlarge = 'c5d.18xlarge'
    c5d_24xlarge = 'c5d.24xlarge'
    c5d_metal = 'c5d.metal'
    c5n_large = 'c5n.large'
    c5n_xlarge = 'c5n.xlarge'
    c5n_2xlarge = 'c5n.2xlarge'
    c5n_4xlarge = 'c5n.4xlarge'
    c5n_9xlarge = 'c5n.9xlarge'
    c5n_18xlarge = 'c5n.18xlarge'
    c5n_metal = 'c5n.metal'
    c6g_medium = 'c6g.medium'
    c6g_large = 'c6g.large'
    c6g_xlarge = 'c6g.xlarge'
    c6g_2xlarge = 'c6g.2xlarge'
    c6g_4xlarge = 'c6g.4xlarge'
    c6g_8xlarge = 'c6g.8xlarge'
    c6g_12xlarge = 'c6g.12xlarge'
    c6g_16xlarge = 'c6g.16xlarge'
    c6g_metal = 'c6g.metal'
    c6gd_medium = 'c6gd.medium'
    c6gd_large = 'c6gd.large'
    c6gd_xlarge = 'c6gd.xlarge'
    c6gd_2xlarge = 'c6gd.2xlarge'
    c6gd_4xlarge = 'c6gd.4xlarge'
    c6gd_8xlarge = 'c6gd.8xlarge'
    c6gd_12xlarge = 'c6gd.12xlarge'
    c6gd_16xlarge = 'c6gd.16xlarge'
    c6gd_metal = 'c6gd.metal'
    c6gn_medium = 'c6gn.medium'
    c6gn_large = 'c6gn.large'
    c6gn_xlarge = 'c6gn.xlarge'
    c6gn_2xlarge = 'c6gn.2xlarge'
    c6gn_4xlarge = 'c6gn.4xlarge'
    c6gn_8xlarge = 'c6gn.8xlarge'
    c6gn_12xlarge = 'c6gn.12xlarge'
    c6gn_16xlarge = 'c6gn.16xlarge'
    c6i_large = 'c6i.large'
    c6i_xlarge = 'c6i.xlarge'
    c6i_2xlarge = 'c6i.2xlarge'
    c6i_4xlarge = 'c6i.4xlarge'
    c6i_8xlarge = 'c6i.8xlarge'
    c6i_12xlarge = 'c6i.12xlarge'
    c6i_16xlarge = 'c6i.16xlarge'
    c6i_24xlarge = 'c6i.24xlarge'
    c6i_32xlarge = 'c6i.32xlarge'
    c6i_metal = 'c6i.metal'
    cc1_4xlarge = 'cc1.4xlarge'
    cc2_8xlarge = 'cc2.8xlarge'
    cg1_4xlarge = 'cg1.4xlarge'
    cr1_8xlarge = 'cr1.8xlarge'
    d2_xlarge = 'd2.xlarge'
    d2_2xlarge = 'd2.2xlarge'
    d2_4xlarge = 'd2.4xlarge'
    d2_8xlarge = 'd2.8xlarge'
    d3_xlarge = 'd3.xlarge'
    d3_2xlarge = 'd3.2xlarge'
    d3_4xlarge = 'd3.4xlarge'
    d3_8xlarge = 'd3.8xlarge'
    d3en_xlarge = 'd3en.xlarge'
    d3en_2xlarge = 'd3en.2xlarge'
    d3en_4xlarge = 'd3en.4xlarge'
    d3en_6xlarge = 'd3en.6xlarge'
    d3en_8xlarge = 'd3en.8xlarge'
    d3en_12xlarge = 'd3en.12xlarge'
    dl1_24xlarge = 'dl1.24xlarge'
    f1_2xlarge = 'f1.2xlarge'
    f1_4xlarge = 'f1.4xlarge'
    f1_16xlarge = 'f1.16xlarge'
    g2_2xlarge = 'g2.2xlarge'
    g2_8xlarge = 'g2.8xlarge'
    g3_4xlarge = 'g3.4xlarge'
    g3_8xlarge = 'g3.8xlarge'
    g3_16xlarge = 'g3.16xlarge'
    g3s_xlarge = 'g3s.xlarge'
    g4ad_xlarge = 'g4ad.xlarge'
    g4ad_2xlarge = 'g4ad.2xlarge'
    g4ad_4xlarge = 'g4ad.4xlarge'
    g4ad_8xlarge = 'g4ad.8xlarge'
    g4ad_16xlarge = 'g4ad.16xlarge'
    g4dn_xlarge = 'g4dn.xlarge'
    g4dn_2xlarge = 'g4dn.2xlarge'
    g4dn_4xlarge = 'g4dn.4xlarge'
    g4dn_8xlarge = 'g4dn.8xlarge'
    g4dn_12xlarge = 'g4dn.12xlarge'
    g4dn_16xlarge = 'g4dn.16xlarge'
    g4dn_metal = 'g4dn.metal'
    g5_xlarge = 'g5.xlarge'
    g5_2xlarge = 'g5.2xlarge'
    g5_4xlarge = 'g5.4xlarge'
    g5_8xlarge = 'g5.8xlarge'
    g5_12xlarge = 'g5.12xlarge'
    g5_16xlarge = 'g5.16xlarge'
    g5_24xlarge = 'g5.24xlarge'
    g5_48xlarge = 'g5.48xlarge'
    g5g_xlarge = 'g5g.xlarge'
    g5g_2xlarge = 'g5g.2xlarge'
    g5g_4xlarge = 'g5g.4xlarge'
    g5g_8xlarge = 'g5g.8xlarge'
    g5g_16xlarge = 'g5g.16xlarge'
    g5g_metal = 'g5g.metal'
    hi1_4xlarge = 'hi1.4xlarge'
    hpc6a_48xlarge = 'hpc6a.48xlarge'
    hs1_8xlarge = 'hs1.8xlarge'
    h1_2xlarge = 'h1.2xlarge'
    h1_4xlarge = 'h1.4xlarge'
    h1_8xlarge = 'h1.8xlarge'
    h1_16xlarge = 'h1.16xlarge'
    i2_xlarge = 'i2.xlarge'
    i2_2xlarge = 'i2.2xlarge'
    i2_4xlarge = 'i2.4xlarge'
    i2_8xlarge = 'i2.8xlarge'
    i3_large = 'i3.large'
    i3_xlarge = 'i3.xlarge'
    i3_2xlarge = 'i3.2xlarge'
    i3_4xlarge = 'i3.4xlarge'
    i3_8xlarge = 'i3.8xlarge'
    i3_16xlarge = 'i3.16xlarge'
    i3_metal = 'i3.metal'
    i3en_large = 'i3en.large'
    i3en_xlarge = 'i3en.xlarge'
    i3en_2xlarge = 'i3en.2xlarge'
    i3en_3xlarge = 'i3en.3xlarge'
    i3en_6xlarge = 'i3en.6xlarge'
    i3en_12xlarge = 'i3en.12xlarge'
    i3en_24xlarge = 'i3en.24xlarge'
    i3en_metal = 'i3en.metal'
    im4gn_large = 'im4gn.large'
    im4gn_xlarge = 'im4gn.xlarge'
    im4gn_2xlarge = 'im4gn.2xlarge'
    im4gn_4xlarge = 'im4gn.4xlarge'
    im4gn_8xlarge = 'im4gn.8xlarge'
    im4gn_16xlarge = 'im4gn.16xlarge'
    inf1_xlarge = 'inf1.xlarge'
    inf1_2xlarge = 'inf1.2xlarge'
    inf1_6xlarge = 'inf1.6xlarge'
    inf1_24xlarge = 'inf1.24xlarge'
    is4gen_medium = 'is4gen.medium'
    is4gen_large = 'is4gen.large'
    is4gen_xlarge = 'is4gen.xlarge'
    is4gen_2xlarge = 'is4gen.2xlarge'
    is4gen_4xlarge = 'is4gen.4xlarge'
    is4gen_8xlarge = 'is4gen.8xlarge'
    m1_small = 'm1.small'
    m1_medium = 'm1.medium'
    m1_large = 'm1.large'
    m1_xlarge = 'm1.xlarge'
    m2_xlarge = 'm2.xlarge'
    m2_2xlarge = 'm2.2xlarge'
    m2_4xlarge = 'm2.4xlarge'
    m3_medium = 'm3.medium'
    m3_large = 'm3.large'
    m3_xlarge = 'm3.xlarge'
    m3_2xlarge = 'm3.2xlarge'
    m4_large = 'm4.large'
    m4_xlarge = 'm4.xlarge'
    m4_2xlarge = 'm4.2xlarge'
    m4_4xlarge = 'm4.4xlarge'
    m4_10xlarge = 'm4.10xlarge'
    m4_16xlarge = 'm4.16xlarge'
    m5_large = 'm5.large'
    m5_xlarge = 'm5.xlarge'
    m5_2xlarge = 'm5.2xlarge'
    m5_4xlarge = 'm5.4xlarge'
    m5_8xlarge = 'm5.8xlarge'
    m5_12xlarge = 'm5.12xlarge'
    m5_16xlarge = 'm5.16xlarge'
    m5_24xlarge = 'm5.24xlarge'
    m5_metal = 'm5.metal'
    m5a_large = 'm5a.large'
    m5a_xlarge = 'm5a.xlarge'
    m5a_2xlarge = 'm5a.2xlarge'
    m5a_4xlarge = 'm5a.4xlarge'
    m5a_8xlarge = 'm5a.8xlarge'
    m5a_12xlarge = 'm5a.12xlarge'
    m5a_16xlarge = 'm5a.16xlarge'
    m5a_24xlarge = 'm5a.24xlarge'
    m5ad_large = 'm5ad.large'
    m5ad_xlarge = 'm5ad.xlarge'
    m5ad_2xlarge = 'm5ad.2xlarge'
    m5ad_4xlarge = 'm5ad.4xlarge'
    m5ad_8xlarge = 'm5ad.8xlarge'
    m5ad_12xlarge = 'm5ad.12xlarge'
    m5ad_16xlarge = 'm5ad.16xlarge'
    m5ad_24xlarge = 'm5ad.24xlarge'
    m5d_large = 'm5d.large'
    m5d_xlarge = 'm5d.xlarge'
    m5d_2xlarge = 'm5d.2xlarge'
    m5d_4xlarge = 'm5d.4xlarge'
    m5d_8xlarge = 'm5d.8xlarge'
    m5d_12xlarge = 'm5d.12xlarge'
    m5d_16xlarge = 'm5d.16xlarge'
    m5d_24xlarge = 'm5d.24xlarge'
    m5d_metal = 'm5d.metal'
    m5dn_large = 'm5dn.large'
    m5dn_xlarge = 'm5dn.xlarge'
    m5dn_2xlarge = 'm5dn.2xlarge'
    m5dn_4xlarge = 'm5dn.4xlarge'
    m5dn_8xlarge = 'm5dn.8xlarge'
    m5dn_12xlarge = 'm5dn.12xlarge'
    m5dn_16xlarge = 'm5dn.16xlarge'
    m5dn_24xlarge = 'm5dn.24xlarge'
    m5dn_metal = 'm5dn.metal'
    m5n_large = 'm5n.large'
    m5n_xlarge = 'm5n.xlarge'
    m5n_2xlarge = 'm5n.2xlarge'
    m5n_4xlarge = 'm5n.4xlarge'
    m5n_8xlarge = 'm5n.8xlarge'
    m5n_12xlarge = 'm5n.12xlarge'
    m5n_16xlarge = 'm5n.16xlarge'
    m5n_24xlarge = 'm5n.24xlarge'
    m5n_metal = 'm5n.metal'
    m5zn_large = 'm5zn.large'
    m5zn_xlarge = 'm5zn.xlarge'
    m5zn_2xlarge = 'm5zn.2xlarge'
    m5zn_3xlarge = 'm5zn.3xlarge'
    m5zn_6xlarge = 'm5zn.6xlarge'
    m5zn_12xlarge = 'm5zn.12xlarge'
    m5zn_metal = 'm5zn.metal'
    m6a_large = 'm6a.large'
    m6a_xlarge = 'm6a.xlarge'
    m6a_2xlarge = 'm6a.2xlarge'
    m6a_4xlarge = 'm6a.4xlarge'
    m6a_8xlarge = 'm6a.8xlarge'
    m6a_12xlarge = 'm6a.12xlarge'
    m6a_16xlarge = 'm6a.16xlarge'
    m6a_24xlarge = 'm6a.24xlarge'
    m6a_32xlarge = 'm6a.32xlarge'
    m6a_48xlarge = 'm6a.48xlarge'
    m6g_metal = 'm6g.metal'
    m6g_medium = 'm6g.medium'
    m6g_large = 'm6g.large'
    m6g_xlarge = 'm6g.xlarge'
    m6g_2xlarge = 'm6g.2xlarge'
    m6g_4xlarge = 'm6g.4xlarge'
    m6g_8xlarge = 'm6g.8xlarge'
    m6g_12xlarge = 'm6g.12xlarge'
    m6g_16xlarge = 'm6g.16xlarge'
    m6gd_metal = 'm6gd.metal'
    m6gd_medium = 'm6gd.medium'
    m6gd_large = 'm6gd.large'
    m6gd_xlarge = 'm6gd.xlarge'
    m6gd_2xlarge = 'm6gd.2xlarge'
    m6gd_4xlarge = 'm6gd.4xlarge'
    m6gd_8xlarge = 'm6gd.8xlarge'
    m6gd_12xlarge = 'm6gd.12xlarge'
    m6gd_16xlarge = 'm6gd.16xlarge'
    m6i_large = 'm6i.large'
    m6i_xlarge = 'm6i.xlarge'
    m6i_2xlarge = 'm6i.2xlarge'
    m6i_4xlarge = 'm6i.4xlarge'
    m6i_8xlarge = 'm6i.8xlarge'
    m6i_12xlarge = 'm6i.12xlarge'
    m6i_16xlarge = 'm6i.16xlarge'
    m6i_24xlarge = 'm6i.24xlarge'
    m6i_32xlarge = 'm6i.32xlarge'
    m6i_metal = 'm6i.metal'
    mac1_metal = 'mac1.metal'
    p2_xlarge = 'p2.xlarge'
    p2_8xlarge = 'p2.8xlarge'
    p2_16xlarge = 'p2.16xlarge'
    p3_2xlarge = 'p3.2xlarge'
    p3_8xlarge = 'p3.8xlarge'
    p3_16xlarge = 'p3.16xlarge'
    p3dn_24xlarge = 'p3dn.24xlarge'
    p4d_24xlarge = 'p4d.24xlarge'
    r3_large = 'r3.large'
    r3_xlarge = 'r3.xlarge'
    r3_2xlarge = 'r3.2xlarge'
    r3_4xlarge = 'r3.4xlarge'
    r3_8xlarge = 'r3.8xlarge'
    r4_large = 'r4.large'
    r4_xlarge = 'r4.xlarge'
    r4_2xlarge = 'r4.2xlarge'
    r4_4xlarge = 'r4.4xlarge'
    r4_8xlarge = 'r4.8xlarge'
    r4_16xlarge = 'r4.16xlarge'
    r5_large = 'r5.large'
    r5_xlarge = 'r5.xlarge'
    r5_2xlarge = 'r5.2xlarge'
    r5_4xlarge = 'r5.4xlarge'
    r5_8xlarge = 'r5.8xlarge'
    r5_12xlarge = 'r5.12xlarge'
    r5_16xlarge = 'r5.16xlarge'
    r5_24xlarge = 'r5.24xlarge'
    r5_metal = 'r5.metal'
    r5a_large = 'r5a.large'
    r5a_xlarge = 'r5a.xlarge'
    r5a_2xlarge = 'r5a.2xlarge'
    r5a_4xlarge = 'r5a.4xlarge'
    r5a_8xlarge = 'r5a.8xlarge'
    r5a_12xlarge = 'r5a.12xlarge'
    r5a_16xlarge = 'r5a.16xlarge'
    r5a_24xlarge = 'r5a.24xlarge'
    r5ad_large = 'r5ad.large'
    r5ad_xlarge = 'r5ad.xlarge'
    r5ad_2xlarge = 'r5ad.2xlarge'
    r5ad_4xlarge = 'r5ad.4xlarge'
    r5ad_8xlarge = 'r5ad.8xlarge'
    r5ad_12xlarge = 'r5ad.12xlarge'
    r5ad_16xlarge = 'r5ad.16xlarge'
    r5ad_24xlarge = 'r5ad.24xlarge'
    r5b_large = 'r5b.large'
    r5b_xlarge = 'r5b.xlarge'
    r5b_2xlarge = 'r5b.2xlarge'
    r5b_4xlarge = 'r5b.4xlarge'
    r5b_8xlarge = 'r5b.8xlarge'
    r5b_12xlarge = 'r5b.12xlarge'
    r5b_16xlarge = 'r5b.16xlarge'
    r5b_24xlarge = 'r5b.24xlarge'
    r5b_metal = 'r5b.metal'
    r5d_large = 'r5d.large'
    r5d_xlarge = 'r5d.xlarge'
    r5d_2xlarge = 'r5d.2xlarge'
    r5d_4xlarge = 'r5d.4xlarge'
    r5d_8xlarge = 'r5d.8xlarge'
    r5d_12xlarge = 'r5d.12xlarge'
    r5d_16xlarge = 'r5d.16xlarge'
    r5d_24xlarge = 'r5d.24xlarge'
    r5d_metal = 'r5d.metal'
    r5dn_large = 'r5dn.large'
    r5dn_xlarge = 'r5dn.xlarge'
    r5dn_2xlarge = 'r5dn.2xlarge'
    r5dn_4xlarge = 'r5dn.4xlarge'
    r5dn_8xlarge = 'r5dn.8xlarge'
    r5dn_12xlarge = 'r5dn.12xlarge'
    r5dn_16xlarge = 'r5dn.16xlarge'
    r5dn_24xlarge = 'r5dn.24xlarge'
    r5dn_metal = 'r5dn.metal'
    r5n_large = 'r5n.large'
    r5n_xlarge = 'r5n.xlarge'
    r5n_2xlarge = 'r5n.2xlarge'
    r5n_4xlarge = 'r5n.4xlarge'
    r5n_8xlarge = 'r5n.8xlarge'
    r5n_12xlarge = 'r5n.12xlarge'
    r5n_16xlarge = 'r5n.16xlarge'
    r5n_24xlarge = 'r5n.24xlarge'
    r5n_metal = 'r5n.metal'
    r6g_medium = 'r6g.medium'
    r6g_large = 'r6g.large'
    r6g_xlarge = 'r6g.xlarge'
    r6g_2xlarge = 'r6g.2xlarge'
    r6g_4xlarge = 'r6g.4xlarge'
    r6g_8xlarge = 'r6g.8xlarge'
    r6g_12xlarge = 'r6g.12xlarge'
    r6g_16xlarge = 'r6g.16xlarge'
    r6g_metal = 'r6g.metal'
    r6gd_medium = 'r6gd.medium'
    r6gd_large = 'r6gd.large'
    r6gd_xlarge = 'r6gd.xlarge'
    r6gd_2xlarge = 'r6gd.2xlarge'
    r6gd_4xlarge = 'r6gd.4xlarge'
    r6gd_8xlarge = 'r6gd.8xlarge'
    r6gd_12xlarge = 'r6gd.12xlarge'
    r6gd_16xlarge = 'r6gd.16xlarge'
    r6gd_metal = 'r6gd.metal'
    r6i_large = 'r6i.large'
    r6i_xlarge = 'r6i.xlarge'
    r6i_2xlarge = 'r6i.2xlarge'
    r6i_4xlarge = 'r6i.4xlarge'
    r6i_8xlarge = 'r6i.8xlarge'
    r6i_12xlarge = 'r6i.12xlarge'
    r6i_16xlarge = 'r6i.16xlarge'
    r6i_24xlarge = 'r6i.24xlarge'
    r6i_32xlarge = 'r6i.32xlarge'
    r6i_metal = 'r6i.metal'
    t1_micro = 't1.micro'
    t2_nano = 't2.nano'
    t2_micro = 't2.micro'
    t2_small = 't2.small'
    t2_medium = 't2.medium'
    t2_large = 't2.large'
    t2_xlarge = 't2.xlarge'
    t2_2xlarge = 't2.2xlarge'
    t3_nano = 't3.nano'
    t3_micro = 't3.micro'
    t3_small = 't3.small'
    t3_medium = 't3.medium'
    t3_large = 't3.large'
    t3_xlarge = 't3.xlarge'
    t3_2xlarge = 't3.2xlarge'
    t3a_nano = 't3a.nano'
    t3a_micro = 't3a.micro'
    t3a_small = 't3a.small'
    t3a_medium = 't3a.medium'
    t3a_large = 't3a.large'
    t3a_xlarge = 't3a.xlarge'
    t3a_2xlarge = 't3a.2xlarge'
    t4g_nano = 't4g.nano'
    t4g_micro = 't4g.micro'
    t4g_small = 't4g.small'
    t4g_medium = 't4g.medium'
    t4g_large = 't4g.large'
    t4g_xlarge = 't4g.xlarge'
    t4g_2xlarge = 't4g.2xlarge'
    u_6tb1_56xlarge = 'u-6tb1.56xlarge'
    u_6tb1_112xlarge = 'u-6tb1.112xlarge'
    u_9tb1_112xlarge = 'u-9tb1.112xlarge'
    u_12tb1_112xlarge = 'u-12tb1.112xlarge'
    u_6tb1_metal = 'u-6tb1.metal'
    u_9tb1_metal = 'u-9tb1.metal'
    u_12tb1_metal = 'u-12tb1.metal'
    u_18tb1_metal = 'u-18tb1.metal'
    u_24tb1_metal = 'u-24tb1.metal'
    vt1_3xlarge = 'vt1.3xlarge'
    vt1_6xlarge = 'vt1.6xlarge'
    vt1_24xlarge = 'vt1.24xlarge'
    x1_16xlarge = 'x1.16xlarge'
    x1_32xlarge = 'x1.32xlarge'
    x1e_xlarge = 'x1e.xlarge'
    x1e_2xlarge = 'x1e.2xlarge'
    x1e_4xlarge = 'x1e.4xlarge'
    x1e_8xlarge = 'x1e.8xlarge'
    x1e_16xlarge = 'x1e.16xlarge'
    x1e_32xlarge = 'x1e.32xlarge'
    x2iezn_2xlarge = 'x2iezn.2xlarge'
    x2iezn_4xlarge = 'x2iezn.4xlarge'
    x2iezn_6xlarge = 'x2iezn.6xlarge'
    x2iezn_8xlarge = 'x2iezn.8xlarge'
    x2iezn_12xlarge = 'x2iezn.12xlarge'
    x2iezn_metal = 'x2iezn.metal'
    x2gd_medium = 'x2gd.medium'
    x2gd_large = 'x2gd.large'
    x2gd_xlarge = 'x2gd.xlarge'
    x2gd_2xlarge = 'x2gd.2xlarge'
    x2gd_4xlarge = 'x2gd.4xlarge'
    x2gd_8xlarge = 'x2gd.8xlarge'
    x2gd_12xlarge = 'x2gd.12xlarge'
    x2gd_16xlarge = 'x2gd.16xlarge'
    x2gd_metal = 'x2gd.metal'
    z1d_large = 'z1d.large'
    z1d_xlarge = 'z1d.xlarge'
    z1d_2xlarge = 'z1d.2xlarge'
    z1d_3xlarge = 'z1d.3xlarge'
    z1d_6xlarge = 'z1d.6xlarge'
    z1d_12xlarge = 'z1d.12xlarge'
    z1d_metal = 'z1d.metal'
    x2idn_16xlarge = 'x2idn.16xlarge'
    x2idn_24xlarge = 'x2idn.24xlarge'
    x2idn_32xlarge = 'x2idn.32xlarge'
    x2iedn_xlarge = 'x2iedn.xlarge'
    x2iedn_2xlarge = 'x2iedn.2xlarge'
    x2iedn_4xlarge = 'x2iedn.4xlarge'
    x2iedn_8xlarge = 'x2iedn.8xlarge'
    x2iedn_16xlarge = 'x2iedn.16xlarge'
    x2iedn_24xlarge = 'x2iedn.24xlarge'
    x2iedn_32xlarge = 'x2iedn.32xlarge'
    c6a_large = 'c6a.large'
    c6a_xlarge = 'c6a.xlarge'
    c6a_2xlarge = 'c6a.2xlarge'
    c6a_4xlarge = 'c6a.4xlarge'
    c6a_8xlarge = 'c6a.8xlarge'
    c6a_12xlarge = 'c6a.12xlarge'
    c6a_16xlarge = 'c6a.16xlarge'
    c6a_24xlarge = 'c6a.24xlarge'
    c6a_32xlarge = 'c6a.32xlarge'
    c6a_48xlarge = 'c6a.48xlarge'
    c6a_metal = 'c6a.metal'
    m6a_metal = 'm6a.metal'
    i4i_large = 'i4i.large'
    i4i_xlarge = 'i4i.xlarge'
    i4i_2xlarge = 'i4i.2xlarge'
    i4i_4xlarge = 'i4i.4xlarge'
    i4i_8xlarge = 'i4i.8xlarge'
    i4i_16xlarge = 'i4i.16xlarge'
    i4i_32xlarge = 'i4i.32xlarge'
    i4i_metal = 'i4i.metal'
    x2idn_metal = 'x2idn.metal'
    x2iedn_metal = 'x2iedn.metal'
    c7g_medium = 'c7g.medium'
    c7g_large = 'c7g.large'
    c7g_xlarge = 'c7g.xlarge'
    c7g_2xlarge = 'c7g.2xlarge'
    c7g_4xlarge = 'c7g.4xlarge'
    c7g_8xlarge = 'c7g.8xlarge'
    c7g_12xlarge = 'c7g.12xlarge'
    c7g_16xlarge = 'c7g.16xlarge'
    mac2_metal = 'mac2.metal'
    c6id_large = 'c6id.large'
    c6id_xlarge = 'c6id.xlarge'
    c6id_2xlarge = 'c6id.2xlarge'
    c6id_4xlarge = 'c6id.4xlarge'
    c6id_8xlarge = 'c6id.8xlarge'
    c6id_12xlarge = 'c6id.12xlarge'
    c6id_16xlarge = 'c6id.16xlarge'
    c6id_24xlarge = 'c6id.24xlarge'
    c6id_32xlarge = 'c6id.32xlarge'
    c6id_metal = 'c6id.metal'
    m6id_large = 'm6id.large'
    m6id_xlarge = 'm6id.xlarge'
    m6id_2xlarge = 'm6id.2xlarge'
    m6id_4xlarge = 'm6id.4xlarge'
    m6id_8xlarge = 'm6id.8xlarge'
    m6id_12xlarge = 'm6id.12xlarge'
    m6id_16xlarge = 'm6id.16xlarge'
    m6id_24xlarge = 'm6id.24xlarge'
    m6id_32xlarge = 'm6id.32xlarge'
    m6id_metal = 'm6id.metal'
    r6id_large = 'r6id.large'
    r6id_xlarge = 'r6id.xlarge'
    r6id_2xlarge = 'r6id.2xlarge'
    r6id_4xlarge = 'r6id.4xlarge'
    r6id_8xlarge = 'r6id.8xlarge'
    r6id_12xlarge = 'r6id.12xlarge'
    r6id_16xlarge = 'r6id.16xlarge'
    r6id_24xlarge = 'r6id.24xlarge'
    r6id_32xlarge = 'r6id.32xlarge'
    r6id_metal = 'r6id.metal'
    r6a_large = 'r6a.large'
    r6a_xlarge = 'r6a.xlarge'
    r6a_2xlarge = 'r6a.2xlarge'
    r6a_4xlarge = 'r6a.4xlarge'
    r6a_8xlarge = 'r6a.8xlarge'
    r6a_12xlarge = 'r6a.12xlarge'
    r6a_16xlarge = 'r6a.16xlarge'
    r6a_24xlarge = 'r6a.24xlarge'
    r6a_32xlarge = 'r6a.32xlarge'
    r6a_48xlarge = 'r6a.48xlarge'
    r6a_metal = 'r6a.metal'
    p4de_24xlarge = 'p4de.24xlarge'
    u_3tb1_56xlarge = 'u-3tb1.56xlarge'
    u_18tb1_112xlarge = 'u-18tb1.112xlarge'
    u_24tb1_112xlarge = 'u-24tb1.112xlarge'
    trn1_2xlarge = 'trn1.2xlarge'
    trn1_32xlarge = 'trn1.32xlarge'
    hpc6id_32xlarge = 'hpc6id.32xlarge'
    c6in_large = 'c6in.large'
    c6in_xlarge = 'c6in.xlarge'
    c6in_2xlarge = 'c6in.2xlarge'
    c6in_4xlarge = 'c6in.4xlarge'
    c6in_8xlarge = 'c6in.8xlarge'
    c6in_12xlarge = 'c6in.12xlarge'
    c6in_16xlarge = 'c6in.16xlarge'
    c6in_24xlarge = 'c6in.24xlarge'
    c6in_32xlarge = 'c6in.32xlarge'
    m6in_large = 'm6in.large'
    m6in_xlarge = 'm6in.xlarge'
    m6in_2xlarge = 'm6in.2xlarge'
    m6in_4xlarge = 'm6in.4xlarge'
    m6in_8xlarge = 'm6in.8xlarge'
    m6in_12xlarge = 'm6in.12xlarge'
    m6in_16xlarge = 'm6in.16xlarge'
    m6in_24xlarge = 'm6in.24xlarge'
    m6in_32xlarge = 'm6in.32xlarge'
    m6idn_large = 'm6idn.large'
    m6idn_xlarge = 'm6idn.xlarge'
    m6idn_2xlarge = 'm6idn.2xlarge'
    m6idn_4xlarge = 'm6idn.4xlarge'
    m6idn_8xlarge = 'm6idn.8xlarge'
    m6idn_12xlarge = 'm6idn.12xlarge'
    m6idn_16xlarge = 'm6idn.16xlarge'
    m6idn_24xlarge = 'm6idn.24xlarge'
    m6idn_32xlarge = 'm6idn.32xlarge'
    r6in_large = 'r6in.large'
    r6in_xlarge = 'r6in.xlarge'
    r6in_2xlarge = 'r6in.2xlarge'
    r6in_4xlarge = 'r6in.4xlarge'
    r6in_8xlarge = 'r6in.8xlarge'
    r6in_12xlarge = 'r6in.12xlarge'
    r6in_16xlarge = 'r6in.16xlarge'
    r6in_24xlarge = 'r6in.24xlarge'
    r6in_32xlarge = 'r6in.32xlarge'
    r6idn_large = 'r6idn.large'
    r6idn_xlarge = 'r6idn.xlarge'
    r6idn_2xlarge = 'r6idn.2xlarge'
    r6idn_4xlarge = 'r6idn.4xlarge'
    r6idn_8xlarge = 'r6idn.8xlarge'
    r6idn_12xlarge = 'r6idn.12xlarge'
    r6idn_16xlarge = 'r6idn.16xlarge'
    r6idn_24xlarge = 'r6idn.24xlarge'
    r6idn_32xlarge = 'r6idn.32xlarge'
    c7g_metal = 'c7g.metal'
    m7g_medium = 'm7g.medium'
    m7g_large = 'm7g.large'
    m7g_xlarge = 'm7g.xlarge'
    m7g_2xlarge = 'm7g.2xlarge'
    m7g_4xlarge = 'm7g.4xlarge'
    m7g_8xlarge = 'm7g.8xlarge'
    m7g_12xlarge = 'm7g.12xlarge'
    m7g_16xlarge = 'm7g.16xlarge'
    m7g_metal = 'm7g.metal'
    r7g_medium = 'r7g.medium'
    r7g_large = 'r7g.large'
    r7g_xlarge = 'r7g.xlarge'
    r7g_2xlarge = 'r7g.2xlarge'
    r7g_4xlarge = 'r7g.4xlarge'
    r7g_8xlarge = 'r7g.8xlarge'
    r7g_12xlarge = 'r7g.12xlarge'
    r7g_16xlarge = 'r7g.16xlarge'
    r7g_metal = 'r7g.metal'
    c6in_metal = 'c6in.metal'
    m6in_metal = 'm6in.metal'
    m6idn_metal = 'm6idn.metal'
    r6in_metal = 'r6in.metal'
    r6idn_metal = 'r6idn.metal'


class InstanceTypeHypervisor(Enum):
    nitro = 'nitro'
    xen = 'xen'


class InstanceTypeList(RootModel[List[InstanceType]]):
    root: List[InstanceType]


class Integer(RootModel[int]):
    root: int


class IntegerWithConstraints(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class InterfacePermissionType(Enum):
    INSTANCE_ATTACH = 'INSTANCE-ATTACH'
    EIP_ASSOCIATE = 'EIP-ASSOCIATE'


class InterfaceProtocolType(Enum):
    VLAN = 'VLAN'
    GRE = 'GRE'


class InternetGatewayId(RootModel[str]):
    root: str


class InternetGatewayIdList(RootModel[List[InternetGatewayId]]):
    root: List[InternetGatewayId]


class IpAddress(
    RootModel[
        constr(pattern=r'^([0-9]{1,3}.){3}[0-9]{1,3}$', min_length=0, max_length=15)
    ]
):
    root: constr(pattern=r'^([0-9]{1,3}.){3}[0-9]{1,3}$', min_length=0, max_length=15)


class IpAddressList(RootModel[List[IpAddress]]):
    root: List[IpAddress]


class IpAddressType(Enum):
    ipv4 = 'ipv4'
    dualstack = 'dualstack'
    ipv6 = 'ipv6'


class IpamAddressHistoryMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class IpamAddressHistoryResourceType(Enum):
    eip = 'eip'
    vpc = 'vpc'
    subnet = 'subnet'
    network_interface = 'network-interface'
    instance = 'instance'


class IpamAssociatedResourceDiscoveryStatus(Enum):
    active = 'active'
    not_found = 'not-found'


class IpamComplianceStatus(Enum):
    compliant = 'compliant'
    noncompliant = 'noncompliant'
    unmanaged = 'unmanaged'
    ignored = 'ignored'


class IpamDiscoveryFailureCode(Enum):
    assume_role_failure = 'assume-role-failure'
    throttling_failure = 'throttling-failure'
    unauthorized_failure = 'unauthorized-failure'


class IpamId(RootModel[str]):
    root: str


class IpamManagementState(Enum):
    managed = 'managed'
    unmanaged = 'unmanaged'
    ignored = 'ignored'


class IpamMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class IpamNetmaskLength(RootModel[conint(ge=0, le=128)]):
    root: conint(ge=0, le=128)


class IpamOverlapStatus(Enum):
    overlapping = 'overlapping'
    nonoverlapping = 'nonoverlapping'
    ignored = 'ignored'


class IpamPoolAllocationId(RootModel[str]):
    root: str


class IpamPoolAllocationResourceType(Enum):
    ipam_pool = 'ipam-pool'
    vpc = 'vpc'
    ec2_public_ipv4_pool = 'ec2-public-ipv4-pool'
    custom = 'custom'


class IpamPoolAwsService(Enum):
    ec2 = 'ec2'


class IpamPoolCidrFailureCode(Enum):
    cidr_not_available = 'cidr-not-available'
    limit_exceeded = 'limit-exceeded'


class IpamPoolCidrId(RootModel[str]):
    root: str


class IpamPoolCidrState(Enum):
    pending_provision = 'pending-provision'
    provisioned = 'provisioned'
    failed_provision = 'failed-provision'
    pending_deprovision = 'pending-deprovision'
    deprovisioned = 'deprovisioned'
    failed_deprovision = 'failed-deprovision'
    pending_import = 'pending-import'
    failed_import = 'failed-import'


class IpamPoolId(RootModel[str]):
    root: str


class IpamPoolPublicIpSource(Enum):
    amazon = 'amazon'
    byoip = 'byoip'


class IpamPoolState(Enum):
    create_in_progress = 'create-in-progress'
    create_complete = 'create-complete'
    create_failed = 'create-failed'
    modify_in_progress = 'modify-in-progress'
    modify_complete = 'modify-complete'
    modify_failed = 'modify-failed'
    delete_in_progress = 'delete-in-progress'
    delete_complete = 'delete-complete'
    delete_failed = 'delete-failed'
    isolate_in_progress = 'isolate-in-progress'
    isolate_complete = 'isolate-complete'
    restore_in_progress = 'restore-in-progress'


class IpamResourceDiscoveryAssociationId(RootModel[str]):
    root: str


class IpamResourceDiscoveryAssociationState(Enum):
    associate_in_progress = 'associate-in-progress'
    associate_complete = 'associate-complete'
    associate_failed = 'associate-failed'
    disassociate_in_progress = 'disassociate-in-progress'
    disassociate_complete = 'disassociate-complete'
    disassociate_failed = 'disassociate-failed'
    isolate_in_progress = 'isolate-in-progress'
    isolate_complete = 'isolate-complete'
    restore_in_progress = 'restore-in-progress'


class IpamResourceDiscoveryId(RootModel[str]):
    root: str


class IpamResourceDiscoveryState(Enum):
    create_in_progress = 'create-in-progress'
    create_complete = 'create-complete'
    create_failed = 'create-failed'
    modify_in_progress = 'modify-in-progress'
    modify_complete = 'modify-complete'
    modify_failed = 'modify-failed'
    delete_in_progress = 'delete-in-progress'
    delete_complete = 'delete-complete'
    delete_failed = 'delete-failed'
    isolate_in_progress = 'isolate-in-progress'
    isolate_complete = 'isolate-complete'
    restore_in_progress = 'restore-in-progress'


class IpamResourceType(Enum):
    vpc = 'vpc'
    subnet = 'subnet'
    eip = 'eip'
    public_ipv4_pool = 'public-ipv4-pool'
    ipv6_pool = 'ipv6-pool'


class IpamScopeId(RootModel[str]):
    root: str


class IpamScopeState(Enum):
    create_in_progress = 'create-in-progress'
    create_complete = 'create-complete'
    create_failed = 'create-failed'
    modify_in_progress = 'modify-in-progress'
    modify_complete = 'modify-complete'
    modify_failed = 'modify-failed'
    delete_in_progress = 'delete-in-progress'
    delete_complete = 'delete-complete'
    delete_failed = 'delete-failed'
    isolate_in_progress = 'isolate-in-progress'
    isolate_complete = 'isolate-complete'
    restore_in_progress = 'restore-in-progress'


class IpamScopeType(Enum):
    public = 'public'
    private = 'private'


class IpamState(Enum):
    create_in_progress = 'create-in-progress'
    create_complete = 'create-complete'
    create_failed = 'create-failed'
    modify_in_progress = 'modify-in-progress'
    modify_complete = 'modify-complete'
    modify_failed = 'modify-failed'
    delete_in_progress = 'delete-in-progress'
    delete_complete = 'delete-complete'
    delete_failed = 'delete-failed'
    isolate_in_progress = 'isolate-in-progress'
    isolate_complete = 'isolate-complete'
    restore_in_progress = 'restore-in-progress'


class Ipv4PoolCoipId(RootModel[str]):
    root: str


class Ipv4PoolEc2Id(RootModel[str]):
    root: str


class Ipv6Address(RootModel[str]):
    root: str


class Ipv6Flag(RootModel[bool]):
    root: bool


class Ipv6PoolEc2Id(RootModel[str]):
    root: str


class Ipv6PoolIdList(RootModel[List[Ipv6PoolEc2Id]]):
    root: List[Ipv6PoolEc2Id]


class Ipv6PoolMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class Ipv6SupportValue(Enum):
    enable = 'enable'
    disable = 'disable'


class KernelId(RootModel[str]):
    root: str


class KeyFormat(Enum):
    pem = 'pem'
    ppk = 'ppk'


class KeyPairId(RootModel[str]):
    root: str


class KeyPairIdStringList(RootModel[List[KeyPairId]]):
    root: List[KeyPairId]


class KeyPairName(RootModel[str]):
    root: str


class KeyType(Enum):
    rsa = 'rsa'
    ed25519 = 'ed25519'


class KmsKeyId(RootModel[str]):
    root: str


class LaunchTemplateAutoRecoveryState(Enum):
    default = 'default'
    disabled = 'disabled'


class LaunchTemplateCpuOptions(BaseModel):
    CoreCount: Optional[Integer] = None
    ThreadsPerCore: Optional[Integer] = None


class LaunchTemplateCpuOptionsRequest(BaseModel):
    CoreCount: Optional[Integer] = None
    ThreadsPerCore: Optional[Integer] = None


class LaunchTemplateElasticInferenceAcceleratorCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class LaunchTemplateEnclaveOptions(BaseModel):
    Enabled: Optional[Boolean] = None


class LaunchTemplateEnclaveOptionsRequest(BaseModel):
    Enabled: Optional[Boolean] = None


class LaunchTemplateErrorCode(Enum):
    launchTemplateIdDoesNotExist = 'launchTemplateIdDoesNotExist'
    launchTemplateIdMalformed = 'launchTemplateIdMalformed'
    launchTemplateNameDoesNotExist = 'launchTemplateNameDoesNotExist'
    launchTemplateNameMalformed = 'launchTemplateNameMalformed'
    launchTemplateVersionDoesNotExist = 'launchTemplateVersionDoesNotExist'
    unexpectedError = 'unexpectedError'


class LaunchTemplateHibernationOptions(BaseModel):
    Configured: Optional[Boolean] = None


class LaunchTemplateHibernationOptionsRequest(BaseModel):
    Configured: Optional[Boolean] = None


class LaunchTemplateHttpTokensState(Enum):
    optional = 'optional'
    required = 'required'


class LaunchTemplateId(RootModel[str]):
    root: str


class LaunchTemplateIdStringList(RootModel[List[LaunchTemplateId]]):
    root: List[LaunchTemplateId]


class LaunchTemplateInstanceMaintenanceOptions(BaseModel):
    AutoRecovery: Optional[LaunchTemplateAutoRecoveryState] = None


class LaunchTemplateInstanceMaintenanceOptionsRequest(BaseModel):
    AutoRecovery: Optional[LaunchTemplateAutoRecoveryState] = None


class LaunchTemplateInstanceMetadataEndpointState(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class LaunchTemplateInstanceMetadataOptionsState(Enum):
    pending = 'pending'
    applied = 'applied'


class LaunchTemplateInstanceMetadataProtocolIpv6(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class LaunchTemplateInstanceMetadataTagsState(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class LaunchTemplateName(
    RootModel[constr(pattern=r'[a-zA-Z0-9\(\)\.\-/_]+', min_length=3, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9\(\)\.\-/_]+', min_length=3, max_length=128)


class LaunchTemplateNameStringList(RootModel[List[LaunchTemplateName]]):
    root: List[LaunchTemplateName]


class LaunchTemplatePrivateDnsNameOptions(BaseModel):
    EnableResourceNameDnsAAAARecord: Optional[Boolean] = None
    EnableResourceNameDnsARecord: Optional[Boolean] = None
    HostnameType_1: Optional[HostnameType] = Field(None, alias='HostnameType')


class LaunchTemplatePrivateDnsNameOptionsRequest(BaseModel):
    EnableResourceNameDnsAAAARecord: Optional[Boolean] = None
    EnableResourceNameDnsARecord: Optional[Boolean] = None
    HostnameType_1: Optional[HostnameType] = Field(None, alias='HostnameType')


class LaunchTemplatesMonitoring(BaseModel):
    Enabled: Optional[Boolean] = None


class LaunchTemplatesMonitoringRequest(BaseModel):
    Enabled: Optional[Boolean] = None


class ListImagesInRecycleBinMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class ListSnapshotsInRecycleBinMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class ListingState(Enum):
    available = 'available'
    sold = 'sold'
    cancelled = 'cancelled'
    pending = 'pending'


class ListingStatus(Enum):
    active = 'active'
    pending = 'pending'
    cancelled = 'cancelled'
    closed = 'closed'


class LoadBalancerArn(RootModel[str]):
    root: str


class LocalGatewayId(RootModel[str]):
    root: str


class LocalGatewayIdSet(RootModel[List[LocalGatewayId]]):
    root: List[LocalGatewayId]


class LocalGatewayMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class LocalGatewayRouteState(Enum):
    pending = 'pending'
    active = 'active'
    blackhole = 'blackhole'
    deleting = 'deleting'
    deleted = 'deleted'


class LocalGatewayRouteTableMode(Enum):
    direct_vpc_routing = 'direct-vpc-routing'
    coip = 'coip'


class LocalGatewayRouteTableVirtualInterfaceGroupAssociationId(RootModel[str]):
    root: str


class LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(
    RootModel[List[LocalGatewayRouteTableVirtualInterfaceGroupAssociationId]]
):
    root: List[LocalGatewayRouteTableVirtualInterfaceGroupAssociationId]


class LocalGatewayRouteTableVpcAssociationId(RootModel[str]):
    root: str


class LocalGatewayRouteTableVpcAssociationIdSet(
    RootModel[List[LocalGatewayRouteTableVpcAssociationId]]
):
    root: List[LocalGatewayRouteTableVpcAssociationId]


class LocalGatewayRouteType(Enum):
    static = 'static'
    propagated = 'propagated'


class LocalGatewayRoutetableId(RootModel[str]):
    root: str


class LocalGatewayVirtualInterfaceGroupId(RootModel[str]):
    root: str


class LocalGatewayVirtualInterfaceGroupIdSet(
    RootModel[List[LocalGatewayVirtualInterfaceGroupId]]
):
    root: List[LocalGatewayVirtualInterfaceGroupId]


class LocalGatewayVirtualInterfaceId(RootModel[str]):
    root: str


class LocalGatewayVirtualInterfaceIdSet(
    RootModel[List[LocalGatewayVirtualInterfaceId]]
):
    root: List[LocalGatewayVirtualInterfaceId]


class LocalStorage(Enum):
    included = 'included'
    required = 'required'
    excluded = 'excluded'


class LocalStorageType(Enum):
    hdd = 'hdd'
    ssd = 'ssd'


class LocalStorageTypeSet(RootModel[List[LocalStorageType]]):
    root: List[LocalStorageType]


class Location(RootModel[str]):
    root: str


class LocationType(Enum):
    region = 'region'
    availability_zone = 'availability-zone'
    availability_zone_id = 'availability-zone-id'


class LogDestinationType(Enum):
    cloud_watch_logs = 'cloud-watch-logs'
    s3 = 's3'
    kinesis_data_firehose = 'kinesis-data-firehose'


class Long(RootModel[int]):
    root: int


class MarketType(Enum):
    spot = 'spot'


class MaxIpv4AddrPerInterface(RootModel[int]):
    root: int


class MaxIpv6AddrPerInterface(RootModel[int]):
    root: int


class MaxNetworkInterfaces(RootModel[int]):
    root: int


class MaxResults(RootModel[int]):
    root: int


class MaxResultsParam(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class MaximumBandwidthInMbps(RootModel[int]):
    root: int


class MaximumEfaInterfaces(RootModel[int]):
    root: int


class MaximumIops(RootModel[int]):
    root: int


class MaximumNetworkCards(RootModel[int]):
    root: int


class MaximumThroughputInMBps(RootModel[float]):
    root: float


class MembershipType(Enum):
    static = 'static'
    igmp = 'igmp'


class MemoryGiBPerVCpu(BaseModel):
    Max: Optional[Double] = None
    Min: Optional[Double] = None


class MemoryGiBPerVCpuRequest(BaseModel):
    Max: Optional[Double] = None
    Min: Optional[Double] = None


class MemoryMiB(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class MemoryMiBRequest(BaseModel):
    Max: Optional[Integer] = None
    Min: Integer


class MemorySize(RootModel[int]):
    root: int


class MetricType(Enum):
    aggregate_latency = 'aggregate-latency'


class MillisecondDateTime(RootModel[datetime]):
    root: datetime


class ModifyAvailabilityZoneGroupResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyAvailabilityZoneOptInStatus(Enum):
    opted_in = 'opted-in'
    not_opted_in = 'not-opted-in'


class ModifyCapacityReservationFleetRequest(BaseModel):
    CapacityReservationFleetId_1: CapacityReservationFleetId = Field(
        ..., alias='CapacityReservationFleetId'
    )
    DryRun: Optional[Boolean] = None
    EndDate: Optional[MillisecondDateTime] = None
    RemoveEndDate: Optional[Boolean] = None
    TotalTargetCapacity: Optional[Integer] = None


class ModifyCapacityReservationFleetResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyCapacityReservationResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyClientVpnEndpointResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyEbsDefaultKmsKeyIdRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    KmsKeyId_1: KmsKeyId = Field(..., alias='KmsKeyId')


class ModifyFleetResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyInstanceCapacityReservationAttributesResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyInstanceMaintenanceOptionsRequest(BaseModel):
    AutoRecovery: Optional[InstanceAutoRecoveryState] = None
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class ModifyInstanceMetadataOptionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    HttpEndpoint: Optional[InstanceMetadataEndpointState] = None
    HttpProtocolIpv6: Optional[InstanceMetadataProtocolState] = None
    HttpPutResponseHopLimit: Optional[Integer] = None
    HttpTokens: Optional[HttpTokensState] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    InstanceMetadataTags: Optional[InstanceMetadataTagsState] = None


class ModifyInstancePlacementResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyPrivateDnsNameOptionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    EnableResourceNameDnsAAAARecord: Optional[Boolean] = None
    EnableResourceNameDnsARecord: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    PrivateDnsHostnameType: Optional[HostnameType] = None


class ModifyPrivateDnsNameOptionsResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifySecurityGroupRulesResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifySpotFleetRequestResponse(BaseModel):
    Return: Optional[Boolean] = None


class ModifyTransitGatewayVpcAttachmentRequestOptions(BaseModel):
    ApplianceModeSupport: Optional[ApplianceModeSupportValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    Ipv6Support: Optional[Ipv6SupportValue] = None


class ModifyVpcEndpointConnectionNotificationResult(BaseModel):
    ReturnValue: Optional[Boolean] = None


class ModifyVpcEndpointResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyVpcEndpointServiceConfigurationResult(BaseModel):
    Return: Optional[Boolean] = None


class ModifyVpcEndpointServicePayerResponsibilityResult(BaseModel):
    ReturnValue: Optional[Boolean] = None


class ModifyVpcTenancyResult(BaseModel):
    ReturnValue: Optional[Boolean] = None


class MonitorInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceIds: InstanceIdStringList


class MonitoringState(Enum):
    disabled = 'disabled'
    disabling = 'disabling'
    enabled = 'enabled'
    pending = 'pending'


class MoveStatus(Enum):
    movingToVpc = 'movingToVpc'
    restoringToClassic = 'restoringToClassic'


class MulticastSupportValue(Enum):
    enable = 'enable'
    disable = 'disable'


class NatGatewayAddressStatus(Enum):
    assigning = 'assigning'
    unassigning = 'unassigning'
    associating = 'associating'
    disassociating = 'disassociating'
    succeeded = 'succeeded'
    failed = 'failed'


class NatGatewayId(RootModel[str]):
    root: str


class NatGatewayIdStringList(RootModel[List[NatGatewayId]]):
    root: List[NatGatewayId]


class NatGatewayState(Enum):
    pending = 'pending'
    failed = 'failed'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class NetmaskLength(RootModel[int]):
    root: int


class NetworkAclAssociationId(RootModel[str]):
    root: str


class NetworkAclId(RootModel[str]):
    root: str


class NetworkAclIdStringList(RootModel[List[NetworkAclId]]):
    root: List[NetworkAclId]


class NetworkBandwidthGbps(BaseModel):
    Max: Optional[Double] = None
    Min: Optional[Double] = None


class NetworkBandwidthGbpsRequest(BaseModel):
    Max: Optional[Double] = None
    Min: Optional[Double] = None


class NetworkCardIndex(RootModel[int]):
    root: int


class NetworkInsightsAccessScopeAnalysisId(RootModel[str]):
    root: str


class NetworkInsightsAccessScopeAnalysisIdList(
    RootModel[List[NetworkInsightsAccessScopeAnalysisId]]
):
    root: List[NetworkInsightsAccessScopeAnalysisId]


class NetworkInsightsAccessScopeId(RootModel[str]):
    root: str


class NetworkInsightsAccessScopeIdList(RootModel[List[NetworkInsightsAccessScopeId]]):
    root: List[NetworkInsightsAccessScopeId]


class NetworkInsightsAnalysisId(RootModel[str]):
    root: str


class NetworkInsightsAnalysisIdList(RootModel[List[NetworkInsightsAnalysisId]]):
    root: List[NetworkInsightsAnalysisId]


class NetworkInsightsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NetworkInsightsPathId(RootModel[str]):
    root: str


class NetworkInsightsPathIdList(RootModel[List[NetworkInsightsPathId]]):
    root: List[NetworkInsightsPathId]


class NetworkInsightsResourceId(RootModel[str]):
    root: str


class NetworkInterfaceAttachmentId(RootModel[str]):
    root: str


class NetworkInterfaceAttribute(Enum):
    description = 'description'
    groupSet = 'groupSet'
    sourceDestCheck = 'sourceDestCheck'
    attachment = 'attachment'


class NetworkInterfaceCount(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class NetworkInterfaceCountRequest(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class NetworkInterfaceCreationType(Enum):
    efa = 'efa'
    branch = 'branch'
    trunk = 'trunk'


class NetworkInterfaceId(RootModel[str]):
    root: str


class NetworkInterfaceIdList(RootModel[List[NetworkInterfaceId]]):
    root: List[NetworkInterfaceId]


class NetworkInterfacePermissionId(RootModel[str]):
    root: str


class NetworkInterfacePermissionIdList(RootModel[List[NetworkInterfacePermissionId]]):
    root: List[NetworkInterfacePermissionId]


class NetworkInterfacePermissionStateCode(Enum):
    pending = 'pending'
    granted = 'granted'
    revoking = 'revoking'
    revoked = 'revoked'


class NetworkInterfaceStatus(Enum):
    available = 'available'
    associated = 'associated'
    attaching = 'attaching'
    in_use = 'in-use'
    detaching = 'detaching'


class NetworkInterfaceType(Enum):
    interface = 'interface'
    natGateway = 'natGateway'
    efa = 'efa'
    trunk = 'trunk'
    load_balancer = 'load_balancer'
    network_load_balancer = 'network_load_balancer'
    vpc_endpoint = 'vpc_endpoint'
    branch = 'branch'
    transit_gateway = 'transit_gateway'
    lambda_ = 'lambda'
    quicksight = 'quicksight'
    global_accelerator_managed = 'global_accelerator_managed'
    api_gateway_managed = 'api_gateway_managed'
    gateway_load_balancer = 'gateway_load_balancer'
    gateway_load_balancer_endpoint = 'gateway_load_balancer_endpoint'
    iot_rules_managed = 'iot_rules_managed'
    aws_codestar_connections_managed = 'aws_codestar_connections_managed'


class NetworkPerformance(RootModel[str]):
    root: str


class NextToken(RootModel[str]):
    root: str


class OccurrenceDayRequestSet(RootModel[List[Integer]]):
    root: List[Integer]


class OccurrenceDaySet(RootModel[List[Integer]]):
    root: List[Integer]


class OfferingClassType(Enum):
    standard = 'standard'
    convertible = 'convertible'


class OfferingId(RootModel[str]):
    root: str


class OfferingTypeValues(Enum):
    Heavy_Utilization = 'Heavy Utilization'
    Medium_Utilization = 'Medium Utilization'
    Light_Utilization = 'Light Utilization'
    No_Upfront = 'No Upfront'
    Partial_Upfront = 'Partial Upfront'
    All_Upfront = 'All Upfront'


class OnDemandAllocationStrategy(Enum):
    lowestPrice = 'lowestPrice'
    prioritized = 'prioritized'


class OperationType(Enum):
    add = 'add'
    remove = 'remove'


class OutpostArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/op-[a-f0-9]{17}$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/op-[a-f0-9]{17}$'
    )


class PartitionLoadFrequency(Enum):
    none = 'none'
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'


class PayerResponsibility(Enum):
    ServiceOwner = 'ServiceOwner'


class PaymentOption(Enum):
    AllUpfront = 'AllUpfront'
    PartialUpfront = 'PartialUpfront'
    NoUpfront = 'NoUpfront'


class PeeringConnectionOptions(BaseModel):
    AllowDnsResolutionFromRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalClassicLinkToRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalVpcToRemoteClassicLink: Optional[Boolean] = None


class PeeringConnectionOptionsRequest(BaseModel):
    AllowDnsResolutionFromRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalClassicLinkToRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalVpcToRemoteClassicLink: Optional[Boolean] = None


class PeriodType(Enum):
    five_minutes = 'five-minutes'
    fifteen_minutes = 'fifteen-minutes'
    one_hour = 'one-hour'
    three_hours = 'three-hours'
    one_day = 'one-day'
    one_week = 'one-week'


class PermissionGroup(Enum):
    all = 'all'


class Phase1DHGroupNumbersListValue(BaseModel):
    Value: Optional[Integer] = None


class Phase1DHGroupNumbersRequestListValue(BaseModel):
    Value: Optional[Integer] = None


class Phase2DHGroupNumbersListValue(BaseModel):
    Value: Optional[Integer] = None


class Phase2DHGroupNumbersRequestListValue(BaseModel):
    Value: Optional[Integer] = None


class PlacementGroupArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z-]+)?:ec2:[a-z\d-]+:\d{12}:placement-group/([^\s].+[^\s]){1,255}$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z-]+)?:ec2:[a-z\d-]+:\d{12}:placement-group/([^\s].+[^\s]){1,255}$'
    )


class PlacementGroupId(RootModel[str]):
    root: str


class PlacementGroupIdStringList(RootModel[List[PlacementGroupId]]):
    root: List[PlacementGroupId]


class PlacementGroupName(RootModel[str]):
    root: str


class PlacementGroupState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class PlacementGroupStrategy(Enum):
    cluster = 'cluster'
    partition = 'partition'
    spread = 'spread'


class PlacementGroupStrategyList(RootModel[List[PlacementGroupStrategy]]):
    root: List[PlacementGroupStrategy]


class PlacementGroupStringList(RootModel[List[PlacementGroupName]]):
    root: List[PlacementGroupName]


class PlacementResponse(BaseModel):
    GroupName: Optional[PlacementGroupName] = None


class PlacementStrategy(Enum):
    cluster = 'cluster'
    spread = 'spread'
    partition = 'partition'


class PlatformValues(Enum):
    Windows = 'Windows'


class PoolMaxResults(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class Port(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class PortRange(BaseModel):
    From: Optional[Integer] = None
    To: Optional[Integer] = None


class PortRangeList(RootModel[List[PortRange]]):
    root: List[PortRange]


class PrefixListMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PrefixListResourceId(RootModel[str]):
    root: str


class PrefixListResourceIdStringList(RootModel[List[PrefixListResourceId]]):
    root: List[PrefixListResourceId]


class PrefixListState(Enum):
    create_in_progress = 'create-in-progress'
    create_complete = 'create-complete'
    create_failed = 'create-failed'
    modify_in_progress = 'modify-in-progress'
    modify_complete = 'modify-complete'
    modify_failed = 'modify-failed'
    restore_in_progress = 'restore-in-progress'
    restore_complete = 'restore-complete'
    restore_failed = 'restore-failed'
    delete_in_progress = 'delete-in-progress'
    delete_complete = 'delete-complete'
    delete_failed = 'delete-failed'


class PriceSchedule(BaseModel):
    Active: Optional[Boolean] = None
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Price: Optional[Double] = None
    Term: Optional[Long] = None


class PriceScheduleList(RootModel[List[PriceSchedule]]):
    root: List[PriceSchedule]


class PriceScheduleSpecification(BaseModel):
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Price: Optional[Double] = None
    Term: Optional[Long] = None


class PriceScheduleSpecificationList(RootModel[List[PriceScheduleSpecification]]):
    root: List[PriceScheduleSpecification]


class PricingDetail(BaseModel):
    Count: Optional[Integer] = None
    Price: Optional[Double] = None


class PricingDetailsList(RootModel[List[PricingDetail]]):
    root: List[PricingDetail]


class PrincipalType(Enum):
    All = 'All'
    Service = 'Service'
    OrganizationUnit = 'OrganizationUnit'
    Account = 'Account'
    User = 'User'
    Role = 'Role'


class Priority(RootModel[conint(ge=-1, le=65535)]):
    root: conint(ge=-1, le=65535)


class PrivateDnsNameOptionsOnLaunch(BaseModel):
    EnableResourceNameDnsAAAARecord: Optional[Boolean] = None
    EnableResourceNameDnsARecord: Optional[Boolean] = None
    HostnameType_1: Optional[HostnameType] = Field(None, alias='HostnameType')


class PrivateDnsNameOptionsRequest(BaseModel):
    EnableResourceNameDnsAAAARecord: Optional[Boolean] = None
    EnableResourceNameDnsARecord: Optional[Boolean] = None
    HostnameType_1: Optional[HostnameType] = Field(None, alias='HostnameType')


class PrivateDnsNameOptionsResponse(BaseModel):
    EnableResourceNameDnsAAAARecord: Optional[Boolean] = None
    EnableResourceNameDnsARecord: Optional[Boolean] = None
    HostnameType_1: Optional[HostnameType] = Field(None, alias='HostnameType')


class PrivateIpAddressCount(RootModel[conint(ge=1, le=7)]):
    root: conint(ge=1, le=7)


class ProcessorSustainedClockSpeed(RootModel[float]):
    root: float


class ProductCodeValues(Enum):
    devpay = 'devpay'
    marketplace = 'marketplace'


class Protocol(Enum):
    tcp = 'tcp'
    udp = 'udp'


class ProtocolInt(RootModel[conint(ge=0, le=255)]):
    root: conint(ge=0, le=255)


class ProtocolIntList(RootModel[List[ProtocolInt]]):
    root: List[ProtocolInt]


class ProtocolList(RootModel[List[Protocol]]):
    root: List[Protocol]


class ProtocolValue(Enum):
    gre = 'gre'


class ProvisionPublicIpv4PoolCidrRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')
    NetmaskLength: Integer
    PoolId: Ipv4PoolEc2Id


class PublicIpAddress(RootModel[str]):
    root: str


class PublicIpv4PoolIdStringList(RootModel[List[Ipv4PoolEc2Id]]):
    root: List[Ipv4PoolEc2Id]


class RIProductDescription(Enum):
    Linux_UNIX = 'Linux/UNIX'
    Linux_UNIX__Amazon_VPC_ = 'Linux/UNIX (Amazon VPC)'
    Windows = 'Windows'
    Windows__Amazon_VPC_ = 'Windows (Amazon VPC)'


class RamdiskId(RootModel[str]):
    root: str


class RebootInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceIds: InstanceIdStringList


class RecurringChargeFrequency(Enum):
    Hourly = 'Hourly'


class RejectVpcPeeringConnectionResult(BaseModel):
    Return: Optional[Boolean] = None


class ReleaseIpamPoolAllocationResult(BaseModel):
    Success: Optional[Boolean] = None


class ReplaceNetworkAclAssociationRequest(BaseModel):
    AssociationId: NetworkAclAssociationId
    DryRun: Optional[Boolean] = None
    NetworkAclId_1: NetworkAclId = Field(..., alias='NetworkAclId')


class ReplaceRootVolumeTaskId(RootModel[str]):
    root: str


class ReplaceRootVolumeTaskIds(RootModel[List[ReplaceRootVolumeTaskId]]):
    root: List[ReplaceRootVolumeTaskId]


class ReplaceRootVolumeTaskState(Enum):
    pending = 'pending'
    in_progress = 'in-progress'
    failing = 'failing'
    succeeded = 'succeeded'
    failed = 'failed'
    failed_detached = 'failed-detached'


class ReplaceVpnTunnelResult(BaseModel):
    Return: Optional[Boolean] = None


class ReplacementStrategy(Enum):
    launch = 'launch'
    launch_before_terminate = 'launch-before-terminate'


class ReportInstanceReasonCodes(Enum):
    instance_stuck_in_state = 'instance-stuck-in-state'
    unresponsive = 'unresponsive'
    not_accepting_credentials = 'not-accepting-credentials'
    password_not_available = 'password-not-available'
    performance_network = 'performance-network'
    performance_instance_store = 'performance-instance-store'
    performance_ebs_volume = 'performance-ebs-volume'
    performance_other = 'performance-other'
    other = 'other'


class ReportStatusType(Enum):
    ok = 'ok'
    impaired = 'impaired'


class RequestFilterPortRange(BaseModel):
    FromPort: Optional[Port] = None
    ToPort: Optional[Port] = None


class RequestHostIdList(RootModel[List[DedicatedHostId]]):
    root: List[DedicatedHostId]


class RequestHostIdSet(RootModel[List[DedicatedHostId]]):
    root: List[DedicatedHostId]


class RequestInstanceTypeList(RootModel[List[InstanceType]]):
    root: List[InstanceType] = Field(..., max_length=100, min_length=0)


class ReservationId(RootModel[str]):
    root: str


class ReservationState(Enum):
    payment_pending = 'payment-pending'
    payment_failed = 'payment-failed'
    active = 'active'
    retired = 'retired'


class ReservedInstanceIdSet(RootModel[List[ReservationId]]):
    root: List[ReservationId]


class ReservedInstanceLimitPrice(BaseModel):
    Amount: Optional[Double] = None
    CurrencyCode: Optional[CurrencyCodeValues] = None


class ReservedInstanceState(Enum):
    payment_pending = 'payment-pending'
    active = 'active'
    payment_failed = 'payment-failed'
    retired = 'retired'
    queued = 'queued'
    queued_deleted = 'queued-deleted'


class ReservedInstancesIdStringList(RootModel[List[ReservationId]]):
    root: List[ReservationId]


class ReservedInstancesListingId(RootModel[str]):
    root: str


class ReservedInstancesModificationId(RootModel[str]):
    root: str


class ReservedInstancesModificationIdStringList(
    RootModel[List[ReservedInstancesModificationId]]
):
    root: List[ReservedInstancesModificationId]


class ReservedInstancesOfferingId(RootModel[str]):
    root: str


class ReservedInstancesOfferingIdStringList(
    RootModel[List[ReservedInstancesOfferingId]]
):
    root: List[ReservedInstancesOfferingId]


class ResetAddressAttributeRequest(BaseModel):
    AllocationId_1: AllocationId = Field(..., alias='AllocationId')
    Attribute: AddressAttributeName
    DryRun: Optional[Boolean] = None


class ResetEbsDefaultKmsKeyIdRequest(BaseModel):
    DryRun: Optional[Boolean] = None


class ResetFpgaImageAttributeName(Enum):
    loadPermission = 'loadPermission'


class ResetFpgaImageAttributeRequest(BaseModel):
    Attribute: Optional[ResetFpgaImageAttributeName] = None
    DryRun: Optional[Boolean] = None
    FpgaImageId_1: FpgaImageId = Field(..., alias='FpgaImageId')


class ResetFpgaImageAttributeResult(BaseModel):
    Return: Optional[Boolean] = None


class ResetImageAttributeName(Enum):
    launchPermission = 'launchPermission'


class ResetImageAttributeRequest(BaseModel):
    Attribute: ResetImageAttributeName
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')


class ResetInstanceAttributeRequest(BaseModel):
    Attribute: InstanceAttributeName
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class ResourceArn(RootModel[constr(min_length=1, max_length=1283)]):
    root: constr(min_length=1, max_length=1283)


class ResourceType(Enum):
    capacity_reservation = 'capacity-reservation'
    client_vpn_endpoint = 'client-vpn-endpoint'
    customer_gateway = 'customer-gateway'
    carrier_gateway = 'carrier-gateway'
    coip_pool = 'coip-pool'
    dedicated_host = 'dedicated-host'
    dhcp_options = 'dhcp-options'
    egress_only_internet_gateway = 'egress-only-internet-gateway'
    elastic_ip = 'elastic-ip'
    elastic_gpu = 'elastic-gpu'
    export_image_task = 'export-image-task'
    export_instance_task = 'export-instance-task'
    fleet = 'fleet'
    fpga_image = 'fpga-image'
    host_reservation = 'host-reservation'
    image = 'image'
    import_image_task = 'import-image-task'
    import_snapshot_task = 'import-snapshot-task'
    instance = 'instance'
    instance_event_window = 'instance-event-window'
    internet_gateway = 'internet-gateway'
    ipam = 'ipam'
    ipam_pool = 'ipam-pool'
    ipam_scope = 'ipam-scope'
    ipv4pool_ec2 = 'ipv4pool-ec2'
    ipv6pool_ec2 = 'ipv6pool-ec2'
    key_pair = 'key-pair'
    launch_template = 'launch-template'
    local_gateway = 'local-gateway'
    local_gateway_route_table = 'local-gateway-route-table'
    local_gateway_virtual_interface = 'local-gateway-virtual-interface'
    local_gateway_virtual_interface_group = 'local-gateway-virtual-interface-group'
    local_gateway_route_table_vpc_association = (
        'local-gateway-route-table-vpc-association'
    )
    local_gateway_route_table_virtual_interface_group_association = (
        'local-gateway-route-table-virtual-interface-group-association'
    )
    natgateway = 'natgateway'
    network_acl = 'network-acl'
    network_interface = 'network-interface'
    network_insights_analysis = 'network-insights-analysis'
    network_insights_path = 'network-insights-path'
    network_insights_access_scope = 'network-insights-access-scope'
    network_insights_access_scope_analysis = 'network-insights-access-scope-analysis'
    placement_group = 'placement-group'
    prefix_list = 'prefix-list'
    replace_root_volume_task = 'replace-root-volume-task'
    reserved_instances = 'reserved-instances'
    route_table = 'route-table'
    security_group = 'security-group'
    security_group_rule = 'security-group-rule'
    snapshot = 'snapshot'
    spot_fleet_request = 'spot-fleet-request'
    spot_instances_request = 'spot-instances-request'
    subnet = 'subnet'
    subnet_cidr_reservation = 'subnet-cidr-reservation'
    traffic_mirror_filter = 'traffic-mirror-filter'
    traffic_mirror_session = 'traffic-mirror-session'
    traffic_mirror_target = 'traffic-mirror-target'
    transit_gateway = 'transit-gateway'
    transit_gateway_attachment = 'transit-gateway-attachment'
    transit_gateway_connect_peer = 'transit-gateway-connect-peer'
    transit_gateway_multicast_domain = 'transit-gateway-multicast-domain'
    transit_gateway_policy_table = 'transit-gateway-policy-table'
    transit_gateway_route_table = 'transit-gateway-route-table'
    transit_gateway_route_table_announcement = (
        'transit-gateway-route-table-announcement'
    )
    volume = 'volume'
    vpc = 'vpc'
    vpc_endpoint = 'vpc-endpoint'
    vpc_endpoint_connection = 'vpc-endpoint-connection'
    vpc_endpoint_service = 'vpc-endpoint-service'
    vpc_endpoint_service_permission = 'vpc-endpoint-service-permission'
    vpc_peering_connection = 'vpc-peering-connection'
    vpn_connection = 'vpn-connection'
    vpn_gateway = 'vpn-gateway'
    vpc_flow_log = 'vpc-flow-log'
    capacity_reservation_fleet = 'capacity-reservation-fleet'
    traffic_mirror_filter_rule = 'traffic-mirror-filter-rule'
    vpc_endpoint_connection_device_type = 'vpc-endpoint-connection-device-type'
    verified_access_instance = 'verified-access-instance'
    verified_access_group = 'verified-access-group'
    verified_access_endpoint = 'verified-access-endpoint'
    verified_access_policy = 'verified-access-policy'
    verified_access_trust_provider = 'verified-access-trust-provider'
    vpn_connection_device_type = 'vpn-connection-device-type'
    vpc_block_public_access_exclusion = 'vpc-block-public-access-exclusion'
    ipam_resource_discovery = 'ipam-resource-discovery'
    ipam_resource_discovery_association = 'ipam-resource-discovery-association'


class RestoreImageFromRecycleBinRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')


class RestoreImageFromRecycleBinResult(BaseModel):
    Return: Optional[Boolean] = None


class RestoreManagedPrefixListVersionRequest(BaseModel):
    CurrentVersion: Long
    DryRun: Optional[Boolean] = None
    PrefixListId: PrefixListResourceId
    PreviousVersion: Long


class RestoreSnapshotTierRequestTemporaryRestoreDays(RootModel[int]):
    root: int


class ResultRange(RootModel[conint(ge=20, le=500)]):
    root: conint(ge=20, le=500)


class RoleId(RootModel[str]):
    root: str


class RootDeviceType(Enum):
    ebs = 'ebs'
    instance_store = 'instance-store'


class RootDeviceTypeList(RootModel[List[RootDeviceType]]):
    root: List[RootDeviceType]


class RouteGatewayId(RootModel[str]):
    root: str


class RouteOrigin(Enum):
    CreateRouteTable = 'CreateRouteTable'
    CreateRoute = 'CreateRoute'
    EnableVgwRoutePropagation = 'EnableVgwRoutePropagation'


class RouteState(Enum):
    active = 'active'
    blackhole = 'blackhole'


class RouteTableAssociationId(RootModel[str]):
    root: str


class RouteTableAssociationStateCode(Enum):
    associating = 'associating'
    associated = 'associated'
    disassociating = 'disassociating'
    disassociated = 'disassociated'
    failed = 'failed'


class RouteTableId(RootModel[str]):
    root: str


class RouteTableIdStringList(RootModel[List[RouteTableId]]):
    root: List[RouteTableId]


class RuleAction(Enum):
    allow = 'allow'
    deny = 'deny'


class RunInstancesMonitoringEnabled(BaseModel):
    Enabled: Boolean


class RunInstancesUserData(RootModel[SecretStr]):
    root: SecretStr


class RunScheduledInstancesResult(BaseModel):
    InstanceIdSet_1: Optional[InstanceIdSet] = Field(None, alias='InstanceIdSet')


class ScheduledInstanceId(RootModel[str]):
    root: str


class ScheduledInstanceIdRequestSet(RootModel[List[ScheduledInstanceId]]):
    root: List[ScheduledInstanceId]


class ScheduledInstancesIpv6Address(BaseModel):
    Ipv6Address_1: Optional[Ipv6Address] = Field(None, alias='Ipv6Address')


class ScheduledInstancesIpv6AddressList(RootModel[List[ScheduledInstancesIpv6Address]]):
    root: List[ScheduledInstancesIpv6Address]


class ScheduledInstancesMonitoring(BaseModel):
    Enabled: Optional[Boolean] = None


class SecurityGroupId(RootModel[str]):
    root: str


class SecurityGroupIdList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class SecurityGroupIdStringList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class SecurityGroupName(RootModel[str]):
    root: str


class SecurityGroupRuleId(RootModel[str]):
    root: str


class SecurityGroupStringList(RootModel[List[SecurityGroupName]]):
    root: List[SecurityGroupName]


class SelfServicePortal(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class SendDiagnosticInterruptRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class SensitiveUserData(RootModel[SecretStr]):
    root: SecretStr


class ServiceConnectivityType(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class ServiceState(Enum):
    Pending = 'Pending'
    Available = 'Available'
    Deleting = 'Deleting'
    Deleted = 'Deleted'
    Failed = 'Failed'


class ServiceType(Enum):
    Interface = 'Interface'
    Gateway = 'Gateway'
    GatewayLoadBalancer = 'GatewayLoadBalancer'


class ServiceTypeDetail(BaseModel):
    ServiceType_1: Optional[ServiceType] = Field(None, alias='ServiceType')


class ServiceTypeDetailSet(RootModel[List[ServiceTypeDetail]]):
    root: List[ServiceTypeDetail]


class ShutdownBehavior(Enum):
    stop = 'stop'
    terminate = 'terminate'


class SlotDateTimeRangeRequest(BaseModel):
    EarliestTime: DateTime
    LatestTime: DateTime


class SlotStartTimeRangeRequest(BaseModel):
    EarliestTime: Optional[DateTime] = None
    LatestTime: Optional[DateTime] = None


class SnapshotAttributeName(Enum):
    productCodes = 'productCodes'
    createVolumePermission = 'createVolumePermission'


class SnapshotId(RootModel[str]):
    root: str


class SnapshotIdStringList(RootModel[List[SnapshotId]]):
    root: List[SnapshotId]


class SnapshotState(Enum):
    pending = 'pending'
    completed = 'completed'
    error = 'error'
    recoverable = 'recoverable'
    recovering = 'recovering'


class SpotAllocationStrategy(Enum):
    lowest_price = 'lowest-price'
    diversified = 'diversified'
    capacity_optimized = 'capacity-optimized'
    capacity_optimized_prioritized = 'capacity-optimized-prioritized'
    price_capacity_optimized = 'price-capacity-optimized'


class SpotCapacityRebalance(BaseModel):
    ReplacementStrategy_1: Optional[ReplacementStrategy] = Field(
        None, alias='ReplacementStrategy'
    )
    TerminationDelay: Optional[Integer] = None


class SpotFleetMonitoring(BaseModel):
    Enabled: Optional[Boolean] = None


class SpotFleetRequestId(RootModel[str]):
    root: str


class SpotFleetRequestIdList(RootModel[List[SpotFleetRequestId]]):
    root: List[SpotFleetRequestId]


class SpotInstanceInterruptionBehavior(Enum):
    hibernate = 'hibernate'
    stop = 'stop'
    terminate = 'terminate'


class SpotInstanceRequestId(RootModel[str]):
    root: str


class SpotInstanceRequestIdList(RootModel[List[SpotInstanceRequestId]]):
    root: List[SpotInstanceRequestId]


class SpotInstanceState(Enum):
    open = 'open'
    active = 'active'
    closed = 'closed'
    cancelled = 'cancelled'
    failed = 'failed'


class SpotInstanceType(Enum):
    one_time = 'one-time'
    persistent = 'persistent'


class SpotMaintenanceStrategies(BaseModel):
    CapacityRebalance: Optional[SpotCapacityRebalance] = None


class SpotPlacementScoresMaxResults(RootModel[conint(ge=10, le=1000)]):
    root: conint(ge=10, le=1000)


class SpotPlacementScoresTargetCapacity(RootModel[conint(ge=1, le=2000000000)]):
    root: conint(ge=1, le=2000000000)


class SpreadLevel(Enum):
    host = 'host'
    rack = 'rack'


class StartVpcEndpointServicePrivateDnsVerificationResult(BaseModel):
    ReturnValue: Optional[Boolean] = None


class State(Enum):
    PendingAcceptance = 'PendingAcceptance'
    Pending = 'Pending'
    Available = 'Available'
    Deleting = 'Deleting'
    Deleted = 'Deleted'
    Rejected = 'Rejected'
    Failed = 'Failed'
    Expired = 'Expired'


class StaticSourcesSupportValue(Enum):
    enable = 'enable'
    disable = 'disable'


class StatisticType(Enum):
    p50 = 'p50'


class Status(Enum):
    MoveInProgress = 'MoveInProgress'
    InVpc = 'InVpc'
    InClassic = 'InClassic'


class StatusName(Enum):
    reachability = 'reachability'


class StatusType(Enum):
    passed = 'passed'
    failed = 'failed'
    insufficient_data = 'insufficient-data'
    initializing = 'initializing'


class StopInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Force: Optional[Boolean] = None
    Hibernate: Optional[Boolean] = None
    InstanceIds: InstanceIdStringList


class StorageTier(Enum):
    archive = 'archive'
    standard = 'standard'


class String(RootModel[str]):
    root: str


class StringList(RootModel[List[String]]):
    root: List[String]


class StringType(RootModel[constr(min_length=0, max_length=64000)]):
    root: constr(min_length=0, max_length=64000)


class SubnetCidrAssociationId(RootModel[str]):
    root: str


class SubnetCidrBlockStateCode(Enum):
    associating = 'associating'
    associated = 'associated'
    disassociating = 'disassociating'
    disassociated = 'disassociated'
    failing = 'failing'
    failed = 'failed'


class SubnetCidrReservationId(RootModel[str]):
    root: str


class SubnetCidrReservationType(Enum):
    prefix = 'prefix'
    explicit = 'explicit'


class SubnetId(RootModel[str]):
    root: str


class SubnetIdStringList(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class SubnetState(Enum):
    pending = 'pending'
    available = 'available'


class Subscription(BaseModel):
    Destination: Optional[String] = None
    Metric: Optional[MetricType] = None
    Period: Optional[PeriodType] = None
    Source: Optional[String] = None
    Statistic: Optional[StatisticType] = None


class SubscriptionList(RootModel[List[Subscription]]):
    root: List[Subscription]


class SuccessfulInstanceCreditSpecificationItem(BaseModel):
    InstanceId: Optional[String] = None


class SuccessfulInstanceCreditSpecificationSet(
    RootModel[List[SuccessfulInstanceCreditSpecificationItem]]
):
    root: List[SuccessfulInstanceCreditSpecificationItem]


class SuccessfulQueuedPurchaseDeletion(BaseModel):
    ReservedInstancesId: Optional[String] = None


class SuccessfulQueuedPurchaseDeletionSet(
    RootModel[List[SuccessfulQueuedPurchaseDeletion]]
):
    root: List[SuccessfulQueuedPurchaseDeletion]


class SummaryStatus(Enum):
    ok = 'ok'
    impaired = 'impaired'
    insufficient_data = 'insufficient-data'
    not_applicable = 'not-applicable'
    initializing = 'initializing'


class SupportedIpAddressTypes(RootModel[List[ServiceConnectivityType]]):
    root: List[ServiceConnectivityType] = Field(..., max_length=2, min_length=0)


class Tag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class TagDescription(BaseModel):
    Key: Optional[String] = None
    ResourceId: Optional[String] = None
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    Value: Optional[String] = None


class TagDescriptionList(RootModel[List[TagDescription]]):
    root: List[TagDescription]


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagSpecification(BaseModel):
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    Tags: Optional[TagList] = None


class TagSpecificationList(RootModel[List[TagSpecification]]):
    root: List[TagSpecification]


class TaggableResourceId(RootModel[str]):
    root: str


class TargetCapacityUnitType(Enum):
    vcpu = 'vcpu'
    memory_mib = 'memory-mib'
    units = 'units'


class TargetConfiguration(BaseModel):
    InstanceCount: Optional[Integer] = None
    OfferingId: Optional[String] = None


class TargetConfigurationRequest(BaseModel):
    InstanceCount: Optional[Integer] = None
    OfferingId: ReservedInstancesOfferingId


class TargetConfigurationRequestSet(RootModel[List[TargetConfigurationRequest]]):
    root: List[TargetConfigurationRequest]


class TargetGroup(BaseModel):
    Arn: Optional[String] = None


class TargetGroups(RootModel[List[TargetGroup]]):
    root: List[TargetGroup] = Field(..., max_length=5, min_length=1)


class TargetGroupsConfig(BaseModel):
    TargetGroups_1: Optional[TargetGroups] = Field(None, alias='TargetGroups')


class TargetStorageTier(Enum):
    archive = 'archive'


class TelemetryStatus(Enum):
    UP = 'UP'
    DOWN = 'DOWN'


class Tenancy(Enum):
    default = 'default'
    dedicated = 'dedicated'
    host = 'host'


class TerminateInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceIds: InstanceIdStringList


class ThreadsPerCore(RootModel[int]):
    root: int


class ThreadsPerCoreList(RootModel[List[ThreadsPerCore]]):
    root: List[ThreadsPerCore]


class TieringOperationStatus(Enum):
    archival_in_progress = 'archival-in-progress'
    archival_completed = 'archival-completed'
    archival_failed = 'archival-failed'
    temporary_restore_in_progress = 'temporary-restore-in-progress'
    temporary_restore_completed = 'temporary-restore-completed'
    temporary_restore_failed = 'temporary-restore-failed'
    permanent_restore_in_progress = 'permanent-restore-in-progress'
    permanent_restore_completed = 'permanent-restore-completed'
    permanent_restore_failed = 'permanent-restore-failed'


class TotalLocalStorageGB(BaseModel):
    Max: Optional[Double] = None
    Min: Optional[Double] = None


class TotalLocalStorageGBRequest(BaseModel):
    Max: Optional[Double] = None
    Min: Optional[Double] = None


class TpmSupportValues(Enum):
    v2_0 = 'v2.0'


class TrafficDirection(Enum):
    ingress = 'ingress'
    egress = 'egress'


class TrafficMirrorFilterId(RootModel[str]):
    root: str


class TrafficMirrorFilterIdList(RootModel[List[TrafficMirrorFilterId]]):
    root: List[TrafficMirrorFilterId]


class TrafficMirrorFilterRuleField(Enum):
    destination_port_range = 'destination-port-range'
    source_port_range = 'source-port-range'
    protocol = 'protocol'
    description = 'description'


class TrafficMirrorFilterRuleFieldList(RootModel[List[TrafficMirrorFilterRuleField]]):
    root: List[TrafficMirrorFilterRuleField]


class TrafficMirrorFilterRuleIdWithResolver(RootModel[str]):
    root: str


class TrafficMirrorNetworkService(Enum):
    amazon_dns = 'amazon-dns'


class TrafficMirrorNetworkServiceList(RootModel[List[TrafficMirrorNetworkService]]):
    root: List[TrafficMirrorNetworkService]


class TrafficMirrorPortRange(BaseModel):
    FromPort: Optional[Integer] = None
    ToPort: Optional[Integer] = None


class TrafficMirrorPortRangeRequest(BaseModel):
    FromPort: Optional[Integer] = None
    ToPort: Optional[Integer] = None


class TrafficMirrorRuleAction(Enum):
    accept = 'accept'
    reject = 'reject'


class TrafficMirrorSession(BaseModel):
    Description: Optional[String] = None
    NetworkInterfaceId: Optional[String] = None
    OwnerId: Optional[String] = None
    PacketLength: Optional[Integer] = None
    SessionNumber: Optional[Integer] = None
    Tags: Optional[TagList] = None
    TrafficMirrorFilterId: Optional[String] = None
    TrafficMirrorSessionId: Optional[String] = None
    TrafficMirrorTargetId: Optional[String] = None
    VirtualNetworkId: Optional[Integer] = None


class TrafficMirrorSessionField(Enum):
    packet_length = 'packet-length'
    description = 'description'
    virtual_network_id = 'virtual-network-id'


class TrafficMirrorSessionFieldList(RootModel[List[TrafficMirrorSessionField]]):
    root: List[TrafficMirrorSessionField]


class TrafficMirrorSessionId(RootModel[str]):
    root: str


class TrafficMirrorSessionIdList(RootModel[List[TrafficMirrorSessionId]]):
    root: List[TrafficMirrorSessionId]


class TrafficMirrorSessionSet(RootModel[List[TrafficMirrorSession]]):
    root: List[TrafficMirrorSession]


class TrafficMirrorTargetId(RootModel[str]):
    root: str


class TrafficMirrorTargetIdList(RootModel[List[TrafficMirrorTargetId]]):
    root: List[TrafficMirrorTargetId]


class TrafficMirrorTargetType(Enum):
    network_interface = 'network-interface'
    network_load_balancer = 'network-load-balancer'
    gateway_load_balancer_endpoint = 'gateway-load-balancer-endpoint'


class TrafficMirroringMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class TrafficType(Enum):
    ACCEPT = 'ACCEPT'
    REJECT = 'REJECT'
    ALL = 'ALL'


class TransitAssociationGatewayId(RootModel[str]):
    root: str


class TransitGatewayAssociationState(Enum):
    associating = 'associating'
    associated = 'associated'
    disassociating = 'disassociating'
    disassociated = 'disassociated'


class TransitGatewayAttachmentAssociation(BaseModel):
    State: Optional[TransitGatewayAssociationState] = None
    TransitGatewayRouteTableId: Optional[String] = None


class TransitGatewayAttachmentBgpConfiguration(BaseModel):
    BgpStatus_1: Optional[BgpStatus] = Field(None, alias='BgpStatus')
    PeerAddress: Optional[String] = None
    PeerAsn: Optional[Long] = None
    TransitGatewayAddress: Optional[String] = None
    TransitGatewayAsn: Optional[Long] = None


class TransitGatewayAttachmentBgpConfigurationList(
    RootModel[List[TransitGatewayAttachmentBgpConfiguration]]
):
    root: List[TransitGatewayAttachmentBgpConfiguration]


class TransitGatewayAttachmentId(RootModel[str]):
    root: str


class TransitGatewayAttachmentIdStringList(RootModel[List[TransitGatewayAttachmentId]]):
    root: List[TransitGatewayAttachmentId]


class TransitGatewayAttachmentResourceType(Enum):
    vpc = 'vpc'
    vpn = 'vpn'
    direct_connect_gateway = 'direct-connect-gateway'
    connect = 'connect'
    peering = 'peering'
    tgw_peering = 'tgw-peering'


class TransitGatewayAttachmentState(Enum):
    initiating = 'initiating'
    initiatingRequest = 'initiatingRequest'
    pendingAcceptance = 'pendingAcceptance'
    rollingBack = 'rollingBack'
    pending = 'pending'
    available = 'available'
    modifying = 'modifying'
    deleting = 'deleting'
    deleted = 'deleted'
    failed = 'failed'
    rejected = 'rejected'
    rejecting = 'rejecting'
    failing = 'failing'


class TransitGatewayCidrBlockStringList(RootModel[List[String]]):
    root: List[String]


class TransitGatewayConnectOptions(BaseModel):
    Protocol: Optional[ProtocolValue] = None


class TransitGatewayConnectPeerId(RootModel[str]):
    root: str


class TransitGatewayConnectPeerIdStringList(
    RootModel[List[TransitGatewayConnectPeerId]]
):
    root: List[TransitGatewayConnectPeerId]


class TransitGatewayConnectPeerState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class TransitGatewayConnectRequestBgpOptions(BaseModel):
    PeerAsn: Optional[Long] = None


class TransitGatewayId(RootModel[str]):
    root: str


class TransitGatewayIdStringList(RootModel[List[TransitGatewayId]]):
    root: List[TransitGatewayId]


class TransitGatewayMaxResults(RootModel[conint(ge=5, le=1000)]):
    root: conint(ge=5, le=1000)


class TransitGatewayMulitcastDomainAssociationState(Enum):
    pendingAcceptance = 'pendingAcceptance'
    associating = 'associating'
    associated = 'associated'
    disassociating = 'disassociating'
    disassociated = 'disassociated'
    rejected = 'rejected'
    failed = 'failed'


class TransitGatewayMulticastDomainId(RootModel[str]):
    root: str


class TransitGatewayMulticastDomainIdStringList(
    RootModel[List[TransitGatewayMulticastDomainId]]
):
    root: List[TransitGatewayMulticastDomainId]


class TransitGatewayMulticastDomainOptions(BaseModel):
    AutoAcceptSharedAssociations: Optional[AutoAcceptSharedAssociationsValue] = None
    Igmpv2Support: Optional[Igmpv2SupportValue] = None
    StaticSourcesSupport: Optional[StaticSourcesSupportValue] = None


class TransitGatewayMulticastDomainState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class TransitGatewayMulticastGroup(BaseModel):
    GroupIpAddress: Optional[String] = None
    GroupMember: Optional[Boolean] = None
    GroupSource: Optional[Boolean] = None
    MemberType: Optional[MembershipType] = None
    NetworkInterfaceId: Optional[String] = None
    ResourceId: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    SourceType: Optional[MembershipType] = None
    SubnetId: Optional[String] = None
    TransitGatewayAttachmentId: Optional[String] = None


class TransitGatewayMulticastGroupList(RootModel[List[TransitGatewayMulticastGroup]]):
    root: List[TransitGatewayMulticastGroup]


class TransitGatewayNetworkInterfaceIdList(RootModel[List[NetworkInterfaceId]]):
    root: List[NetworkInterfaceId]


class TransitGatewayPeeringAttachmentOptions(BaseModel):
    DynamicRouting: Optional[DynamicRoutingValue] = None


class TransitGatewayPolicyRuleMetaData(BaseModel):
    MetaDataKey: Optional[String] = None
    MetaDataValue: Optional[String] = None


class TransitGatewayPolicyTableId(RootModel[str]):
    root: str


class TransitGatewayPolicyTableIdStringList(
    RootModel[List[TransitGatewayPolicyTableId]]
):
    root: List[TransitGatewayPolicyTableId]


class TransitGatewayPolicyTableState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class TransitGatewayPrefixListAttachment(BaseModel):
    ResourceId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )


class TransitGatewayPrefixListReferenceState(Enum):
    pending = 'pending'
    available = 'available'
    modifying = 'modifying'
    deleting = 'deleting'


class TransitGatewayPropagationState(Enum):
    enabling = 'enabling'
    enabled = 'enabled'
    disabling = 'disabling'
    disabled = 'disabled'


class TransitGatewayRouteAttachment(BaseModel):
    ResourceId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    TransitGatewayAttachmentId: Optional[String] = None


class TransitGatewayRouteAttachmentList(RootModel[List[TransitGatewayRouteAttachment]]):
    root: List[TransitGatewayRouteAttachment]


class TransitGatewayRouteState(Enum):
    pending = 'pending'
    active = 'active'
    blackhole = 'blackhole'
    deleting = 'deleting'
    deleted = 'deleted'


class TransitGatewayRouteTableAnnouncementDirection(Enum):
    outgoing = 'outgoing'
    incoming = 'incoming'


class TransitGatewayRouteTableAnnouncementId(RootModel[str]):
    root: str


class TransitGatewayRouteTableAnnouncementIdStringList(
    RootModel[List[TransitGatewayRouteTableAnnouncementId]]
):
    root: List[TransitGatewayRouteTableAnnouncementId]


class TransitGatewayRouteTableAnnouncementState(Enum):
    available = 'available'
    pending = 'pending'
    failing = 'failing'
    failed = 'failed'
    deleting = 'deleting'
    deleted = 'deleted'


class TransitGatewayRouteTableAssociation(BaseModel):
    ResourceId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    State: Optional[TransitGatewayAssociationState] = None
    TransitGatewayAttachmentId: Optional[String] = None


class TransitGatewayRouteTableAssociationList(
    RootModel[List[TransitGatewayRouteTableAssociation]]
):
    root: List[TransitGatewayRouteTableAssociation]


class TransitGatewayRouteTableId(RootModel[str]):
    root: str


class TransitGatewayRouteTableIdStringList(RootModel[List[TransitGatewayRouteTableId]]):
    root: List[TransitGatewayRouteTableId]


class TransitGatewayRouteTablePropagation(BaseModel):
    ResourceId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    State: Optional[TransitGatewayPropagationState] = None
    TransitGatewayAttachmentId: Optional[String] = None
    TransitGatewayRouteTableAnnouncementId_1: Optional[
        TransitGatewayRouteTableAnnouncementId
    ] = Field(None, alias='TransitGatewayRouteTableAnnouncementId')


class TransitGatewayRouteTablePropagationList(
    RootModel[List[TransitGatewayRouteTablePropagation]]
):
    root: List[TransitGatewayRouteTablePropagation]


class TransitGatewayRouteTableRoute(BaseModel):
    AttachmentId: Optional[String] = None
    DestinationCidr: Optional[String] = None
    PrefixListId: Optional[String] = None
    ResourceId: Optional[String] = None
    ResourceType: Optional[String] = None
    RouteOrigin: Optional[String] = None
    State: Optional[String] = None


class TransitGatewayRouteTableState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class TransitGatewayRouteType(Enum):
    static = 'static'
    propagated = 'propagated'


class TransitGatewayState(Enum):
    pending = 'pending'
    available = 'available'
    modifying = 'modifying'
    deleting = 'deleting'
    deleted = 'deleted'


class TransitGatewaySubnetIdList(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class TransitGatewayVpcAttachmentOptions(BaseModel):
    ApplianceModeSupport: Optional[ApplianceModeSupportValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    Ipv6Support: Optional[Ipv6SupportValue] = None


class TransportProtocol(Enum):
    tcp = 'tcp'
    udp = 'udp'


class TrunkInterfaceAssociationId(RootModel[str]):
    root: str


class TrunkInterfaceAssociationIdList(RootModel[List[TrunkInterfaceAssociationId]]):
    root: List[TrunkInterfaceAssociationId]


class TrustProviderType(Enum):
    user = 'user'
    device = 'device'


class TunnelInsideIpVersion(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class UnlimitedSupportedInstanceFamily(Enum):
    t2 = 't2'
    t3 = 't3'
    t3a = 't3a'
    t4g = 't4g'


class UnmonitorInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceIds: InstanceIdStringList


class UnsuccessfulInstanceCreditSpecificationErrorCode(Enum):
    InvalidInstanceID_Malformed = 'InvalidInstanceID.Malformed'
    InvalidInstanceID_NotFound = 'InvalidInstanceID.NotFound'
    IncorrectInstanceState = 'IncorrectInstanceState'
    InstanceCreditSpecification_NotSupported = (
        'InstanceCreditSpecification.NotSupported'
    )


class UnsuccessfulInstanceCreditSpecificationItemError(BaseModel):
    Code: Optional[UnsuccessfulInstanceCreditSpecificationErrorCode] = None
    Message: Optional[String] = None


class UnsuccessfulItemError(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class UpdateSecurityGroupRuleDescriptionsEgressResult(BaseModel):
    Return: Optional[Boolean] = None


class UpdateSecurityGroupRuleDescriptionsIngressResult(BaseModel):
    Return: Optional[Boolean] = None


class UsageClassType(Enum):
    spot = 'spot'
    on_demand = 'on-demand'


class UsageClassTypeList(RootModel[List[UsageClassType]]):
    root: List[UsageClassType]


class UserBucket(BaseModel):
    S3Bucket: Optional[String] = None
    S3Key: Optional[String] = None


class UserBucketDetails(BaseModel):
    S3Bucket: Optional[String] = None
    S3Key: Optional[String] = None


class UserData(BaseModel):
    Data: Optional[String] = None


class UserGroupStringList(RootModel[List[String]]):
    root: List[String]


class UserIdGroupPair(BaseModel):
    Description: Optional[String] = None
    GroupId: Optional[String] = None
    GroupName: Optional[String] = None
    PeeringStatus: Optional[String] = None
    UserId: Optional[String] = None
    VpcId: Optional[String] = None
    VpcPeeringConnectionId: Optional[String] = None


class UserIdGroupPairList(RootModel[List[UserIdGroupPair]]):
    root: List[UserIdGroupPair]


class UserIdGroupPairSet(RootModel[List[UserIdGroupPair]]):
    root: List[UserIdGroupPair]


class UserIdStringList(RootModel[List[String]]):
    root: List[String]


class UserTrustProviderType(Enum):
    iam_identity_center = 'iam-identity-center'
    oidc = 'oidc'


class VCpuCount(RootModel[int]):
    root: int


class VCpuCountRange(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class VCpuCountRangeRequest(BaseModel):
    Max: Optional[Integer] = None
    Min: Integer


class VCpuInfo(BaseModel):
    DefaultCores: Optional[CoreCount] = None
    DefaultThreadsPerCore: Optional[ThreadsPerCore] = None
    DefaultVCpus: Optional[VCpuCount] = None
    ValidCores: Optional[CoreCountList] = None
    ValidThreadsPerCore: Optional[ThreadsPerCoreList] = None


class ValidationError(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class ValueStringList(RootModel[List[String]]):
    root: List[String]


class VerifiedAccessEndpointAttachmentType(Enum):
    vpc = 'vpc'


class VerifiedAccessEndpointId(RootModel[str]):
    root: str


class VerifiedAccessEndpointIdList(RootModel[List[VerifiedAccessEndpointId]]):
    root: List[VerifiedAccessEndpointId]


class VerifiedAccessEndpointPortNumber(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class VerifiedAccessEndpointProtocol(Enum):
    http = 'http'
    https = 'https'


class VerifiedAccessEndpointStatusCode(Enum):
    pending = 'pending'
    active = 'active'
    updating = 'updating'
    deleting = 'deleting'
    deleted = 'deleted'


class VerifiedAccessEndpointSubnetIdList(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class VerifiedAccessEndpointType(Enum):
    load_balancer = 'load-balancer'
    network_interface = 'network-interface'


class VerifiedAccessGroup(BaseModel):
    CreationTime: Optional[String] = None
    DeletionTime: Optional[String] = None
    Description: Optional[String] = None
    LastUpdatedTime: Optional[String] = None
    Owner: Optional[String] = None
    Tags: Optional[TagList] = None
    VerifiedAccessGroupArn: Optional[String] = None
    VerifiedAccessGroupId: Optional[String] = None
    VerifiedAccessInstanceId: Optional[String] = None


class VerifiedAccessGroupId(RootModel[str]):
    root: str


class VerifiedAccessGroupIdList(RootModel[List[VerifiedAccessGroupId]]):
    root: List[VerifiedAccessGroupId]


class VerifiedAccessGroupList(RootModel[List[VerifiedAccessGroup]]):
    root: List[VerifiedAccessGroup]


class VerifiedAccessInstanceId(RootModel[str]):
    root: str


class VerifiedAccessInstanceIdList(RootModel[List[VerifiedAccessInstanceId]]):
    root: List[VerifiedAccessInstanceId]


class VerifiedAccessLogCloudWatchLogsDestinationOptions(BaseModel):
    Enabled: Boolean
    LogGroup: Optional[String] = None


class VerifiedAccessLogDeliveryStatusCode(Enum):
    success = 'success'
    failed = 'failed'


class VerifiedAccessLogKinesisDataFirehoseDestinationOptions(BaseModel):
    DeliveryStream: Optional[String] = None
    Enabled: Boolean


class VerifiedAccessLogS3DestinationOptions(BaseModel):
    BucketName: Optional[String] = None
    BucketOwner: Optional[String] = None
    Enabled: Boolean
    Prefix: Optional[String] = None


class VerifiedAccessTrustProviderCondensed(BaseModel):
    Description: Optional[String] = None
    DeviceTrustProviderType_1: Optional[DeviceTrustProviderType] = Field(
        None, alias='DeviceTrustProviderType'
    )
    TrustProviderType_1: Optional[TrustProviderType] = Field(
        None, alias='TrustProviderType'
    )
    UserTrustProviderType_1: Optional[UserTrustProviderType] = Field(
        None, alias='UserTrustProviderType'
    )
    VerifiedAccessTrustProviderId: Optional[String] = None


class VerifiedAccessTrustProviderCondensedList(
    RootModel[List[VerifiedAccessTrustProviderCondensed]]
):
    root: List[VerifiedAccessTrustProviderCondensed]


class VerifiedAccessTrustProviderId(RootModel[str]):
    root: str


class VerifiedAccessTrustProviderIdList(RootModel[List[VerifiedAccessTrustProviderId]]):
    root: List[VerifiedAccessTrustProviderId]


class VersionDescription(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class VersionStringList(RootModel[List[String]]):
    root: List[String]


class VgwTelemetry(BaseModel):
    AcceptedRouteCount: Optional[Integer] = None
    CertificateArn: Optional[String] = None
    LastStatusChange: Optional[DateTime] = None
    OutsideIpAddress: Optional[String] = None
    Status: Optional[TelemetryStatus] = None
    StatusMessage: Optional[String] = None


class VgwTelemetryList(RootModel[List[VgwTelemetry]]):
    root: List[VgwTelemetry]


class VirtualizationType(Enum):
    hvm = 'hvm'
    paravirtual = 'paravirtual'


class VirtualizationTypeList(RootModel[List[VirtualizationType]]):
    root: List[VirtualizationType]


class VirtualizationTypeSet(RootModel[List[VirtualizationType]]):
    root: List[VirtualizationType] = Field(..., max_length=2, min_length=0)


class VolumeAttachmentState(Enum):
    attaching = 'attaching'
    attached = 'attached'
    detaching = 'detaching'
    detached = 'detached'
    busy = 'busy'


class VolumeAttributeName(Enum):
    autoEnableIO = 'autoEnableIO'
    productCodes = 'productCodes'


class VolumeDetail(BaseModel):
    Size: Long


class VolumeId(RootModel[str]):
    root: str


class VolumeIdStringList(RootModel[List[VolumeId]]):
    root: List[VolumeId]


class VolumeIdWithResolver(RootModel[str]):
    root: str


class VolumeModificationState(Enum):
    modifying = 'modifying'
    optimizing = 'optimizing'
    completed = 'completed'
    failed = 'failed'


class VolumeState(Enum):
    creating = 'creating'
    available = 'available'
    in_use = 'in-use'
    deleting = 'deleting'
    deleted = 'deleted'
    error = 'error'


class VolumeStatusAction(BaseModel):
    Code: Optional[String] = None
    Description: Optional[String] = None
    EventId: Optional[String] = None
    EventType: Optional[String] = None


class VolumeStatusActionsList(RootModel[List[VolumeStatusAction]]):
    root: List[VolumeStatusAction]


class VolumeStatusAttachmentStatus(BaseModel):
    InstanceId: Optional[String] = None
    IoPerformance: Optional[String] = None


class VolumeStatusAttachmentStatusList(RootModel[List[VolumeStatusAttachmentStatus]]):
    root: List[VolumeStatusAttachmentStatus]


class VolumeStatusEvent(BaseModel):
    Description: Optional[String] = None
    EventId: Optional[String] = None
    EventType: Optional[String] = None
    InstanceId: Optional[String] = None
    NotAfter: Optional[MillisecondDateTime] = None
    NotBefore: Optional[MillisecondDateTime] = None


class VolumeStatusEventsList(RootModel[List[VolumeStatusEvent]]):
    root: List[VolumeStatusEvent]


class VolumeStatusInfoStatus(Enum):
    ok = 'ok'
    impaired = 'impaired'
    insufficient_data = 'insufficient-data'


class VolumeStatusName(Enum):
    io_enabled = 'io-enabled'
    io_performance = 'io-performance'


class VolumeType(Enum):
    standard = 'standard'
    io1 = 'io1'
    io2 = 'io2'
    gp2 = 'gp2'
    sc1 = 'sc1'
    st1 = 'st1'
    gp3 = 'gp3'


class VpcAttachment(BaseModel):
    State: Optional[AttachmentStatus] = None
    VpcId: Optional[String] = None


class VpcAttachmentList(RootModel[List[VpcAttachment]]):
    root: List[VpcAttachment]


class VpcAttributeName(Enum):
    enableDnsSupport = 'enableDnsSupport'
    enableDnsHostnames = 'enableDnsHostnames'
    enableNetworkAddressUsageMetrics = 'enableNetworkAddressUsageMetrics'


class VpcCidrAssociationId(RootModel[str]):
    root: str


class VpcCidrBlockStateCode(Enum):
    associating = 'associating'
    associated = 'associated'
    disassociating = 'disassociating'
    disassociated = 'disassociated'
    failing = 'failing'
    failed = 'failed'


class VpcClassicLink(BaseModel):
    ClassicLinkEnabled: Optional[Boolean] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class VpcClassicLinkList(RootModel[List[VpcClassicLink]]):
    root: List[VpcClassicLink]


class VpcEndpointId(RootModel[str]):
    root: str


class VpcEndpointIdList(RootModel[List[VpcEndpointId]]):
    root: List[VpcEndpointId]


class VpcEndpointRouteTableIdList(RootModel[List[RouteTableId]]):
    root: List[RouteTableId]


class VpcEndpointSecurityGroupIdList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class VpcEndpointServiceId(RootModel[str]):
    root: str


class VpcEndpointServiceIdList(RootModel[List[VpcEndpointServiceId]]):
    root: List[VpcEndpointServiceId]


class VpcEndpointSubnetIdList(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class VpcEndpointType(Enum):
    Interface = 'Interface'
    Gateway = 'Gateway'
    GatewayLoadBalancer = 'GatewayLoadBalancer'


class VpcFlowLogId(RootModel[str]):
    root: str


class VpcId(RootModel[str]):
    root: str


class VpcIdStringList(RootModel[List[VpcId]]):
    root: List[VpcId]


class VpcPeeringConnectionId(RootModel[str]):
    root: str


class VpcPeeringConnectionIdList(RootModel[List[VpcPeeringConnectionId]]):
    root: List[VpcPeeringConnectionId]


class VpcPeeringConnectionIdWithResolver(RootModel[str]):
    root: str


class VpcPeeringConnectionOptionsDescription(BaseModel):
    AllowDnsResolutionFromRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalClassicLinkToRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalVpcToRemoteClassicLink: Optional[Boolean] = None


class VpcPeeringConnectionStateReasonCode(Enum):
    initiating_request = 'initiating-request'
    pending_acceptance = 'pending-acceptance'
    active = 'active'
    deleted = 'deleted'
    rejected = 'rejected'
    failed = 'failed'
    expired = 'expired'
    provisioning = 'provisioning'
    deleting = 'deleting'


class VpcState(Enum):
    pending = 'pending'
    available = 'available'


class VpcTenancy(Enum):
    default = 'default'


class VpnConnectionDeviceSampleConfiguration(RootModel[SecretStr]):
    root: SecretStr


class VpnConnectionDeviceType(BaseModel):
    Platform: Optional[String] = None
    Software: Optional[String] = None
    Vendor: Optional[String] = None
    VpnConnectionDeviceTypeId: Optional[String] = None


class VpnConnectionDeviceTypeId(RootModel[str]):
    root: str


class VpnConnectionDeviceTypeList(RootModel[List[VpnConnectionDeviceType]]):
    root: List[VpnConnectionDeviceType]


class VpnConnectionId(RootModel[str]):
    root: str


class VpnConnectionIdStringList(RootModel[List[VpnConnectionId]]):
    root: List[VpnConnectionId]


class VpnEcmpSupportValue(Enum):
    enable = 'enable'
    disable = 'disable'


class VpnGatewayId(RootModel[str]):
    root: str


class VpnGatewayIdStringList(RootModel[List[VpnGatewayId]]):
    root: List[VpnGatewayId]


class VpnProtocol(Enum):
    openvpn = 'openvpn'


class VpnState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class VpnStaticRouteSource(Enum):
    Static = 'Static'


class WeekDay(Enum):
    sunday = 'sunday'
    monday = 'monday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'
    thursday = 'thursday'
    friday = 'friday'
    saturday = 'saturday'


class WithdrawByoipCidrRequest(BaseModel):
    Cidr: String
    DryRun: Optional[Boolean] = None


class ZoneIdStringList(RootModel[List[String]]):
    root: List[String]


class ZoneNameStringList(RootModel[List[String]]):
    root: List[String]


class Scope(Enum):
    Availability_Zone = 'Availability Zone'
    Region = 'Region'


class TotalFpgaMemory(RootModel[int]):
    root: int


class TotalGpuMemory(RootModel[int]):
    root: int


class Action(Enum):
    AcceptAddressTransfer = 'AcceptAddressTransfer'


class Version(Enum):
    field_2016_11_15 = '2016-11-15'


class TagSpecification1(RootModel[List[TagSpecification]]):
    root: List[TagSpecification]


class Action4(Enum):
    AcceptReservedInstancesExchangeQuote = 'AcceptReservedInstancesExchangeQuote'


class ReservedInstanceId(RootModel[List[ReservationId]]):
    root: List[ReservationId]


class TargetConfiguration1(RootModel[List[TargetConfigurationRequest]]):
    root: List[TargetConfigurationRequest]


class Action8(Enum):
    AcceptTransitGatewayMulticastDomainAssociations = (
        'AcceptTransitGatewayMulticastDomainAssociations'
    )


class SubnetIds(RootModel[List[String]]):
    root: List[String]


class Action12(Enum):
    AcceptTransitGatewayPeeringAttachment = 'AcceptTransitGatewayPeeringAttachment'


class Action16(Enum):
    AcceptTransitGatewayVpcAttachment = 'AcceptTransitGatewayVpcAttachment'


class Action20(Enum):
    AcceptVpcEndpointConnections = 'AcceptVpcEndpointConnections'


class VpcEndpointId1(RootModel[List[VpcEndpointId]]):
    root: List[VpcEndpointId]


class Action24(Enum):
    AcceptVpcPeeringConnection = 'AcceptVpcPeeringConnection'


class Action28(Enum):
    AdvertiseByoipCidr = 'AdvertiseByoipCidr'


class Domain(Enum):
    vpc = 'vpc'
    standard = 'standard'


class Action32(Enum):
    AllocateAddress = 'AllocateAddress'


class Action36(Enum):
    AllocateHosts = 'AllocateHosts'


class Action40(Enum):
    AllocateIpamPoolCidr = 'AllocateIpamPoolCidr'


class DisallowedCidr(RootModel[List[String]]):
    root: List[String]


class Action44(Enum):
    ApplySecurityGroupsToClientVpnTargetNetwork = (
        'ApplySecurityGroupsToClientVpnTargetNetwork'
    )


class SecurityGroupId1(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class Action48(Enum):
    AssignIpv6Addresses = 'AssignIpv6Addresses'


class Ipv6Addresses(RootModel[List[String]]):
    root: List[String]


class Ipv6Prefix(RootModel[List[String]]):
    root: List[String]


class Action52(Enum):
    AssignPrivateIpAddresses = 'AssignPrivateIpAddresses'


class PrivateIpAddress(RootModel[List[String]]):
    root: List[String]


class Ipv4Prefix(RootModel[List[String]]):
    root: List[String]


class Action56(Enum):
    AssignPrivateNatGatewayAddress = 'AssignPrivateNatGatewayAddress'


class Action60(Enum):
    AssociateAddress = 'AssociateAddress'


class Action64(Enum):
    AssociateClientVpnTargetNetwork = 'AssociateClientVpnTargetNetwork'


class Action68(Enum):
    AssociateDhcpOptions = 'AssociateDhcpOptions'


class Action72(Enum):
    AssociateEnclaveCertificateIamRole = 'AssociateEnclaveCertificateIamRole'


class IamInstanceProfile1(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None


class Action76(Enum):
    AssociateIamInstanceProfile = 'AssociateIamInstanceProfile'


class AssociationTarget(BaseModel):
    DedicatedHostIds: Optional[DedicatedHostIdList] = None
    InstanceIds: Optional[InstanceIdList] = None
    InstanceTags: Optional[TagList] = None


class Action80(Enum):
    AssociateInstanceEventWindow = 'AssociateInstanceEventWindow'


class Action84(Enum):
    AssociateIpamResourceDiscovery = 'AssociateIpamResourceDiscovery'


class Action88(Enum):
    AssociateNatGatewayAddress = 'AssociateNatGatewayAddress'


class AllocationId1(RootModel[List[AllocationId]]):
    root: List[AllocationId]


class Action92(Enum):
    AssociateRouteTable = 'AssociateRouteTable'


class Action96(Enum):
    AssociateSubnetCidrBlock = 'AssociateSubnetCidrBlock'


class Action100(Enum):
    AssociateTransitGatewayMulticastDomain = 'AssociateTransitGatewayMulticastDomain'


class SubnetIds1(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class Action104(Enum):
    AssociateTransitGatewayPolicyTable = 'AssociateTransitGatewayPolicyTable'


class Action108(Enum):
    AssociateTransitGatewayRouteTable = 'AssociateTransitGatewayRouteTable'


class Action112(Enum):
    AssociateTrunkInterface = 'AssociateTrunkInterface'


class Action116(Enum):
    AssociateVpcCidrBlock = 'AssociateVpcCidrBlock'


class Action120(Enum):
    AttachClassicLinkVpc = 'AttachClassicLinkVpc'


class Action124(Enum):
    AttachInternetGateway = 'AttachInternetGateway'


class EnaSrdSpecification(BaseModel):
    EnaSrdEnabled: Optional[Boolean] = None
    EnaSrdUdpSpecification_1: Optional[EnaSrdUdpSpecification] = Field(
        None, alias='EnaSrdUdpSpecification'
    )


class Action128(Enum):
    AttachNetworkInterface = 'AttachNetworkInterface'


class Action132(Enum):
    AttachVerifiedAccessTrustProvider = 'AttachVerifiedAccessTrustProvider'


class Action136(Enum):
    AttachVolume = 'AttachVolume'


class Action140(Enum):
    AttachVpnGateway = 'AttachVpnGateway'


class Action144(Enum):
    AuthorizeClientVpnIngress = 'AuthorizeClientVpnIngress'


class Action148(Enum):
    AuthorizeSecurityGroupEgress = 'AuthorizeSecurityGroupEgress'


class Action152(Enum):
    AuthorizeSecurityGroupIngress = 'AuthorizeSecurityGroupIngress'


class Action156(Enum):
    BundleInstance = 'BundleInstance'


class Action160(Enum):
    CancelBundleTask = 'CancelBundleTask'


class Action164(Enum):
    CancelCapacityReservation = 'CancelCapacityReservation'


class Action168(Enum):
    CancelCapacityReservationFleets = 'CancelCapacityReservationFleets'


class CapacityReservationFleetId1(RootModel[List[CapacityReservationFleetId]]):
    root: List[CapacityReservationFleetId]


class Action172(Enum):
    CancelConversionTask = 'CancelConversionTask'


class Action176(Enum):
    CancelExportTask = 'CancelExportTask'


class Action180(Enum):
    CancelImageLaunchPermission = 'CancelImageLaunchPermission'


class Action184(Enum):
    CancelImportTask = 'CancelImportTask'


class Action188(Enum):
    CancelReservedInstancesListing = 'CancelReservedInstancesListing'


class Action192(Enum):
    CancelSpotFleetRequests = 'CancelSpotFleetRequests'


class SpotFleetRequestId1(RootModel[List[SpotFleetRequestId]]):
    root: List[SpotFleetRequestId]


class Action196(Enum):
    CancelSpotInstanceRequests = 'CancelSpotInstanceRequests'


class SpotInstanceRequestId1(RootModel[List[SpotInstanceRequestId]]):
    root: List[SpotInstanceRequestId]


class Action200(Enum):
    ConfirmProductInstance = 'ConfirmProductInstance'


class Action204(Enum):
    CopyFpgaImage = 'CopyFpgaImage'


class Action208(Enum):
    CopyImage = 'CopyImage'


class Action212(Enum):
    CopySnapshot = 'CopySnapshot'


class InstancePlatform(Enum):
    Linux_UNIX = 'Linux/UNIX'
    Red_Hat_Enterprise_Linux = 'Red Hat Enterprise Linux'
    SUSE_Linux = 'SUSE Linux'
    Windows = 'Windows'
    Windows_with_SQL_Server = 'Windows with SQL Server'
    Windows_with_SQL_Server_Enterprise = 'Windows with SQL Server Enterprise'
    Windows_with_SQL_Server_Standard = 'Windows with SQL Server Standard'
    Windows_with_SQL_Server_Web = 'Windows with SQL Server Web'
    Linux_with_SQL_Server_Standard = 'Linux with SQL Server Standard'
    Linux_with_SQL_Server_Web = 'Linux with SQL Server Web'
    Linux_with_SQL_Server_Enterprise = 'Linux with SQL Server Enterprise'
    RHEL_with_SQL_Server_Standard = 'RHEL with SQL Server Standard'
    RHEL_with_SQL_Server_Enterprise = 'RHEL with SQL Server Enterprise'
    RHEL_with_SQL_Server_Web = 'RHEL with SQL Server Web'
    RHEL_with_HA = 'RHEL with HA'
    RHEL_with_HA_and_SQL_Server_Standard = 'RHEL with HA and SQL Server Standard'
    RHEL_with_HA_and_SQL_Server_Enterprise = 'RHEL with HA and SQL Server Enterprise'


class Tenancy1(Enum):
    default = 'default'
    dedicated = 'dedicated'


class Action216(Enum):
    CreateCapacityReservation = 'CreateCapacityReservation'


class TagSpecifications(RootModel[List[TagSpecification]]):
    root: List[TagSpecification]


class Tenancy3(Enum):
    default = 'default'


class InstanceMatchCriteria3(Enum):
    open = 'open'


class Action220(Enum):
    CreateCapacityReservationFleet = 'CreateCapacityReservationFleet'


class Action224(Enum):
    CreateCarrierGateway = 'CreateCarrierGateway'


class ConnectionLogOptions(BaseModel):
    CloudwatchLogGroup: Optional[String] = None
    CloudwatchLogStream: Optional[String] = None
    Enabled: Optional[Boolean] = None


class ClientConnectOptions(BaseModel):
    Enabled: Optional[Boolean] = None
    LambdaFunctionArn: Optional[String] = None


class ClientLoginBannerOptions(BaseModel):
    BannerText: Optional[String] = None
    Enabled: Optional[Boolean] = None


class Action228(Enum):
    CreateClientVpnEndpoint = 'CreateClientVpnEndpoint'


class DnsServers(RootModel[List[String]]):
    root: List[String]


class Action232(Enum):
    CreateClientVpnRoute = 'CreateClientVpnRoute'


class Action236(Enum):
    CreateCoipCidr = 'CreateCoipCidr'


class Action240(Enum):
    CreateCoipPool = 'CreateCoipPool'


class Type(Enum):
    ipsec_1 = 'ipsec.1'


class Action244(Enum):
    CreateCustomerGateway = 'CreateCustomerGateway'


class Action248(Enum):
    CreateDefaultSubnet = 'CreateDefaultSubnet'


class Action252(Enum):
    CreateDefaultVpc = 'CreateDefaultVpc'


class Action256(Enum):
    CreateDhcpOptions = 'CreateDhcpOptions'


class Action260(Enum):
    CreateEgressOnlyInternetGateway = 'CreateEgressOnlyInternetGateway'


class ExcessCapacityTerminationPolicy1(Enum):
    no_termination = 'no-termination'
    termination = 'termination'


class TargetCapacitySpecification1(BaseModel):
    DefaultTargetCapacityType_1: Optional[DefaultTargetCapacityType] = Field(
        None, alias='DefaultTargetCapacityType'
    )
    OnDemandTargetCapacity: Optional[Integer] = None
    SpotTargetCapacity: Optional[Integer] = None
    TargetCapacityUnitType_1: Optional[TargetCapacityUnitType] = Field(
        None, alias='TargetCapacityUnitType'
    )
    TotalTargetCapacity: Integer


class Type2(Enum):
    request = 'request'
    maintain = 'maintain'
    instant = 'instant'


class Action264(Enum):
    CreateFleet = 'CreateFleet'


class ResourceType1(Enum):
    VPC = 'VPC'
    Subnet = 'Subnet'
    NetworkInterface = 'NetworkInterface'
    TransitGateway = 'TransitGateway'
    TransitGatewayAttachment = 'TransitGatewayAttachment'


class DestinationOptions(BaseModel):
    FileFormat: Optional[DestinationFileFormat] = None
    HiveCompatiblePartitions: Optional[Boolean] = None
    PerHourPartition: Optional[Boolean] = None


class Action268(Enum):
    CreateFlowLogs = 'CreateFlowLogs'


class ResourceId(RootModel[List[FlowLogResourceId]]):
    root: List[FlowLogResourceId]


class InputStorageLocation(BaseModel):
    Bucket: Optional[String] = None
    Key: Optional[String] = None


class LogsStorageLocation(BaseModel):
    Bucket: Optional[String] = None
    Key: Optional[String] = None


class Action272(Enum):
    CreateFpgaImage = 'CreateFpgaImage'


class Action276(Enum):
    CreateImage = 'CreateImage'


class Action280(Enum):
    CreateInstanceEventWindow = 'CreateInstanceEventWindow'


class ExportToS3(BaseModel):
    ContainerFormat_1: Optional[ContainerFormat] = Field(None, alias='ContainerFormat')
    DiskImageFormat_1: Optional[DiskImageFormat] = Field(None, alias='DiskImageFormat')
    S3Bucket: Optional[String] = None
    S3Prefix: Optional[String] = None


class TargetEnvironment(Enum):
    citrix = 'citrix'
    vmware = 'vmware'
    microsoft = 'microsoft'


class Action284(Enum):
    CreateInstanceExportTask = 'CreateInstanceExportTask'


class Action288(Enum):
    CreateInternetGateway = 'CreateInternetGateway'


class Action292(Enum):
    CreateIpam = 'CreateIpam'


class AwsService(Enum):
    ec2 = 'ec2'


class PublicIpSource(Enum):
    amazon = 'amazon'
    byoip = 'byoip'


class Action296(Enum):
    CreateIpamPool = 'CreateIpamPool'


class Action300(Enum):
    CreateIpamResourceDiscovery = 'CreateIpamResourceDiscovery'


class Action304(Enum):
    CreateIpamScope = 'CreateIpamScope'


class Action308(Enum):
    CreateKeyPair = 'CreateKeyPair'


class Action312(Enum):
    CreateLaunchTemplate = 'CreateLaunchTemplate'


class Action316(Enum):
    CreateLaunchTemplateVersion = 'CreateLaunchTemplateVersion'


class Action320(Enum):
    CreateLocalGatewayRoute = 'CreateLocalGatewayRoute'


class Mode(Enum):
    direct_vpc_routing = 'direct-vpc-routing'
    coip = 'coip'


class Action324(Enum):
    CreateLocalGatewayRouteTable = 'CreateLocalGatewayRouteTable'


class Action328(Enum):
    CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation = (
        'CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation'
    )


class Action332(Enum):
    CreateLocalGatewayRouteTableVpcAssociation = (
        'CreateLocalGatewayRouteTableVpcAssociation'
    )


class Action336(Enum):
    CreateManagedPrefixList = 'CreateManagedPrefixList'


class Action340(Enum):
    CreateNatGateway = 'CreateNatGateway'


class SecondaryAllocationId(RootModel[List[AllocationId]]):
    root: List[AllocationId]


class SecondaryPrivateIpAddress(RootModel[List[String]]):
    root: List[String]


class Action344(Enum):
    CreateNetworkAcl = 'CreateNetworkAcl'


class Icmp(BaseModel):
    Code: Optional[Integer] = None
    Type: Optional[Integer] = None


class Action348(Enum):
    CreateNetworkAclEntry = 'CreateNetworkAclEntry'


class Action352(Enum):
    CreateNetworkInsightsAccessScope = 'CreateNetworkInsightsAccessScope'


class FilterAtSource(BaseModel):
    DestinationAddress: Optional[IpAddress] = None
    DestinationPortRange: Optional[RequestFilterPortRange] = None
    SourceAddress: Optional[IpAddress] = None
    SourcePortRange: Optional[RequestFilterPortRange] = None


class FilterAtDestination(BaseModel):
    DestinationAddress: Optional[IpAddress] = None
    DestinationPortRange: Optional[RequestFilterPortRange] = None
    SourceAddress: Optional[IpAddress] = None
    SourcePortRange: Optional[RequestFilterPortRange] = None


class Action356(Enum):
    CreateNetworkInsightsPath = 'CreateNetworkInsightsPath'


class InterfaceType(Enum):
    efa = 'efa'
    branch = 'branch'
    trunk = 'trunk'


class Action360(Enum):
    CreateNetworkInterface = 'CreateNetworkInterface'


class Permission(Enum):
    INSTANCE_ATTACH = 'INSTANCE-ATTACH'
    EIP_ASSOCIATE = 'EIP-ASSOCIATE'


class Action364(Enum):
    CreateNetworkInterfacePermission = 'CreateNetworkInterfacePermission'


class Strategy(Enum):
    cluster = 'cluster'
    spread = 'spread'
    partition = 'partition'


class Action368(Enum):
    CreatePlacementGroup = 'CreatePlacementGroup'


class Action372(Enum):
    CreatePublicIpv4Pool = 'CreatePublicIpv4Pool'


class Action376(Enum):
    CreateReplaceRootVolumeTask = 'CreateReplaceRootVolumeTask'


class Action380(Enum):
    CreateReservedInstancesListing = 'CreateReservedInstancesListing'


class PriceSchedules(RootModel[List[PriceScheduleSpecification]]):
    root: List[PriceScheduleSpecification]


class Action384(Enum):
    CreateRestoreImageTask = 'CreateRestoreImageTask'


class Action388(Enum):
    CreateRoute = 'CreateRoute'


class Action392(Enum):
    CreateRouteTable = 'CreateRouteTable'


class Action396(Enum):
    CreateSecurityGroup = 'CreateSecurityGroup'


class Action400(Enum):
    CreateSnapshot = 'CreateSnapshot'


class InstanceSpecification(BaseModel):
    ExcludeBootVolume: Optional[Boolean] = None
    ExcludeDataVolumeIds: Optional[VolumeIdStringList] = None
    InstanceId: InstanceIdWithVolumeResolver


class Action404(Enum):
    CreateSnapshots = 'CreateSnapshots'


class Action408(Enum):
    CreateSpotDatafeedSubscription = 'CreateSpotDatafeedSubscription'


class Action412(Enum):
    CreateStoreImageTask = 'CreateStoreImageTask'


class Action416(Enum):
    CreateSubnet = 'CreateSubnet'


class ReservationType(Enum):
    prefix = 'prefix'
    explicit = 'explicit'


class Action420(Enum):
    CreateSubnetCidrReservation = 'CreateSubnetCidrReservation'


class Action424(Enum):
    CreateTags = 'CreateTags'


class ResourceId1(RootModel[List[TaggableResourceId]]):
    root: List[TaggableResourceId]


class Tag1(RootModel[List[Tag]]):
    root: List[Tag]


class Action428(Enum):
    CreateTrafficMirrorFilter = 'CreateTrafficMirrorFilter'


class RuleAction3(Enum):
    accept = 'accept'
    reject = 'reject'


class DestinationPortRange(BaseModel):
    FromPort: Optional[Integer] = None
    ToPort: Optional[Integer] = None


class SourcePortRange(BaseModel):
    FromPort: Optional[Integer] = None
    ToPort: Optional[Integer] = None


class Action432(Enum):
    CreateTrafficMirrorFilterRule = 'CreateTrafficMirrorFilterRule'


class Action436(Enum):
    CreateTrafficMirrorSession = 'CreateTrafficMirrorSession'


class Action440(Enum):
    CreateTrafficMirrorTarget = 'CreateTrafficMirrorTarget'


class Options(BaseModel):
    AmazonSideAsn: Optional[Long] = None
    AutoAcceptSharedAttachments: Optional[AutoAcceptSharedAttachmentsValue] = None
    DefaultRouteTableAssociation: Optional[DefaultRouteTableAssociationValue] = None
    DefaultRouteTablePropagation: Optional[DefaultRouteTablePropagationValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    MulticastSupport: Optional[MulticastSupportValue] = None
    TransitGatewayCidrBlocks: Optional[TransitGatewayCidrBlockStringList] = None
    VpnEcmpSupport: Optional[VpnEcmpSupportValue] = None


class Action444(Enum):
    CreateTransitGateway = 'CreateTransitGateway'


class Options2(BaseModel):
    Protocol: ProtocolValue


class Action448(Enum):
    CreateTransitGatewayConnect = 'CreateTransitGatewayConnect'


class BgpOptions(BaseModel):
    PeerAsn: Optional[Long] = None


class Action452(Enum):
    CreateTransitGatewayConnectPeer = 'CreateTransitGatewayConnectPeer'


class InsideCidrBlocks(RootModel[List[String]]):
    root: List[String]


class Options4(BaseModel):
    AutoAcceptSharedAssociations: Optional[AutoAcceptSharedAssociationsValue] = None
    Igmpv2Support: Optional[Igmpv2SupportValue] = None
    StaticSourcesSupport: Optional[StaticSourcesSupportValue] = None


class Action456(Enum):
    CreateTransitGatewayMulticastDomain = 'CreateTransitGatewayMulticastDomain'


class Options6(BaseModel):
    DynamicRouting: Optional[DynamicRoutingValue] = None


class Action460(Enum):
    CreateTransitGatewayPeeringAttachment = 'CreateTransitGatewayPeeringAttachment'


class Action464(Enum):
    CreateTransitGatewayPolicyTable = 'CreateTransitGatewayPolicyTable'


class Action468(Enum):
    CreateTransitGatewayPrefixListReference = 'CreateTransitGatewayPrefixListReference'


class Action472(Enum):
    CreateTransitGatewayRoute = 'CreateTransitGatewayRoute'


class Action476(Enum):
    CreateTransitGatewayRouteTable = 'CreateTransitGatewayRouteTable'


class Action480(Enum):
    CreateTransitGatewayRouteTableAnnouncement = (
        'CreateTransitGatewayRouteTableAnnouncement'
    )


class Options8(BaseModel):
    ApplianceModeSupport: Optional[ApplianceModeSupportValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    Ipv6Support: Optional[Ipv6SupportValue] = None


class Action484(Enum):
    CreateTransitGatewayVpcAttachment = 'CreateTransitGatewayVpcAttachment'


class EndpointType(Enum):
    load_balancer = 'load-balancer'
    network_interface = 'network-interface'


class AttachmentType(Enum):
    vpc = 'vpc'


class NetworkInterfaceOptions(BaseModel):
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None


class Action488(Enum):
    CreateVerifiedAccessEndpoint = 'CreateVerifiedAccessEndpoint'


class Action492(Enum):
    CreateVerifiedAccessGroup = 'CreateVerifiedAccessGroup'


class Action496(Enum):
    CreateVerifiedAccessInstance = 'CreateVerifiedAccessInstance'


class OidcOptions1(BaseModel):
    AuthorizationEndpoint: Optional[String] = None
    ClientId: Optional[String] = None
    ClientSecret: Optional[String] = None
    Issuer: Optional[String] = None
    Scope: Optional[String] = None
    TokenEndpoint: Optional[String] = None
    UserInfoEndpoint: Optional[String] = None


class DeviceOptions(BaseModel):
    TenantId: Optional[String] = None


class Action500(Enum):
    CreateVerifiedAccessTrustProvider = 'CreateVerifiedAccessTrustProvider'


class Action504(Enum):
    CreateVolume = 'CreateVolume'


class InstanceTenancy(Enum):
    default = 'default'
    dedicated = 'dedicated'
    host = 'host'


class Action508(Enum):
    CreateVpc = 'CreateVpc'


class DnsOptions(BaseModel):
    DnsRecordIpType_1: Optional[DnsRecordIpType] = Field(None, alias='DnsRecordIpType')
    PrivateDnsOnlyForInboundResolverEndpoint: Optional[Boolean] = None


class Action512(Enum):
    CreateVpcEndpoint = 'CreateVpcEndpoint'


class RouteTableId1(RootModel[List[RouteTableId]]):
    root: List[RouteTableId]


class SubnetId1(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class Action516(Enum):
    CreateVpcEndpointConnectionNotification = 'CreateVpcEndpointConnectionNotification'


class ConnectionEvents(RootModel[List[String]]):
    root: List[String]


class Action520(Enum):
    CreateVpcEndpointServiceConfiguration = 'CreateVpcEndpointServiceConfiguration'


class NetworkLoadBalancerArn(RootModel[List[String]]):
    root: List[String]


class GatewayLoadBalancerArn(RootModel[List[String]]):
    root: List[String]


class SupportedIpAddressType(RootModel[List[String]]):
    root: List[String]


class Action524(Enum):
    CreateVpcPeeringConnection = 'CreateVpcPeeringConnection'


class Action528(Enum):
    CreateVpnConnection = 'CreateVpnConnection'


class Action532(Enum):
    CreateVpnConnectionRoute = 'CreateVpnConnectionRoute'


class Type4(Enum):
    ipsec_1 = 'ipsec.1'


class Action536(Enum):
    CreateVpnGateway = 'CreateVpnGateway'


class Action540(Enum):
    DeleteCarrierGateway = 'DeleteCarrierGateway'


class Action544(Enum):
    DeleteClientVpnEndpoint = 'DeleteClientVpnEndpoint'


class Action548(Enum):
    DeleteClientVpnRoute = 'DeleteClientVpnRoute'


class Action552(Enum):
    DeleteCoipCidr = 'DeleteCoipCidr'


class Action556(Enum):
    DeleteCoipPool = 'DeleteCoipPool'


class Action560(Enum):
    DeleteCustomerGateway = 'DeleteCustomerGateway'


class Action564(Enum):
    DeleteDhcpOptions = 'DeleteDhcpOptions'


class Action568(Enum):
    DeleteEgressOnlyInternetGateway = 'DeleteEgressOnlyInternetGateway'


class Action572(Enum):
    DeleteFleets = 'DeleteFleets'


class FleetId1(RootModel[List[FleetId]]):
    root: List[FleetId]


class Action576(Enum):
    DeleteFlowLogs = 'DeleteFlowLogs'


class FlowLogId(RootModel[List[VpcFlowLogId]]):
    root: List[VpcFlowLogId]


class Action580(Enum):
    DeleteFpgaImage = 'DeleteFpgaImage'


class Action584(Enum):
    DeleteInstanceEventWindow = 'DeleteInstanceEventWindow'


class Action588(Enum):
    DeleteInternetGateway = 'DeleteInternetGateway'


class Action592(Enum):
    DeleteIpam = 'DeleteIpam'


class Action596(Enum):
    DeleteIpamPool = 'DeleteIpamPool'


class Action600(Enum):
    DeleteIpamResourceDiscovery = 'DeleteIpamResourceDiscovery'


class Action604(Enum):
    DeleteIpamScope = 'DeleteIpamScope'


class Action608(Enum):
    DeleteKeyPair = 'DeleteKeyPair'


class Action612(Enum):
    DeleteLaunchTemplate = 'DeleteLaunchTemplate'


class Action616(Enum):
    DeleteLaunchTemplateVersions = 'DeleteLaunchTemplateVersions'


class LaunchTemplateVersion1(RootModel[List[String]]):
    root: List[String]


class Action620(Enum):
    DeleteLocalGatewayRoute = 'DeleteLocalGatewayRoute'


class Action624(Enum):
    DeleteLocalGatewayRouteTable = 'DeleteLocalGatewayRouteTable'


class Action628(Enum):
    DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation = (
        'DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation'
    )


class Action632(Enum):
    DeleteLocalGatewayRouteTableVpcAssociation = (
        'DeleteLocalGatewayRouteTableVpcAssociation'
    )


class Action636(Enum):
    DeleteManagedPrefixList = 'DeleteManagedPrefixList'


class Action640(Enum):
    DeleteNatGateway = 'DeleteNatGateway'


class Action644(Enum):
    DeleteNetworkAcl = 'DeleteNetworkAcl'


class Action648(Enum):
    DeleteNetworkAclEntry = 'DeleteNetworkAclEntry'


class Action652(Enum):
    DeleteNetworkInsightsAccessScope = 'DeleteNetworkInsightsAccessScope'


class Action656(Enum):
    DeleteNetworkInsightsAccessScopeAnalysis = (
        'DeleteNetworkInsightsAccessScopeAnalysis'
    )


class Action660(Enum):
    DeleteNetworkInsightsAnalysis = 'DeleteNetworkInsightsAnalysis'


class Action664(Enum):
    DeleteNetworkInsightsPath = 'DeleteNetworkInsightsPath'


class Action668(Enum):
    DeleteNetworkInterface = 'DeleteNetworkInterface'


class Action672(Enum):
    DeleteNetworkInterfacePermission = 'DeleteNetworkInterfacePermission'


class Action676(Enum):
    DeletePlacementGroup = 'DeletePlacementGroup'


class Action680(Enum):
    DeletePublicIpv4Pool = 'DeletePublicIpv4Pool'


class Action684(Enum):
    DeleteQueuedReservedInstances = 'DeleteQueuedReservedInstances'


class ReservedInstancesId1(RootModel[List[ReservationId]]):
    root: List[ReservationId] = Field(..., max_length=100, min_length=1)


class Action688(Enum):
    DeleteRoute = 'DeleteRoute'


class Action692(Enum):
    DeleteRouteTable = 'DeleteRouteTable'


class Action696(Enum):
    DeleteSecurityGroup = 'DeleteSecurityGroup'


class Action700(Enum):
    DeleteSnapshot = 'DeleteSnapshot'


class Action704(Enum):
    DeleteSpotDatafeedSubscription = 'DeleteSpotDatafeedSubscription'


class Action708(Enum):
    DeleteSubnet = 'DeleteSubnet'


class Action712(Enum):
    DeleteSubnetCidrReservation = 'DeleteSubnetCidrReservation'


class Action716(Enum):
    DeleteTags = 'DeleteTags'


class Action720(Enum):
    DeleteTrafficMirrorFilter = 'DeleteTrafficMirrorFilter'


class Action724(Enum):
    DeleteTrafficMirrorFilterRule = 'DeleteTrafficMirrorFilterRule'


class Action728(Enum):
    DeleteTrafficMirrorSession = 'DeleteTrafficMirrorSession'


class Action732(Enum):
    DeleteTrafficMirrorTarget = 'DeleteTrafficMirrorTarget'


class Action736(Enum):
    DeleteTransitGateway = 'DeleteTransitGateway'


class Action740(Enum):
    DeleteTransitGatewayConnect = 'DeleteTransitGatewayConnect'


class Action744(Enum):
    DeleteTransitGatewayConnectPeer = 'DeleteTransitGatewayConnectPeer'


class Action748(Enum):
    DeleteTransitGatewayMulticastDomain = 'DeleteTransitGatewayMulticastDomain'


class Action752(Enum):
    DeleteTransitGatewayPeeringAttachment = 'DeleteTransitGatewayPeeringAttachment'


class Action756(Enum):
    DeleteTransitGatewayPolicyTable = 'DeleteTransitGatewayPolicyTable'


class Action760(Enum):
    DeleteTransitGatewayPrefixListReference = 'DeleteTransitGatewayPrefixListReference'


class Action764(Enum):
    DeleteTransitGatewayRoute = 'DeleteTransitGatewayRoute'


class Action768(Enum):
    DeleteTransitGatewayRouteTable = 'DeleteTransitGatewayRouteTable'


class Action772(Enum):
    DeleteTransitGatewayRouteTableAnnouncement = (
        'DeleteTransitGatewayRouteTableAnnouncement'
    )


class Action776(Enum):
    DeleteTransitGatewayVpcAttachment = 'DeleteTransitGatewayVpcAttachment'


class Action780(Enum):
    DeleteVerifiedAccessEndpoint = 'DeleteVerifiedAccessEndpoint'


class Action784(Enum):
    DeleteVerifiedAccessGroup = 'DeleteVerifiedAccessGroup'


class Action788(Enum):
    DeleteVerifiedAccessInstance = 'DeleteVerifiedAccessInstance'


class Action792(Enum):
    DeleteVerifiedAccessTrustProvider = 'DeleteVerifiedAccessTrustProvider'


class Action796(Enum):
    DeleteVolume = 'DeleteVolume'


class Action800(Enum):
    DeleteVpc = 'DeleteVpc'


class Action804(Enum):
    DeleteVpcEndpointConnectionNotifications = (
        'DeleteVpcEndpointConnectionNotifications'
    )


class ConnectionNotificationId1(RootModel[List[ConnectionNotificationId]]):
    root: List[ConnectionNotificationId]


class Action808(Enum):
    DeleteVpcEndpointServiceConfigurations = 'DeleteVpcEndpointServiceConfigurations'


class ServiceId(RootModel[List[VpcEndpointServiceId]]):
    root: List[VpcEndpointServiceId]


class Action812(Enum):
    DeleteVpcEndpoints = 'DeleteVpcEndpoints'


class Action816(Enum):
    DeleteVpcPeeringConnection = 'DeleteVpcPeeringConnection'


class Action820(Enum):
    DeleteVpnConnection = 'DeleteVpnConnection'


class Action824(Enum):
    DeleteVpnConnectionRoute = 'DeleteVpnConnectionRoute'


class Action828(Enum):
    DeleteVpnGateway = 'DeleteVpnGateway'


class Action832(Enum):
    DeprovisionByoipCidr = 'DeprovisionByoipCidr'


class Action836(Enum):
    DeprovisionIpamPoolCidr = 'DeprovisionIpamPoolCidr'


class Action840(Enum):
    DeprovisionPublicIpv4PoolCidr = 'DeprovisionPublicIpv4PoolCidr'


class Action844(Enum):
    DeregisterImage = 'DeregisterImage'


class Action848(Enum):
    DeregisterInstanceEventNotificationAttributes = (
        'DeregisterInstanceEventNotificationAttributes'
    )


class Action852(Enum):
    DeregisterTransitGatewayMulticastGroupMembers = (
        'DeregisterTransitGatewayMulticastGroupMembers'
    )


class NetworkInterfaceIds(RootModel[List[NetworkInterfaceId]]):
    root: List[NetworkInterfaceId]


class Action856(Enum):
    DeregisterTransitGatewayMulticastGroupSources = (
        'DeregisterTransitGatewayMulticastGroupSources'
    )


class Action860(Enum):
    DescribeAccountAttributes = 'DescribeAccountAttributes'


class AttributeName(RootModel[List[AccountAttributeName]]):
    root: List[AccountAttributeName]


class Action864(Enum):
    DescribeAddressTransfers = 'DescribeAddressTransfers'


class Action868(Enum):
    DescribeAddresses = 'DescribeAddresses'


class PublicIp(RootModel[List[String]]):
    root: List[String]


class Attribute(Enum):
    domain_name = 'domain-name'


class Action872(Enum):
    DescribeAddressesAttribute = 'DescribeAddressesAttribute'


class Action876(Enum):
    DescribeAggregateIdFormat = 'DescribeAggregateIdFormat'


class Action880(Enum):
    DescribeAvailabilityZones = 'DescribeAvailabilityZones'


class ZoneName(RootModel[List[String]]):
    root: List[String]


class ZoneId(RootModel[List[String]]):
    root: List[String]


class Action884(Enum):
    DescribeAwsNetworkPerformanceMetricSubscriptions = (
        'DescribeAwsNetworkPerformanceMetricSubscriptions'
    )


class Action888(Enum):
    DescribeBundleTasks = 'DescribeBundleTasks'


class BundleId1(RootModel[List[BundleId]]):
    root: List[BundleId]


class Action892(Enum):
    DescribeByoipCidrs = 'DescribeByoipCidrs'


class Action896(Enum):
    DescribeCapacityReservationFleets = 'DescribeCapacityReservationFleets'


class Action900(Enum):
    DescribeCapacityReservations = 'DescribeCapacityReservations'


class CapacityReservationId1(RootModel[List[CapacityReservationId]]):
    root: List[CapacityReservationId]


class Action904(Enum):
    DescribeCarrierGateways = 'DescribeCarrierGateways'


class CarrierGatewayId1(RootModel[List[CarrierGatewayId]]):
    root: List[CarrierGatewayId]


class Action908(Enum):
    DescribeClassicLinkInstances = 'DescribeClassicLinkInstances'


class InstanceId1(RootModel[List[InstanceId]]):
    root: List[InstanceId]


class Action912(Enum):
    DescribeClientVpnAuthorizationRules = 'DescribeClientVpnAuthorizationRules'


class Action916(Enum):
    DescribeClientVpnConnections = 'DescribeClientVpnConnections'


class Action920(Enum):
    DescribeClientVpnEndpoints = 'DescribeClientVpnEndpoints'


class ClientVpnEndpointId1(RootModel[List[ClientVpnEndpointId]]):
    root: List[ClientVpnEndpointId]


class Action924(Enum):
    DescribeClientVpnRoutes = 'DescribeClientVpnRoutes'


class Action928(Enum):
    DescribeClientVpnTargetNetworks = 'DescribeClientVpnTargetNetworks'


class AssociationIds(RootModel[List[String]]):
    root: List[String]


class Action932(Enum):
    DescribeCoipPools = 'DescribeCoipPools'


class PoolId(RootModel[List[Ipv4PoolCoipId]]):
    root: List[Ipv4PoolCoipId]


class Action936(Enum):
    DescribeConversionTasks = 'DescribeConversionTasks'


class ConversionTaskId1(RootModel[List[ConversionTaskId]]):
    root: List[ConversionTaskId]


class Action940(Enum):
    DescribeCustomerGateways = 'DescribeCustomerGateways'


class CustomerGatewayId1(RootModel[List[CustomerGatewayId]]):
    root: List[CustomerGatewayId]


class Action944(Enum):
    DescribeDhcpOptions = 'DescribeDhcpOptions'


class DhcpOptionsId1(RootModel[List[DhcpOptionsId]]):
    root: List[DhcpOptionsId]


class Action948(Enum):
    DescribeEgressOnlyInternetGateways = 'DescribeEgressOnlyInternetGateways'


class EgressOnlyInternetGatewayId1(RootModel[List[EgressOnlyInternetGatewayId]]):
    root: List[EgressOnlyInternetGatewayId]


class Action952(Enum):
    DescribeElasticGpus = 'DescribeElasticGpus'


class ElasticGpuId1(RootModel[List[ElasticGpuId]]):
    root: List[ElasticGpuId]


class Action956(Enum):
    DescribeExportImageTasks = 'DescribeExportImageTasks'


class ExportImageTaskId1(RootModel[List[ExportImageTaskId]]):
    root: List[ExportImageTaskId]


class Action960(Enum):
    DescribeExportTasks = 'DescribeExportTasks'


class ExportTaskId1(RootModel[List[ExportTaskId]]):
    root: List[ExportTaskId]


class Action964(Enum):
    DescribeFastLaunchImages = 'DescribeFastLaunchImages'


class ImageId1(RootModel[List[ImageId]]):
    root: List[ImageId]


class Action968(Enum):
    DescribeFastSnapshotRestores = 'DescribeFastSnapshotRestores'


class EventType1(Enum):
    instance_change = 'instance-change'
    fleet_change = 'fleet-change'
    service_error = 'service-error'


class Action972(Enum):
    DescribeFleetHistory = 'DescribeFleetHistory'


class Action976(Enum):
    DescribeFleetInstances = 'DescribeFleetInstances'


class Action980(Enum):
    DescribeFleets = 'DescribeFleets'


class Action984(Enum):
    DescribeFlowLogs = 'DescribeFlowLogs'


class Attribute2(Enum):
    description = 'description'
    name = 'name'
    loadPermission = 'loadPermission'
    productCodes = 'productCodes'


class Action988(Enum):
    DescribeFpgaImageAttribute = 'DescribeFpgaImageAttribute'


class Action992(Enum):
    DescribeFpgaImages = 'DescribeFpgaImages'


class FpgaImageId1(RootModel[List[FpgaImageId]]):
    root: List[FpgaImageId]


class Owner(RootModel[List[String]]):
    root: List[String]


class Action996(Enum):
    DescribeHostReservationOfferings = 'DescribeHostReservationOfferings'


class Action1000(Enum):
    DescribeHostReservations = 'DescribeHostReservations'


class Action1004(Enum):
    DescribeHosts = 'DescribeHosts'


class HostId(RootModel[List[DedicatedHostId]]):
    root: List[DedicatedHostId]


class Action1008(Enum):
    DescribeIamInstanceProfileAssociations = 'DescribeIamInstanceProfileAssociations'


class AssociationId(RootModel[List[IamInstanceProfileAssociationId]]):
    root: List[IamInstanceProfileAssociationId]


class Action1012(Enum):
    DescribeIdFormat = 'DescribeIdFormat'


class Action1016(Enum):
    DescribeIdentityIdFormat = 'DescribeIdentityIdFormat'


class Attribute4(Enum):
    description = 'description'
    kernel = 'kernel'
    ramdisk = 'ramdisk'
    launchPermission = 'launchPermission'
    productCodes = 'productCodes'
    blockDeviceMapping = 'blockDeviceMapping'
    sriovNetSupport = 'sriovNetSupport'
    bootMode = 'bootMode'
    tpmSupport = 'tpmSupport'
    uefiData = 'uefiData'
    lastLaunchedTime = 'lastLaunchedTime'
    imdsSupport = 'imdsSupport'


class Action1020(Enum):
    DescribeImageAttribute = 'DescribeImageAttribute'


class Action1024(Enum):
    DescribeImages = 'DescribeImages'


class ExecutableBy(RootModel[List[String]]):
    root: List[String]


class Action1028(Enum):
    DescribeImportImageTasks = 'DescribeImportImageTasks'


class ImportTaskId1(RootModel[List[ImportImageTaskId]]):
    root: List[ImportImageTaskId]


class Action1032(Enum):
    DescribeImportSnapshotTasks = 'DescribeImportSnapshotTasks'


class ImportTaskId2(RootModel[List[ImportSnapshotTaskId]]):
    root: List[ImportSnapshotTaskId]


class Attribute6(Enum):
    instanceType = 'instanceType'
    kernel = 'kernel'
    ramdisk = 'ramdisk'
    userData = 'userData'
    disableApiTermination = 'disableApiTermination'
    instanceInitiatedShutdownBehavior = 'instanceInitiatedShutdownBehavior'
    rootDeviceName = 'rootDeviceName'
    blockDeviceMapping = 'blockDeviceMapping'
    productCodes = 'productCodes'
    sourceDestCheck = 'sourceDestCheck'
    groupSet = 'groupSet'
    ebsOptimized = 'ebsOptimized'
    sriovNetSupport = 'sriovNetSupport'
    enaSupport = 'enaSupport'
    enclaveOptions = 'enclaveOptions'
    disableApiStop = 'disableApiStop'


class Action1036(Enum):
    DescribeInstanceAttribute = 'DescribeInstanceAttribute'


class Action1040(Enum):
    DescribeInstanceCreditSpecifications = 'DescribeInstanceCreditSpecifications'


class Action1044(Enum):
    DescribeInstanceEventNotificationAttributes = (
        'DescribeInstanceEventNotificationAttributes'
    )


class Action1048(Enum):
    DescribeInstanceEventWindows = 'DescribeInstanceEventWindows'


class InstanceEventWindowId1(RootModel[List[InstanceEventWindowId]]):
    root: List[InstanceEventWindowId]


class Action1052(Enum):
    DescribeInstanceStatus = 'DescribeInstanceStatus'


class Action1056(Enum):
    DescribeInstanceTypeOfferings = 'DescribeInstanceTypeOfferings'


class Action1060(Enum):
    DescribeInstanceTypes = 'DescribeInstanceTypes'


class InstanceType1(RootModel[List[InstanceType]]):
    root: List[InstanceType] = Field(..., max_length=100, min_length=0)


class Action1064(Enum):
    DescribeInstances = 'DescribeInstances'


class Action1068(Enum):
    DescribeInternetGateways = 'DescribeInternetGateways'


class InternetGatewayId1(RootModel[List[InternetGatewayId]]):
    root: List[InternetGatewayId]


class Action1072(Enum):
    DescribeIpamPools = 'DescribeIpamPools'


class IpamPoolId1(RootModel[List[String]]):
    root: List[String]


class Action1076(Enum):
    DescribeIpamResourceDiscoveries = 'DescribeIpamResourceDiscoveries'


class IpamResourceDiscoveryId1(RootModel[List[String]]):
    root: List[String]


class Action1080(Enum):
    DescribeIpamResourceDiscoveryAssociations = (
        'DescribeIpamResourceDiscoveryAssociations'
    )


class IpamResourceDiscoveryAssociationId1(RootModel[List[String]]):
    root: List[String]


class Action1084(Enum):
    DescribeIpamScopes = 'DescribeIpamScopes'


class IpamScopeId1(RootModel[List[String]]):
    root: List[String]


class Action1088(Enum):
    DescribeIpams = 'DescribeIpams'


class IpamId1(RootModel[List[String]]):
    root: List[String]


class Action1092(Enum):
    DescribeIpv6Pools = 'DescribeIpv6Pools'


class PoolId1(RootModel[List[Ipv6PoolEc2Id]]):
    root: List[Ipv6PoolEc2Id]


class Action1096(Enum):
    DescribeKeyPairs = 'DescribeKeyPairs'


class KeyName(RootModel[List[KeyPairName]]):
    root: List[KeyPairName]


class KeyPairId1(RootModel[List[KeyPairId]]):
    root: List[KeyPairId]


class Action1100(Enum):
    DescribeLaunchTemplateVersions = 'DescribeLaunchTemplateVersions'


class Action1104(Enum):
    DescribeLaunchTemplates = 'DescribeLaunchTemplates'


class LaunchTemplateId1(RootModel[List[LaunchTemplateId]]):
    root: List[LaunchTemplateId]


class LaunchTemplateName1(RootModel[List[LaunchTemplateName]]):
    root: List[LaunchTemplateName]


class Action1108(Enum):
    DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations = (
        'DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations'
    )


class LocalGatewayRouteTableVirtualInterfaceGroupAssociationId1(
    RootModel[List[LocalGatewayRouteTableVirtualInterfaceGroupAssociationId]]
):
    root: List[LocalGatewayRouteTableVirtualInterfaceGroupAssociationId]


class Action1112(Enum):
    DescribeLocalGatewayRouteTableVpcAssociations = (
        'DescribeLocalGatewayRouteTableVpcAssociations'
    )


class LocalGatewayRouteTableVpcAssociationId1(
    RootModel[List[LocalGatewayRouteTableVpcAssociationId]]
):
    root: List[LocalGatewayRouteTableVpcAssociationId]


class Action1116(Enum):
    DescribeLocalGatewayRouteTables = 'DescribeLocalGatewayRouteTables'


class LocalGatewayRouteTableId(RootModel[List[LocalGatewayRoutetableId]]):
    root: List[LocalGatewayRoutetableId]


class Action1120(Enum):
    DescribeLocalGatewayVirtualInterfaceGroups = (
        'DescribeLocalGatewayVirtualInterfaceGroups'
    )


class LocalGatewayVirtualInterfaceGroupId1(
    RootModel[List[LocalGatewayVirtualInterfaceGroupId]]
):
    root: List[LocalGatewayVirtualInterfaceGroupId]


class Action1124(Enum):
    DescribeLocalGatewayVirtualInterfaces = 'DescribeLocalGatewayVirtualInterfaces'


class LocalGatewayVirtualInterfaceId1(RootModel[List[LocalGatewayVirtualInterfaceId]]):
    root: List[LocalGatewayVirtualInterfaceId]


class Action1128(Enum):
    DescribeLocalGateways = 'DescribeLocalGateways'


class LocalGatewayId1(RootModel[List[LocalGatewayId]]):
    root: List[LocalGatewayId]


class Action1132(Enum):
    DescribeManagedPrefixLists = 'DescribeManagedPrefixLists'


class PrefixListId1(RootModel[List[String]]):
    root: List[String]


class Action1136(Enum):
    DescribeMovingAddresses = 'DescribeMovingAddresses'


class Action1140(Enum):
    DescribeNatGateways = 'DescribeNatGateways'


class NatGatewayId1(RootModel[List[NatGatewayId]]):
    root: List[NatGatewayId]


class Action1144(Enum):
    DescribeNetworkAcls = 'DescribeNetworkAcls'


class NetworkAclId1(RootModel[List[NetworkAclId]]):
    root: List[NetworkAclId]


class Action1148(Enum):
    DescribeNetworkInsightsAccessScopeAnalyses = (
        'DescribeNetworkInsightsAccessScopeAnalyses'
    )


class NetworkInsightsAccessScopeAnalysisId1(
    RootModel[List[NetworkInsightsAccessScopeAnalysisId]]
):
    root: List[NetworkInsightsAccessScopeAnalysisId]


class Action1152(Enum):
    DescribeNetworkInsightsAccessScopes = 'DescribeNetworkInsightsAccessScopes'


class NetworkInsightsAccessScopeId1(RootModel[List[NetworkInsightsAccessScopeId]]):
    root: List[NetworkInsightsAccessScopeId]


class Action1156(Enum):
    DescribeNetworkInsightsAnalyses = 'DescribeNetworkInsightsAnalyses'


class NetworkInsightsAnalysisId1(RootModel[List[NetworkInsightsAnalysisId]]):
    root: List[NetworkInsightsAnalysisId]


class Action1160(Enum):
    DescribeNetworkInsightsPaths = 'DescribeNetworkInsightsPaths'


class NetworkInsightsPathId1(RootModel[List[NetworkInsightsPathId]]):
    root: List[NetworkInsightsPathId]


class Attribute8(Enum):
    description = 'description'
    groupSet = 'groupSet'
    sourceDestCheck = 'sourceDestCheck'
    attachment = 'attachment'


class Action1164(Enum):
    DescribeNetworkInterfaceAttribute = 'DescribeNetworkInterfaceAttribute'


class Action1168(Enum):
    DescribeNetworkInterfacePermissions = 'DescribeNetworkInterfacePermissions'


class NetworkInterfacePermissionId1(RootModel[List[NetworkInterfacePermissionId]]):
    root: List[NetworkInterfacePermissionId]


class Action1172(Enum):
    DescribeNetworkInterfaces = 'DescribeNetworkInterfaces'


class NetworkInterfaceId1(RootModel[List[NetworkInterfaceId]]):
    root: List[NetworkInterfaceId]


class Action1176(Enum):
    DescribePlacementGroups = 'DescribePlacementGroups'


class GroupName(RootModel[List[PlacementGroupName]]):
    root: List[PlacementGroupName]


class GroupId(RootModel[List[PlacementGroupId]]):
    root: List[PlacementGroupId]


class Action1180(Enum):
    DescribePrefixLists = 'DescribePrefixLists'


class PrefixListId2(RootModel[List[PrefixListResourceId]]):
    root: List[PrefixListResourceId]


class Action1184(Enum):
    DescribePrincipalIdFormat = 'DescribePrincipalIdFormat'


class Resource(RootModel[List[String]]):
    root: List[String]


class Action1188(Enum):
    DescribePublicIpv4Pools = 'DescribePublicIpv4Pools'


class PoolId2(RootModel[List[Ipv4PoolEc2Id]]):
    root: List[Ipv4PoolEc2Id]


class Action1192(Enum):
    DescribeRegions = 'DescribeRegions'


class RegionName(RootModel[List[String]]):
    root: List[String]


class Action1196(Enum):
    DescribeReplaceRootVolumeTasks = 'DescribeReplaceRootVolumeTasks'


class ReplaceRootVolumeTaskId1(RootModel[List[ReplaceRootVolumeTaskId]]):
    root: List[ReplaceRootVolumeTaskId]


class OfferingClass(Enum):
    standard = 'standard'
    convertible = 'convertible'


class OfferingType(Enum):
    Heavy_Utilization = 'Heavy Utilization'
    Medium_Utilization = 'Medium Utilization'
    Light_Utilization = 'Light Utilization'
    No_Upfront = 'No Upfront'
    Partial_Upfront = 'Partial Upfront'
    All_Upfront = 'All Upfront'


class Action1200(Enum):
    DescribeReservedInstances = 'DescribeReservedInstances'


class ReservedInstancesId2(RootModel[List[ReservationId]]):
    root: List[ReservationId]


class Action1204(Enum):
    DescribeReservedInstancesListings = 'DescribeReservedInstancesListings'


class Action1208(Enum):
    DescribeReservedInstancesModifications = 'DescribeReservedInstancesModifications'


class ReservedInstancesModificationId1(
    RootModel[List[ReservedInstancesModificationId]]
):
    root: List[ReservedInstancesModificationId]


class InstanceType2(Enum):
    a1_medium = 'a1.medium'
    a1_large = 'a1.large'
    a1_xlarge = 'a1.xlarge'
    a1_2xlarge = 'a1.2xlarge'
    a1_4xlarge = 'a1.4xlarge'
    a1_metal = 'a1.metal'
    c1_medium = 'c1.medium'
    c1_xlarge = 'c1.xlarge'
    c3_large = 'c3.large'
    c3_xlarge = 'c3.xlarge'
    c3_2xlarge = 'c3.2xlarge'
    c3_4xlarge = 'c3.4xlarge'
    c3_8xlarge = 'c3.8xlarge'
    c4_large = 'c4.large'
    c4_xlarge = 'c4.xlarge'
    c4_2xlarge = 'c4.2xlarge'
    c4_4xlarge = 'c4.4xlarge'
    c4_8xlarge = 'c4.8xlarge'
    c5_large = 'c5.large'
    c5_xlarge = 'c5.xlarge'
    c5_2xlarge = 'c5.2xlarge'
    c5_4xlarge = 'c5.4xlarge'
    c5_9xlarge = 'c5.9xlarge'
    c5_12xlarge = 'c5.12xlarge'
    c5_18xlarge = 'c5.18xlarge'
    c5_24xlarge = 'c5.24xlarge'
    c5_metal = 'c5.metal'
    c5a_large = 'c5a.large'
    c5a_xlarge = 'c5a.xlarge'
    c5a_2xlarge = 'c5a.2xlarge'
    c5a_4xlarge = 'c5a.4xlarge'
    c5a_8xlarge = 'c5a.8xlarge'
    c5a_12xlarge = 'c5a.12xlarge'
    c5a_16xlarge = 'c5a.16xlarge'
    c5a_24xlarge = 'c5a.24xlarge'
    c5ad_large = 'c5ad.large'
    c5ad_xlarge = 'c5ad.xlarge'
    c5ad_2xlarge = 'c5ad.2xlarge'
    c5ad_4xlarge = 'c5ad.4xlarge'
    c5ad_8xlarge = 'c5ad.8xlarge'
    c5ad_12xlarge = 'c5ad.12xlarge'
    c5ad_16xlarge = 'c5ad.16xlarge'
    c5ad_24xlarge = 'c5ad.24xlarge'
    c5d_large = 'c5d.large'
    c5d_xlarge = 'c5d.xlarge'
    c5d_2xlarge = 'c5d.2xlarge'
    c5d_4xlarge = 'c5d.4xlarge'
    c5d_9xlarge = 'c5d.9xlarge'
    c5d_12xlarge = 'c5d.12xlarge'
    c5d_18xlarge = 'c5d.18xlarge'
    c5d_24xlarge = 'c5d.24xlarge'
    c5d_metal = 'c5d.metal'
    c5n_large = 'c5n.large'
    c5n_xlarge = 'c5n.xlarge'
    c5n_2xlarge = 'c5n.2xlarge'
    c5n_4xlarge = 'c5n.4xlarge'
    c5n_9xlarge = 'c5n.9xlarge'
    c5n_18xlarge = 'c5n.18xlarge'
    c5n_metal = 'c5n.metal'
    c6g_medium = 'c6g.medium'
    c6g_large = 'c6g.large'
    c6g_xlarge = 'c6g.xlarge'
    c6g_2xlarge = 'c6g.2xlarge'
    c6g_4xlarge = 'c6g.4xlarge'
    c6g_8xlarge = 'c6g.8xlarge'
    c6g_12xlarge = 'c6g.12xlarge'
    c6g_16xlarge = 'c6g.16xlarge'
    c6g_metal = 'c6g.metal'
    c6gd_medium = 'c6gd.medium'
    c6gd_large = 'c6gd.large'
    c6gd_xlarge = 'c6gd.xlarge'
    c6gd_2xlarge = 'c6gd.2xlarge'
    c6gd_4xlarge = 'c6gd.4xlarge'
    c6gd_8xlarge = 'c6gd.8xlarge'
    c6gd_12xlarge = 'c6gd.12xlarge'
    c6gd_16xlarge = 'c6gd.16xlarge'
    c6gd_metal = 'c6gd.metal'
    c6gn_medium = 'c6gn.medium'
    c6gn_large = 'c6gn.large'
    c6gn_xlarge = 'c6gn.xlarge'
    c6gn_2xlarge = 'c6gn.2xlarge'
    c6gn_4xlarge = 'c6gn.4xlarge'
    c6gn_8xlarge = 'c6gn.8xlarge'
    c6gn_12xlarge = 'c6gn.12xlarge'
    c6gn_16xlarge = 'c6gn.16xlarge'
    c6i_large = 'c6i.large'
    c6i_xlarge = 'c6i.xlarge'
    c6i_2xlarge = 'c6i.2xlarge'
    c6i_4xlarge = 'c6i.4xlarge'
    c6i_8xlarge = 'c6i.8xlarge'
    c6i_12xlarge = 'c6i.12xlarge'
    c6i_16xlarge = 'c6i.16xlarge'
    c6i_24xlarge = 'c6i.24xlarge'
    c6i_32xlarge = 'c6i.32xlarge'
    c6i_metal = 'c6i.metal'
    cc1_4xlarge = 'cc1.4xlarge'
    cc2_8xlarge = 'cc2.8xlarge'
    cg1_4xlarge = 'cg1.4xlarge'
    cr1_8xlarge = 'cr1.8xlarge'
    d2_xlarge = 'd2.xlarge'
    d2_2xlarge = 'd2.2xlarge'
    d2_4xlarge = 'd2.4xlarge'
    d2_8xlarge = 'd2.8xlarge'
    d3_xlarge = 'd3.xlarge'
    d3_2xlarge = 'd3.2xlarge'
    d3_4xlarge = 'd3.4xlarge'
    d3_8xlarge = 'd3.8xlarge'
    d3en_xlarge = 'd3en.xlarge'
    d3en_2xlarge = 'd3en.2xlarge'
    d3en_4xlarge = 'd3en.4xlarge'
    d3en_6xlarge = 'd3en.6xlarge'
    d3en_8xlarge = 'd3en.8xlarge'
    d3en_12xlarge = 'd3en.12xlarge'
    dl1_24xlarge = 'dl1.24xlarge'
    f1_2xlarge = 'f1.2xlarge'
    f1_4xlarge = 'f1.4xlarge'
    f1_16xlarge = 'f1.16xlarge'
    g2_2xlarge = 'g2.2xlarge'
    g2_8xlarge = 'g2.8xlarge'
    g3_4xlarge = 'g3.4xlarge'
    g3_8xlarge = 'g3.8xlarge'
    g3_16xlarge = 'g3.16xlarge'
    g3s_xlarge = 'g3s.xlarge'
    g4ad_xlarge = 'g4ad.xlarge'
    g4ad_2xlarge = 'g4ad.2xlarge'
    g4ad_4xlarge = 'g4ad.4xlarge'
    g4ad_8xlarge = 'g4ad.8xlarge'
    g4ad_16xlarge = 'g4ad.16xlarge'
    g4dn_xlarge = 'g4dn.xlarge'
    g4dn_2xlarge = 'g4dn.2xlarge'
    g4dn_4xlarge = 'g4dn.4xlarge'
    g4dn_8xlarge = 'g4dn.8xlarge'
    g4dn_12xlarge = 'g4dn.12xlarge'
    g4dn_16xlarge = 'g4dn.16xlarge'
    g4dn_metal = 'g4dn.metal'
    g5_xlarge = 'g5.xlarge'
    g5_2xlarge = 'g5.2xlarge'
    g5_4xlarge = 'g5.4xlarge'
    g5_8xlarge = 'g5.8xlarge'
    g5_12xlarge = 'g5.12xlarge'
    g5_16xlarge = 'g5.16xlarge'
    g5_24xlarge = 'g5.24xlarge'
    g5_48xlarge = 'g5.48xlarge'
    g5g_xlarge = 'g5g.xlarge'
    g5g_2xlarge = 'g5g.2xlarge'
    g5g_4xlarge = 'g5g.4xlarge'
    g5g_8xlarge = 'g5g.8xlarge'
    g5g_16xlarge = 'g5g.16xlarge'
    g5g_metal = 'g5g.metal'
    hi1_4xlarge = 'hi1.4xlarge'
    hpc6a_48xlarge = 'hpc6a.48xlarge'
    hs1_8xlarge = 'hs1.8xlarge'
    h1_2xlarge = 'h1.2xlarge'
    h1_4xlarge = 'h1.4xlarge'
    h1_8xlarge = 'h1.8xlarge'
    h1_16xlarge = 'h1.16xlarge'
    i2_xlarge = 'i2.xlarge'
    i2_2xlarge = 'i2.2xlarge'
    i2_4xlarge = 'i2.4xlarge'
    i2_8xlarge = 'i2.8xlarge'
    i3_large = 'i3.large'
    i3_xlarge = 'i3.xlarge'
    i3_2xlarge = 'i3.2xlarge'
    i3_4xlarge = 'i3.4xlarge'
    i3_8xlarge = 'i3.8xlarge'
    i3_16xlarge = 'i3.16xlarge'
    i3_metal = 'i3.metal'
    i3en_large = 'i3en.large'
    i3en_xlarge = 'i3en.xlarge'
    i3en_2xlarge = 'i3en.2xlarge'
    i3en_3xlarge = 'i3en.3xlarge'
    i3en_6xlarge = 'i3en.6xlarge'
    i3en_12xlarge = 'i3en.12xlarge'
    i3en_24xlarge = 'i3en.24xlarge'
    i3en_metal = 'i3en.metal'
    im4gn_large = 'im4gn.large'
    im4gn_xlarge = 'im4gn.xlarge'
    im4gn_2xlarge = 'im4gn.2xlarge'
    im4gn_4xlarge = 'im4gn.4xlarge'
    im4gn_8xlarge = 'im4gn.8xlarge'
    im4gn_16xlarge = 'im4gn.16xlarge'
    inf1_xlarge = 'inf1.xlarge'
    inf1_2xlarge = 'inf1.2xlarge'
    inf1_6xlarge = 'inf1.6xlarge'
    inf1_24xlarge = 'inf1.24xlarge'
    is4gen_medium = 'is4gen.medium'
    is4gen_large = 'is4gen.large'
    is4gen_xlarge = 'is4gen.xlarge'
    is4gen_2xlarge = 'is4gen.2xlarge'
    is4gen_4xlarge = 'is4gen.4xlarge'
    is4gen_8xlarge = 'is4gen.8xlarge'
    m1_small = 'm1.small'
    m1_medium = 'm1.medium'
    m1_large = 'm1.large'
    m1_xlarge = 'm1.xlarge'
    m2_xlarge = 'm2.xlarge'
    m2_2xlarge = 'm2.2xlarge'
    m2_4xlarge = 'm2.4xlarge'
    m3_medium = 'm3.medium'
    m3_large = 'm3.large'
    m3_xlarge = 'm3.xlarge'
    m3_2xlarge = 'm3.2xlarge'
    m4_large = 'm4.large'
    m4_xlarge = 'm4.xlarge'
    m4_2xlarge = 'm4.2xlarge'
    m4_4xlarge = 'm4.4xlarge'
    m4_10xlarge = 'm4.10xlarge'
    m4_16xlarge = 'm4.16xlarge'
    m5_large = 'm5.large'
    m5_xlarge = 'm5.xlarge'
    m5_2xlarge = 'm5.2xlarge'
    m5_4xlarge = 'm5.4xlarge'
    m5_8xlarge = 'm5.8xlarge'
    m5_12xlarge = 'm5.12xlarge'
    m5_16xlarge = 'm5.16xlarge'
    m5_24xlarge = 'm5.24xlarge'
    m5_metal = 'm5.metal'
    m5a_large = 'm5a.large'
    m5a_xlarge = 'm5a.xlarge'
    m5a_2xlarge = 'm5a.2xlarge'
    m5a_4xlarge = 'm5a.4xlarge'
    m5a_8xlarge = 'm5a.8xlarge'
    m5a_12xlarge = 'm5a.12xlarge'
    m5a_16xlarge = 'm5a.16xlarge'
    m5a_24xlarge = 'm5a.24xlarge'
    m5ad_large = 'm5ad.large'
    m5ad_xlarge = 'm5ad.xlarge'
    m5ad_2xlarge = 'm5ad.2xlarge'
    m5ad_4xlarge = 'm5ad.4xlarge'
    m5ad_8xlarge = 'm5ad.8xlarge'
    m5ad_12xlarge = 'm5ad.12xlarge'
    m5ad_16xlarge = 'm5ad.16xlarge'
    m5ad_24xlarge = 'm5ad.24xlarge'
    m5d_large = 'm5d.large'
    m5d_xlarge = 'm5d.xlarge'
    m5d_2xlarge = 'm5d.2xlarge'
    m5d_4xlarge = 'm5d.4xlarge'
    m5d_8xlarge = 'm5d.8xlarge'
    m5d_12xlarge = 'm5d.12xlarge'
    m5d_16xlarge = 'm5d.16xlarge'
    m5d_24xlarge = 'm5d.24xlarge'
    m5d_metal = 'm5d.metal'
    m5dn_large = 'm5dn.large'
    m5dn_xlarge = 'm5dn.xlarge'
    m5dn_2xlarge = 'm5dn.2xlarge'
    m5dn_4xlarge = 'm5dn.4xlarge'
    m5dn_8xlarge = 'm5dn.8xlarge'
    m5dn_12xlarge = 'm5dn.12xlarge'
    m5dn_16xlarge = 'm5dn.16xlarge'
    m5dn_24xlarge = 'm5dn.24xlarge'
    m5dn_metal = 'm5dn.metal'
    m5n_large = 'm5n.large'
    m5n_xlarge = 'm5n.xlarge'
    m5n_2xlarge = 'm5n.2xlarge'
    m5n_4xlarge = 'm5n.4xlarge'
    m5n_8xlarge = 'm5n.8xlarge'
    m5n_12xlarge = 'm5n.12xlarge'
    m5n_16xlarge = 'm5n.16xlarge'
    m5n_24xlarge = 'm5n.24xlarge'
    m5n_metal = 'm5n.metal'
    m5zn_large = 'm5zn.large'
    m5zn_xlarge = 'm5zn.xlarge'
    m5zn_2xlarge = 'm5zn.2xlarge'
    m5zn_3xlarge = 'm5zn.3xlarge'
    m5zn_6xlarge = 'm5zn.6xlarge'
    m5zn_12xlarge = 'm5zn.12xlarge'
    m5zn_metal = 'm5zn.metal'
    m6a_large = 'm6a.large'
    m6a_xlarge = 'm6a.xlarge'
    m6a_2xlarge = 'm6a.2xlarge'
    m6a_4xlarge = 'm6a.4xlarge'
    m6a_8xlarge = 'm6a.8xlarge'
    m6a_12xlarge = 'm6a.12xlarge'
    m6a_16xlarge = 'm6a.16xlarge'
    m6a_24xlarge = 'm6a.24xlarge'
    m6a_32xlarge = 'm6a.32xlarge'
    m6a_48xlarge = 'm6a.48xlarge'
    m6g_metal = 'm6g.metal'
    m6g_medium = 'm6g.medium'
    m6g_large = 'm6g.large'
    m6g_xlarge = 'm6g.xlarge'
    m6g_2xlarge = 'm6g.2xlarge'
    m6g_4xlarge = 'm6g.4xlarge'
    m6g_8xlarge = 'm6g.8xlarge'
    m6g_12xlarge = 'm6g.12xlarge'
    m6g_16xlarge = 'm6g.16xlarge'
    m6gd_metal = 'm6gd.metal'
    m6gd_medium = 'm6gd.medium'
    m6gd_large = 'm6gd.large'
    m6gd_xlarge = 'm6gd.xlarge'
    m6gd_2xlarge = 'm6gd.2xlarge'
    m6gd_4xlarge = 'm6gd.4xlarge'
    m6gd_8xlarge = 'm6gd.8xlarge'
    m6gd_12xlarge = 'm6gd.12xlarge'
    m6gd_16xlarge = 'm6gd.16xlarge'
    m6i_large = 'm6i.large'
    m6i_xlarge = 'm6i.xlarge'
    m6i_2xlarge = 'm6i.2xlarge'
    m6i_4xlarge = 'm6i.4xlarge'
    m6i_8xlarge = 'm6i.8xlarge'
    m6i_12xlarge = 'm6i.12xlarge'
    m6i_16xlarge = 'm6i.16xlarge'
    m6i_24xlarge = 'm6i.24xlarge'
    m6i_32xlarge = 'm6i.32xlarge'
    m6i_metal = 'm6i.metal'
    mac1_metal = 'mac1.metal'
    p2_xlarge = 'p2.xlarge'
    p2_8xlarge = 'p2.8xlarge'
    p2_16xlarge = 'p2.16xlarge'
    p3_2xlarge = 'p3.2xlarge'
    p3_8xlarge = 'p3.8xlarge'
    p3_16xlarge = 'p3.16xlarge'
    p3dn_24xlarge = 'p3dn.24xlarge'
    p4d_24xlarge = 'p4d.24xlarge'
    r3_large = 'r3.large'
    r3_xlarge = 'r3.xlarge'
    r3_2xlarge = 'r3.2xlarge'
    r3_4xlarge = 'r3.4xlarge'
    r3_8xlarge = 'r3.8xlarge'
    r4_large = 'r4.large'
    r4_xlarge = 'r4.xlarge'
    r4_2xlarge = 'r4.2xlarge'
    r4_4xlarge = 'r4.4xlarge'
    r4_8xlarge = 'r4.8xlarge'
    r4_16xlarge = 'r4.16xlarge'
    r5_large = 'r5.large'
    r5_xlarge = 'r5.xlarge'
    r5_2xlarge = 'r5.2xlarge'
    r5_4xlarge = 'r5.4xlarge'
    r5_8xlarge = 'r5.8xlarge'
    r5_12xlarge = 'r5.12xlarge'
    r5_16xlarge = 'r5.16xlarge'
    r5_24xlarge = 'r5.24xlarge'
    r5_metal = 'r5.metal'
    r5a_large = 'r5a.large'
    r5a_xlarge = 'r5a.xlarge'
    r5a_2xlarge = 'r5a.2xlarge'
    r5a_4xlarge = 'r5a.4xlarge'
    r5a_8xlarge = 'r5a.8xlarge'
    r5a_12xlarge = 'r5a.12xlarge'
    r5a_16xlarge = 'r5a.16xlarge'
    r5a_24xlarge = 'r5a.24xlarge'
    r5ad_large = 'r5ad.large'
    r5ad_xlarge = 'r5ad.xlarge'
    r5ad_2xlarge = 'r5ad.2xlarge'
    r5ad_4xlarge = 'r5ad.4xlarge'
    r5ad_8xlarge = 'r5ad.8xlarge'
    r5ad_12xlarge = 'r5ad.12xlarge'
    r5ad_16xlarge = 'r5ad.16xlarge'
    r5ad_24xlarge = 'r5ad.24xlarge'
    r5b_large = 'r5b.large'
    r5b_xlarge = 'r5b.xlarge'
    r5b_2xlarge = 'r5b.2xlarge'
    r5b_4xlarge = 'r5b.4xlarge'
    r5b_8xlarge = 'r5b.8xlarge'
    r5b_12xlarge = 'r5b.12xlarge'
    r5b_16xlarge = 'r5b.16xlarge'
    r5b_24xlarge = 'r5b.24xlarge'
    r5b_metal = 'r5b.metal'
    r5d_large = 'r5d.large'
    r5d_xlarge = 'r5d.xlarge'
    r5d_2xlarge = 'r5d.2xlarge'
    r5d_4xlarge = 'r5d.4xlarge'
    r5d_8xlarge = 'r5d.8xlarge'
    r5d_12xlarge = 'r5d.12xlarge'
    r5d_16xlarge = 'r5d.16xlarge'
    r5d_24xlarge = 'r5d.24xlarge'
    r5d_metal = 'r5d.metal'
    r5dn_large = 'r5dn.large'
    r5dn_xlarge = 'r5dn.xlarge'
    r5dn_2xlarge = 'r5dn.2xlarge'
    r5dn_4xlarge = 'r5dn.4xlarge'
    r5dn_8xlarge = 'r5dn.8xlarge'
    r5dn_12xlarge = 'r5dn.12xlarge'
    r5dn_16xlarge = 'r5dn.16xlarge'
    r5dn_24xlarge = 'r5dn.24xlarge'
    r5dn_metal = 'r5dn.metal'
    r5n_large = 'r5n.large'
    r5n_xlarge = 'r5n.xlarge'
    r5n_2xlarge = 'r5n.2xlarge'
    r5n_4xlarge = 'r5n.4xlarge'
    r5n_8xlarge = 'r5n.8xlarge'
    r5n_12xlarge = 'r5n.12xlarge'
    r5n_16xlarge = 'r5n.16xlarge'
    r5n_24xlarge = 'r5n.24xlarge'
    r5n_metal = 'r5n.metal'
    r6g_medium = 'r6g.medium'
    r6g_large = 'r6g.large'
    r6g_xlarge = 'r6g.xlarge'
    r6g_2xlarge = 'r6g.2xlarge'
    r6g_4xlarge = 'r6g.4xlarge'
    r6g_8xlarge = 'r6g.8xlarge'
    r6g_12xlarge = 'r6g.12xlarge'
    r6g_16xlarge = 'r6g.16xlarge'
    r6g_metal = 'r6g.metal'
    r6gd_medium = 'r6gd.medium'
    r6gd_large = 'r6gd.large'
    r6gd_xlarge = 'r6gd.xlarge'
    r6gd_2xlarge = 'r6gd.2xlarge'
    r6gd_4xlarge = 'r6gd.4xlarge'
    r6gd_8xlarge = 'r6gd.8xlarge'
    r6gd_12xlarge = 'r6gd.12xlarge'
    r6gd_16xlarge = 'r6gd.16xlarge'
    r6gd_metal = 'r6gd.metal'
    r6i_large = 'r6i.large'
    r6i_xlarge = 'r6i.xlarge'
    r6i_2xlarge = 'r6i.2xlarge'
    r6i_4xlarge = 'r6i.4xlarge'
    r6i_8xlarge = 'r6i.8xlarge'
    r6i_12xlarge = 'r6i.12xlarge'
    r6i_16xlarge = 'r6i.16xlarge'
    r6i_24xlarge = 'r6i.24xlarge'
    r6i_32xlarge = 'r6i.32xlarge'
    r6i_metal = 'r6i.metal'
    t1_micro = 't1.micro'
    t2_nano = 't2.nano'
    t2_micro = 't2.micro'
    t2_small = 't2.small'
    t2_medium = 't2.medium'
    t2_large = 't2.large'
    t2_xlarge = 't2.xlarge'
    t2_2xlarge = 't2.2xlarge'
    t3_nano = 't3.nano'
    t3_micro = 't3.micro'
    t3_small = 't3.small'
    t3_medium = 't3.medium'
    t3_large = 't3.large'
    t3_xlarge = 't3.xlarge'
    t3_2xlarge = 't3.2xlarge'
    t3a_nano = 't3a.nano'
    t3a_micro = 't3a.micro'
    t3a_small = 't3a.small'
    t3a_medium = 't3a.medium'
    t3a_large = 't3a.large'
    t3a_xlarge = 't3a.xlarge'
    t3a_2xlarge = 't3a.2xlarge'
    t4g_nano = 't4g.nano'
    t4g_micro = 't4g.micro'
    t4g_small = 't4g.small'
    t4g_medium = 't4g.medium'
    t4g_large = 't4g.large'
    t4g_xlarge = 't4g.xlarge'
    t4g_2xlarge = 't4g.2xlarge'
    u_6tb1_56xlarge = 'u-6tb1.56xlarge'
    u_6tb1_112xlarge = 'u-6tb1.112xlarge'
    u_9tb1_112xlarge = 'u-9tb1.112xlarge'
    u_12tb1_112xlarge = 'u-12tb1.112xlarge'
    u_6tb1_metal = 'u-6tb1.metal'
    u_9tb1_metal = 'u-9tb1.metal'
    u_12tb1_metal = 'u-12tb1.metal'
    u_18tb1_metal = 'u-18tb1.metal'
    u_24tb1_metal = 'u-24tb1.metal'
    vt1_3xlarge = 'vt1.3xlarge'
    vt1_6xlarge = 'vt1.6xlarge'
    vt1_24xlarge = 'vt1.24xlarge'
    x1_16xlarge = 'x1.16xlarge'
    x1_32xlarge = 'x1.32xlarge'
    x1e_xlarge = 'x1e.xlarge'
    x1e_2xlarge = 'x1e.2xlarge'
    x1e_4xlarge = 'x1e.4xlarge'
    x1e_8xlarge = 'x1e.8xlarge'
    x1e_16xlarge = 'x1e.16xlarge'
    x1e_32xlarge = 'x1e.32xlarge'
    x2iezn_2xlarge = 'x2iezn.2xlarge'
    x2iezn_4xlarge = 'x2iezn.4xlarge'
    x2iezn_6xlarge = 'x2iezn.6xlarge'
    x2iezn_8xlarge = 'x2iezn.8xlarge'
    x2iezn_12xlarge = 'x2iezn.12xlarge'
    x2iezn_metal = 'x2iezn.metal'
    x2gd_medium = 'x2gd.medium'
    x2gd_large = 'x2gd.large'
    x2gd_xlarge = 'x2gd.xlarge'
    x2gd_2xlarge = 'x2gd.2xlarge'
    x2gd_4xlarge = 'x2gd.4xlarge'
    x2gd_8xlarge = 'x2gd.8xlarge'
    x2gd_12xlarge = 'x2gd.12xlarge'
    x2gd_16xlarge = 'x2gd.16xlarge'
    x2gd_metal = 'x2gd.metal'
    z1d_large = 'z1d.large'
    z1d_xlarge = 'z1d.xlarge'
    z1d_2xlarge = 'z1d.2xlarge'
    z1d_3xlarge = 'z1d.3xlarge'
    z1d_6xlarge = 'z1d.6xlarge'
    z1d_12xlarge = 'z1d.12xlarge'
    z1d_metal = 'z1d.metal'
    x2idn_16xlarge = 'x2idn.16xlarge'
    x2idn_24xlarge = 'x2idn.24xlarge'
    x2idn_32xlarge = 'x2idn.32xlarge'
    x2iedn_xlarge = 'x2iedn.xlarge'
    x2iedn_2xlarge = 'x2iedn.2xlarge'
    x2iedn_4xlarge = 'x2iedn.4xlarge'
    x2iedn_8xlarge = 'x2iedn.8xlarge'
    x2iedn_16xlarge = 'x2iedn.16xlarge'
    x2iedn_24xlarge = 'x2iedn.24xlarge'
    x2iedn_32xlarge = 'x2iedn.32xlarge'
    c6a_large = 'c6a.large'
    c6a_xlarge = 'c6a.xlarge'
    c6a_2xlarge = 'c6a.2xlarge'
    c6a_4xlarge = 'c6a.4xlarge'
    c6a_8xlarge = 'c6a.8xlarge'
    c6a_12xlarge = 'c6a.12xlarge'
    c6a_16xlarge = 'c6a.16xlarge'
    c6a_24xlarge = 'c6a.24xlarge'
    c6a_32xlarge = 'c6a.32xlarge'
    c6a_48xlarge = 'c6a.48xlarge'
    c6a_metal = 'c6a.metal'
    m6a_metal = 'm6a.metal'
    i4i_large = 'i4i.large'
    i4i_xlarge = 'i4i.xlarge'
    i4i_2xlarge = 'i4i.2xlarge'
    i4i_4xlarge = 'i4i.4xlarge'
    i4i_8xlarge = 'i4i.8xlarge'
    i4i_16xlarge = 'i4i.16xlarge'
    i4i_32xlarge = 'i4i.32xlarge'
    i4i_metal = 'i4i.metal'
    x2idn_metal = 'x2idn.metal'
    x2iedn_metal = 'x2iedn.metal'
    c7g_medium = 'c7g.medium'
    c7g_large = 'c7g.large'
    c7g_xlarge = 'c7g.xlarge'
    c7g_2xlarge = 'c7g.2xlarge'
    c7g_4xlarge = 'c7g.4xlarge'
    c7g_8xlarge = 'c7g.8xlarge'
    c7g_12xlarge = 'c7g.12xlarge'
    c7g_16xlarge = 'c7g.16xlarge'
    mac2_metal = 'mac2.metal'
    c6id_large = 'c6id.large'
    c6id_xlarge = 'c6id.xlarge'
    c6id_2xlarge = 'c6id.2xlarge'
    c6id_4xlarge = 'c6id.4xlarge'
    c6id_8xlarge = 'c6id.8xlarge'
    c6id_12xlarge = 'c6id.12xlarge'
    c6id_16xlarge = 'c6id.16xlarge'
    c6id_24xlarge = 'c6id.24xlarge'
    c6id_32xlarge = 'c6id.32xlarge'
    c6id_metal = 'c6id.metal'
    m6id_large = 'm6id.large'
    m6id_xlarge = 'm6id.xlarge'
    m6id_2xlarge = 'm6id.2xlarge'
    m6id_4xlarge = 'm6id.4xlarge'
    m6id_8xlarge = 'm6id.8xlarge'
    m6id_12xlarge = 'm6id.12xlarge'
    m6id_16xlarge = 'm6id.16xlarge'
    m6id_24xlarge = 'm6id.24xlarge'
    m6id_32xlarge = 'm6id.32xlarge'
    m6id_metal = 'm6id.metal'
    r6id_large = 'r6id.large'
    r6id_xlarge = 'r6id.xlarge'
    r6id_2xlarge = 'r6id.2xlarge'
    r6id_4xlarge = 'r6id.4xlarge'
    r6id_8xlarge = 'r6id.8xlarge'
    r6id_12xlarge = 'r6id.12xlarge'
    r6id_16xlarge = 'r6id.16xlarge'
    r6id_24xlarge = 'r6id.24xlarge'
    r6id_32xlarge = 'r6id.32xlarge'
    r6id_metal = 'r6id.metal'
    r6a_large = 'r6a.large'
    r6a_xlarge = 'r6a.xlarge'
    r6a_2xlarge = 'r6a.2xlarge'
    r6a_4xlarge = 'r6a.4xlarge'
    r6a_8xlarge = 'r6a.8xlarge'
    r6a_12xlarge = 'r6a.12xlarge'
    r6a_16xlarge = 'r6a.16xlarge'
    r6a_24xlarge = 'r6a.24xlarge'
    r6a_32xlarge = 'r6a.32xlarge'
    r6a_48xlarge = 'r6a.48xlarge'
    r6a_metal = 'r6a.metal'
    p4de_24xlarge = 'p4de.24xlarge'
    u_3tb1_56xlarge = 'u-3tb1.56xlarge'
    u_18tb1_112xlarge = 'u-18tb1.112xlarge'
    u_24tb1_112xlarge = 'u-24tb1.112xlarge'
    trn1_2xlarge = 'trn1.2xlarge'
    trn1_32xlarge = 'trn1.32xlarge'
    hpc6id_32xlarge = 'hpc6id.32xlarge'
    c6in_large = 'c6in.large'
    c6in_xlarge = 'c6in.xlarge'
    c6in_2xlarge = 'c6in.2xlarge'
    c6in_4xlarge = 'c6in.4xlarge'
    c6in_8xlarge = 'c6in.8xlarge'
    c6in_12xlarge = 'c6in.12xlarge'
    c6in_16xlarge = 'c6in.16xlarge'
    c6in_24xlarge = 'c6in.24xlarge'
    c6in_32xlarge = 'c6in.32xlarge'
    m6in_large = 'm6in.large'
    m6in_xlarge = 'm6in.xlarge'
    m6in_2xlarge = 'm6in.2xlarge'
    m6in_4xlarge = 'm6in.4xlarge'
    m6in_8xlarge = 'm6in.8xlarge'
    m6in_12xlarge = 'm6in.12xlarge'
    m6in_16xlarge = 'm6in.16xlarge'
    m6in_24xlarge = 'm6in.24xlarge'
    m6in_32xlarge = 'm6in.32xlarge'
    m6idn_large = 'm6idn.large'
    m6idn_xlarge = 'm6idn.xlarge'
    m6idn_2xlarge = 'm6idn.2xlarge'
    m6idn_4xlarge = 'm6idn.4xlarge'
    m6idn_8xlarge = 'm6idn.8xlarge'
    m6idn_12xlarge = 'm6idn.12xlarge'
    m6idn_16xlarge = 'm6idn.16xlarge'
    m6idn_24xlarge = 'm6idn.24xlarge'
    m6idn_32xlarge = 'm6idn.32xlarge'
    r6in_large = 'r6in.large'
    r6in_xlarge = 'r6in.xlarge'
    r6in_2xlarge = 'r6in.2xlarge'
    r6in_4xlarge = 'r6in.4xlarge'
    r6in_8xlarge = 'r6in.8xlarge'
    r6in_12xlarge = 'r6in.12xlarge'
    r6in_16xlarge = 'r6in.16xlarge'
    r6in_24xlarge = 'r6in.24xlarge'
    r6in_32xlarge = 'r6in.32xlarge'
    r6idn_large = 'r6idn.large'
    r6idn_xlarge = 'r6idn.xlarge'
    r6idn_2xlarge = 'r6idn.2xlarge'
    r6idn_4xlarge = 'r6idn.4xlarge'
    r6idn_8xlarge = 'r6idn.8xlarge'
    r6idn_12xlarge = 'r6idn.12xlarge'
    r6idn_16xlarge = 'r6idn.16xlarge'
    r6idn_24xlarge = 'r6idn.24xlarge'
    r6idn_32xlarge = 'r6idn.32xlarge'
    c7g_metal = 'c7g.metal'
    m7g_medium = 'm7g.medium'
    m7g_large = 'm7g.large'
    m7g_xlarge = 'm7g.xlarge'
    m7g_2xlarge = 'm7g.2xlarge'
    m7g_4xlarge = 'm7g.4xlarge'
    m7g_8xlarge = 'm7g.8xlarge'
    m7g_12xlarge = 'm7g.12xlarge'
    m7g_16xlarge = 'm7g.16xlarge'
    m7g_metal = 'm7g.metal'
    r7g_medium = 'r7g.medium'
    r7g_large = 'r7g.large'
    r7g_xlarge = 'r7g.xlarge'
    r7g_2xlarge = 'r7g.2xlarge'
    r7g_4xlarge = 'r7g.4xlarge'
    r7g_8xlarge = 'r7g.8xlarge'
    r7g_12xlarge = 'r7g.12xlarge'
    r7g_16xlarge = 'r7g.16xlarge'
    r7g_metal = 'r7g.metal'
    c6in_metal = 'c6in.metal'
    m6in_metal = 'm6in.metal'
    m6idn_metal = 'm6idn.metal'
    r6in_metal = 'r6in.metal'
    r6idn_metal = 'r6idn.metal'


class ProductDescription(Enum):
    Linux_UNIX = 'Linux/UNIX'
    Linux_UNIX__Amazon_VPC_ = 'Linux/UNIX (Amazon VPC)'
    Windows = 'Windows'
    Windows__Amazon_VPC_ = 'Windows (Amazon VPC)'


class Action1212(Enum):
    DescribeReservedInstancesOfferings = 'DescribeReservedInstancesOfferings'


class ReservedInstancesOfferingId1(RootModel[List[ReservedInstancesOfferingId]]):
    root: List[ReservedInstancesOfferingId]


class Action1216(Enum):
    DescribeRouteTables = 'DescribeRouteTables'


class FirstSlotStartTimeRange(BaseModel):
    EarliestTime: DateTime
    LatestTime: DateTime


class Recurrence(BaseModel):
    Frequency: Optional[String] = None
    Interval: Optional[Integer] = None
    OccurrenceDays: Optional[OccurrenceDayRequestSet] = None
    OccurrenceRelativeToEnd: Optional[Boolean] = None
    OccurrenceUnit: Optional[String] = None


class Action1220(Enum):
    DescribeScheduledInstanceAvailability = 'DescribeScheduledInstanceAvailability'


class SlotStartTimeRange(BaseModel):
    EarliestTime: Optional[DateTime] = None
    LatestTime: Optional[DateTime] = None


class Action1224(Enum):
    DescribeScheduledInstances = 'DescribeScheduledInstances'


class ScheduledInstanceId1(RootModel[List[ScheduledInstanceId]]):
    root: List[ScheduledInstanceId]


class Action1228(Enum):
    DescribeSecurityGroupReferences = 'DescribeSecurityGroupReferences'


class GroupId1(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class Action1232(Enum):
    DescribeSecurityGroupRules = 'DescribeSecurityGroupRules'


class SecurityGroupRuleId1(RootModel[List[String]]):
    root: List[String]


class Action1236(Enum):
    DescribeSecurityGroups = 'DescribeSecurityGroups'


class GroupName1(RootModel[List[SecurityGroupName]]):
    root: List[SecurityGroupName]


class Attribute10(Enum):
    productCodes = 'productCodes'
    createVolumePermission = 'createVolumePermission'


class Action1240(Enum):
    DescribeSnapshotAttribute = 'DescribeSnapshotAttribute'


class Action1244(Enum):
    DescribeSnapshotTierStatus = 'DescribeSnapshotTierStatus'


class Action1248(Enum):
    DescribeSnapshots = 'DescribeSnapshots'


class RestorableBy(RootModel[List[String]]):
    root: List[String]


class SnapshotId1(RootModel[List[SnapshotId]]):
    root: List[SnapshotId]


class Action1252(Enum):
    DescribeSpotDatafeedSubscription = 'DescribeSpotDatafeedSubscription'


class Action1256(Enum):
    DescribeSpotFleetInstances = 'DescribeSpotFleetInstances'


class EventType3(Enum):
    instanceChange = 'instanceChange'
    fleetRequestChange = 'fleetRequestChange'
    error = 'error'
    information = 'information'


class Action1260(Enum):
    DescribeSpotFleetRequestHistory = 'DescribeSpotFleetRequestHistory'


class Action1264(Enum):
    DescribeSpotFleetRequests = 'DescribeSpotFleetRequests'


class Action1268(Enum):
    DescribeSpotInstanceRequests = 'DescribeSpotInstanceRequests'


class Action1272(Enum):
    DescribeSpotPriceHistory = 'DescribeSpotPriceHistory'


class InstanceType4(RootModel[List[InstanceType]]):
    root: List[InstanceType]


class ProductDescription2(RootModel[List[String]]):
    root: List[String]


class Action1276(Enum):
    DescribeStaleSecurityGroups = 'DescribeStaleSecurityGroups'


class Action1280(Enum):
    DescribeStoreImageTasks = 'DescribeStoreImageTasks'


class Action1284(Enum):
    DescribeSubnets = 'DescribeSubnets'


class Action1288(Enum):
    DescribeTags = 'DescribeTags'


class Action1292(Enum):
    DescribeTrafficMirrorFilters = 'DescribeTrafficMirrorFilters'


class TrafficMirrorFilterId1(RootModel[List[TrafficMirrorFilterId]]):
    root: List[TrafficMirrorFilterId]


class Action1296(Enum):
    DescribeTrafficMirrorSessions = 'DescribeTrafficMirrorSessions'


class TrafficMirrorSessionId1(RootModel[List[TrafficMirrorSessionId]]):
    root: List[TrafficMirrorSessionId]


class Action1300(Enum):
    DescribeTrafficMirrorTargets = 'DescribeTrafficMirrorTargets'


class TrafficMirrorTargetId1(RootModel[List[TrafficMirrorTargetId]]):
    root: List[TrafficMirrorTargetId]


class Action1304(Enum):
    DescribeTransitGatewayAttachments = 'DescribeTransitGatewayAttachments'


class TransitGatewayAttachmentIds(RootModel[List[TransitGatewayAttachmentId]]):
    root: List[TransitGatewayAttachmentId]


class Action1308(Enum):
    DescribeTransitGatewayConnectPeers = 'DescribeTransitGatewayConnectPeers'


class TransitGatewayConnectPeerIds(RootModel[List[TransitGatewayConnectPeerId]]):
    root: List[TransitGatewayConnectPeerId]


class Action1312(Enum):
    DescribeTransitGatewayConnects = 'DescribeTransitGatewayConnects'


class Action1316(Enum):
    DescribeTransitGatewayMulticastDomains = 'DescribeTransitGatewayMulticastDomains'


class TransitGatewayMulticastDomainIds(
    RootModel[List[TransitGatewayMulticastDomainId]]
):
    root: List[TransitGatewayMulticastDomainId]


class Action1320(Enum):
    DescribeTransitGatewayPeeringAttachments = (
        'DescribeTransitGatewayPeeringAttachments'
    )


class Action1324(Enum):
    DescribeTransitGatewayPolicyTables = 'DescribeTransitGatewayPolicyTables'


class TransitGatewayPolicyTableIds(RootModel[List[TransitGatewayPolicyTableId]]):
    root: List[TransitGatewayPolicyTableId]


class Action1328(Enum):
    DescribeTransitGatewayRouteTableAnnouncements = (
        'DescribeTransitGatewayRouteTableAnnouncements'
    )


class TransitGatewayRouteTableAnnouncementIds(
    RootModel[List[TransitGatewayRouteTableAnnouncementId]]
):
    root: List[TransitGatewayRouteTableAnnouncementId]


class Action1332(Enum):
    DescribeTransitGatewayRouteTables = 'DescribeTransitGatewayRouteTables'


class TransitGatewayRouteTableIds(RootModel[List[TransitGatewayRouteTableId]]):
    root: List[TransitGatewayRouteTableId]


class Action1336(Enum):
    DescribeTransitGatewayVpcAttachments = 'DescribeTransitGatewayVpcAttachments'


class Action1340(Enum):
    DescribeTransitGateways = 'DescribeTransitGateways'


class TransitGatewayIds(RootModel[List[TransitGatewayId]]):
    root: List[TransitGatewayId]


class Action1344(Enum):
    DescribeTrunkInterfaceAssociations = 'DescribeTrunkInterfaceAssociations'


class AssociationId1(RootModel[List[TrunkInterfaceAssociationId]]):
    root: List[TrunkInterfaceAssociationId]


class Action1348(Enum):
    DescribeVerifiedAccessEndpoints = 'DescribeVerifiedAccessEndpoints'


class VerifiedAccessEndpointId1(RootModel[List[VerifiedAccessEndpointId]]):
    root: List[VerifiedAccessEndpointId]


class Action1352(Enum):
    DescribeVerifiedAccessGroups = 'DescribeVerifiedAccessGroups'


class VerifiedAccessGroupId1(RootModel[List[VerifiedAccessGroupId]]):
    root: List[VerifiedAccessGroupId]


class Action1356(Enum):
    DescribeVerifiedAccessInstanceLoggingConfigurations = (
        'DescribeVerifiedAccessInstanceLoggingConfigurations'
    )


class VerifiedAccessInstanceId1(RootModel[List[VerifiedAccessInstanceId]]):
    root: List[VerifiedAccessInstanceId]


class Action1360(Enum):
    DescribeVerifiedAccessInstances = 'DescribeVerifiedAccessInstances'


class Action1364(Enum):
    DescribeVerifiedAccessTrustProviders = 'DescribeVerifiedAccessTrustProviders'


class VerifiedAccessTrustProviderId1(RootModel[List[VerifiedAccessTrustProviderId]]):
    root: List[VerifiedAccessTrustProviderId]


class Attribute12(Enum):
    autoEnableIO = 'autoEnableIO'
    productCodes = 'productCodes'


class Action1368(Enum):
    DescribeVolumeAttribute = 'DescribeVolumeAttribute'


class Action1372(Enum):
    DescribeVolumeStatus = 'DescribeVolumeStatus'


class VolumeId1(RootModel[List[VolumeId]]):
    root: List[VolumeId]


class Action1376(Enum):
    DescribeVolumes = 'DescribeVolumes'


class Action1380(Enum):
    DescribeVolumesModifications = 'DescribeVolumesModifications'


class Attribute14(Enum):
    enableDnsSupport = 'enableDnsSupport'
    enableDnsHostnames = 'enableDnsHostnames'
    enableNetworkAddressUsageMetrics = 'enableNetworkAddressUsageMetrics'


class Action1384(Enum):
    DescribeVpcAttribute = 'DescribeVpcAttribute'


class Action1388(Enum):
    DescribeVpcClassicLink = 'DescribeVpcClassicLink'


class VpcId1(RootModel[List[VpcId]]):
    root: List[VpcId]


class Action1392(Enum):
    DescribeVpcClassicLinkDnsSupport = 'DescribeVpcClassicLinkDnsSupport'


class VpcIds(RootModel[List[VpcId]]):
    root: List[VpcId]


class Action1396(Enum):
    DescribeVpcEndpointConnectionNotifications = (
        'DescribeVpcEndpointConnectionNotifications'
    )


class Action1400(Enum):
    DescribeVpcEndpointConnections = 'DescribeVpcEndpointConnections'


class Action1404(Enum):
    DescribeVpcEndpointServiceConfigurations = (
        'DescribeVpcEndpointServiceConfigurations'
    )


class Action1408(Enum):
    DescribeVpcEndpointServicePermissions = 'DescribeVpcEndpointServicePermissions'


class Action1412(Enum):
    DescribeVpcEndpointServices = 'DescribeVpcEndpointServices'


class ServiceName(RootModel[List[String]]):
    root: List[String]


class Action1416(Enum):
    DescribeVpcEndpoints = 'DescribeVpcEndpoints'


class Action1420(Enum):
    DescribeVpcPeeringConnections = 'DescribeVpcPeeringConnections'


class VpcPeeringConnectionId1(RootModel[List[VpcPeeringConnectionId]]):
    root: List[VpcPeeringConnectionId]


class Action1424(Enum):
    DescribeVpcs = 'DescribeVpcs'


class Action1428(Enum):
    DescribeVpnConnections = 'DescribeVpnConnections'


class VpnConnectionId1(RootModel[List[VpnConnectionId]]):
    root: List[VpnConnectionId]


class Action1432(Enum):
    DescribeVpnGateways = 'DescribeVpnGateways'


class VpnGatewayId1(RootModel[List[VpnGatewayId]]):
    root: List[VpnGatewayId]


class Action1436(Enum):
    DetachClassicLinkVpc = 'DetachClassicLinkVpc'


class Action1440(Enum):
    DetachInternetGateway = 'DetachInternetGateway'


class Action1444(Enum):
    DetachNetworkInterface = 'DetachNetworkInterface'


class Action1448(Enum):
    DetachVerifiedAccessTrustProvider = 'DetachVerifiedAccessTrustProvider'


class Action1452(Enum):
    DetachVolume = 'DetachVolume'


class Action1456(Enum):
    DetachVpnGateway = 'DetachVpnGateway'


class Action1460(Enum):
    DisableAddressTransfer = 'DisableAddressTransfer'


class Metric(Enum):
    aggregate_latency = 'aggregate-latency'


class Statistic(Enum):
    p50 = 'p50'


class Action1464(Enum):
    DisableAwsNetworkPerformanceMetricSubscription = (
        'DisableAwsNetworkPerformanceMetricSubscription'
    )


class Action1468(Enum):
    DisableEbsEncryptionByDefault = 'DisableEbsEncryptionByDefault'


class Action1472(Enum):
    DisableFastLaunch = 'DisableFastLaunch'


class Action1476(Enum):
    DisableFastSnapshotRestores = 'DisableFastSnapshotRestores'


class AvailabilityZone1(RootModel[List[String]]):
    root: List[String]


class SourceSnapshotId(RootModel[List[SnapshotId]]):
    root: List[SnapshotId]


class Action1480(Enum):
    DisableImageDeprecation = 'DisableImageDeprecation'


class Action1484(Enum):
    DisableIpamOrganizationAdminAccount = 'DisableIpamOrganizationAdminAccount'


class Action1488(Enum):
    DisableSerialConsoleAccess = 'DisableSerialConsoleAccess'


class Action1492(Enum):
    DisableTransitGatewayRouteTablePropagation = (
        'DisableTransitGatewayRouteTablePropagation'
    )


class Action1496(Enum):
    DisableVgwRoutePropagation = 'DisableVgwRoutePropagation'


class Action1500(Enum):
    DisableVpcClassicLink = 'DisableVpcClassicLink'


class Action1504(Enum):
    DisableVpcClassicLinkDnsSupport = 'DisableVpcClassicLinkDnsSupport'


class Action1508(Enum):
    DisassociateAddress = 'DisassociateAddress'


class Action1512(Enum):
    DisassociateClientVpnTargetNetwork = 'DisassociateClientVpnTargetNetwork'


class Action1516(Enum):
    DisassociateEnclaveCertificateIamRole = 'DisassociateEnclaveCertificateIamRole'


class Action1520(Enum):
    DisassociateIamInstanceProfile = 'DisassociateIamInstanceProfile'


class Action1524(Enum):
    DisassociateInstanceEventWindow = 'DisassociateInstanceEventWindow'


class Action1528(Enum):
    DisassociateIpamResourceDiscovery = 'DisassociateIpamResourceDiscovery'


class Action1532(Enum):
    DisassociateNatGatewayAddress = 'DisassociateNatGatewayAddress'


class AssociationId2(RootModel[List[ElasticIpAssociationId]]):
    root: List[ElasticIpAssociationId]


class Action1536(Enum):
    DisassociateRouteTable = 'DisassociateRouteTable'


class Action1540(Enum):
    DisassociateSubnetCidrBlock = 'DisassociateSubnetCidrBlock'


class Action1544(Enum):
    DisassociateTransitGatewayMulticastDomain = (
        'DisassociateTransitGatewayMulticastDomain'
    )


class Action1548(Enum):
    DisassociateTransitGatewayPolicyTable = 'DisassociateTransitGatewayPolicyTable'


class Action1552(Enum):
    DisassociateTransitGatewayRouteTable = 'DisassociateTransitGatewayRouteTable'


class Action1556(Enum):
    DisassociateTrunkInterface = 'DisassociateTrunkInterface'


class Action1560(Enum):
    DisassociateVpcCidrBlock = 'DisassociateVpcCidrBlock'


class Action1564(Enum):
    EnableAddressTransfer = 'EnableAddressTransfer'


class Action1568(Enum):
    EnableAwsNetworkPerformanceMetricSubscription = (
        'EnableAwsNetworkPerformanceMetricSubscription'
    )


class Action1572(Enum):
    EnableEbsEncryptionByDefault = 'EnableEbsEncryptionByDefault'


class SnapshotConfiguration(BaseModel):
    TargetResourceCount: Optional[Integer] = None


class LaunchTemplate1(BaseModel):
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName: Optional[String] = None
    Version: String


class Action1576(Enum):
    EnableFastLaunch = 'EnableFastLaunch'


class Action1580(Enum):
    EnableFastSnapshotRestores = 'EnableFastSnapshotRestores'


class Action1584(Enum):
    EnableImageDeprecation = 'EnableImageDeprecation'


class Action1588(Enum):
    EnableIpamOrganizationAdminAccount = 'EnableIpamOrganizationAdminAccount'


class Action1592(Enum):
    EnableReachabilityAnalyzerOrganizationSharing = (
        'EnableReachabilityAnalyzerOrganizationSharing'
    )


class Action1596(Enum):
    EnableSerialConsoleAccess = 'EnableSerialConsoleAccess'


class Action1600(Enum):
    EnableTransitGatewayRouteTablePropagation = (
        'EnableTransitGatewayRouteTablePropagation'
    )


class Action1604(Enum):
    EnableVgwRoutePropagation = 'EnableVgwRoutePropagation'


class Action1608(Enum):
    EnableVolumeIO = 'EnableVolumeIO'


class Action1612(Enum):
    EnableVpcClassicLink = 'EnableVpcClassicLink'


class Action1616(Enum):
    EnableVpcClassicLinkDnsSupport = 'EnableVpcClassicLinkDnsSupport'


class Action1620(Enum):
    ExportClientVpnClientCertificateRevocationList = (
        'ExportClientVpnClientCertificateRevocationList'
    )


class Action1624(Enum):
    ExportClientVpnClientConfiguration = 'ExportClientVpnClientConfiguration'


class S3ExportLocation(BaseModel):
    S3Bucket: String
    S3Prefix: Optional[String] = None


class Action1628(Enum):
    ExportImage = 'ExportImage'


class Action1632(Enum):
    ExportTransitGatewayRoutes = 'ExportTransitGatewayRoutes'


class Action1636(Enum):
    GetAssociatedEnclaveCertificateIamRoles = 'GetAssociatedEnclaveCertificateIamRoles'


class Action1640(Enum):
    GetAssociatedIpv6PoolCidrs = 'GetAssociatedIpv6PoolCidrs'


class Action1644(Enum):
    GetAwsNetworkPerformanceData = 'GetAwsNetworkPerformanceData'


class Action1648(Enum):
    GetCapacityReservationUsage = 'GetCapacityReservationUsage'


class Action1652(Enum):
    GetCoipPoolUsage = 'GetCoipPoolUsage'


class Action1656(Enum):
    GetConsoleOutput = 'GetConsoleOutput'


class Action1660(Enum):
    GetConsoleScreenshot = 'GetConsoleScreenshot'


class InstanceFamily(Enum):
    t2 = 't2'
    t3 = 't3'
    t3a = 't3a'
    t4g = 't4g'


class Action1664(Enum):
    GetDefaultCreditSpecification = 'GetDefaultCreditSpecification'


class Action1668(Enum):
    GetEbsDefaultKmsKeyId = 'GetEbsDefaultKmsKeyId'


class Action1672(Enum):
    GetEbsEncryptionByDefault = 'GetEbsEncryptionByDefault'


class Action1676(Enum):
    GetFlowLogsIntegrationTemplate = 'GetFlowLogsIntegrationTemplate'


class Action1680(Enum):
    GetGroupsForCapacityReservation = 'GetGroupsForCapacityReservation'


class Action1684(Enum):
    GetHostReservationPurchasePreview = 'GetHostReservationPurchasePreview'


class HostIdSet(RootModel[List[DedicatedHostId]]):
    root: List[DedicatedHostId]


class Action1688(Enum):
    GetInstanceTypesFromInstanceRequirements = (
        'GetInstanceTypesFromInstanceRequirements'
    )


class ArchitectureType1(RootModel[List[ArchitectureType]]):
    root: List[ArchitectureType] = Field(..., max_length=3, min_length=0)


class VirtualizationType1(RootModel[List[VirtualizationType]]):
    root: List[VirtualizationType] = Field(..., max_length=2, min_length=0)


class Action1692(Enum):
    GetInstanceUefiData = 'GetInstanceUefiData'


class Action1696(Enum):
    GetIpamAddressHistory = 'GetIpamAddressHistory'


class Action1700(Enum):
    GetIpamDiscoveredAccounts = 'GetIpamDiscoveredAccounts'


class Action1704(Enum):
    GetIpamDiscoveredResourceCidrs = 'GetIpamDiscoveredResourceCidrs'


class Action1708(Enum):
    GetIpamPoolAllocations = 'GetIpamPoolAllocations'


class Action1712(Enum):
    GetIpamPoolCidrs = 'GetIpamPoolCidrs'


class ResourceType3(Enum):
    vpc = 'vpc'
    subnet = 'subnet'
    eip = 'eip'
    public_ipv4_pool = 'public-ipv4-pool'
    ipv6_pool = 'ipv6-pool'


class ResourceTag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class Action1716(Enum):
    GetIpamResourceCidrs = 'GetIpamResourceCidrs'


class Action1720(Enum):
    GetLaunchTemplateData = 'GetLaunchTemplateData'


class Action1724(Enum):
    GetManagedPrefixListAssociations = 'GetManagedPrefixListAssociations'


class Action1728(Enum):
    GetManagedPrefixListEntries = 'GetManagedPrefixListEntries'


class Action1732(Enum):
    GetNetworkInsightsAccessScopeAnalysisFindings = (
        'GetNetworkInsightsAccessScopeAnalysisFindings'
    )


class Action1736(Enum):
    GetNetworkInsightsAccessScopeContent = 'GetNetworkInsightsAccessScopeContent'


class Action1740(Enum):
    GetPasswordData = 'GetPasswordData'


class Action1744(Enum):
    GetReservedInstancesExchangeQuote = 'GetReservedInstancesExchangeQuote'


class Action1748(Enum):
    GetSerialConsoleAccessStatus = 'GetSerialConsoleAccessStatus'


class Action1752(Enum):
    GetSpotPlacementScores = 'GetSpotPlacementScores'


class InstanceType5(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=1000, min_length=0)


class RegionName1(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=10, min_length=0)


class Action1756(Enum):
    GetSubnetCidrReservations = 'GetSubnetCidrReservations'


class Action1760(Enum):
    GetTransitGatewayAttachmentPropagations = 'GetTransitGatewayAttachmentPropagations'


class Action1764(Enum):
    GetTransitGatewayMulticastDomainAssociations = (
        'GetTransitGatewayMulticastDomainAssociations'
    )


class Action1768(Enum):
    GetTransitGatewayPolicyTableAssociations = (
        'GetTransitGatewayPolicyTableAssociations'
    )


class Action1772(Enum):
    GetTransitGatewayPolicyTableEntries = 'GetTransitGatewayPolicyTableEntries'


class Action1776(Enum):
    GetTransitGatewayPrefixListReferences = 'GetTransitGatewayPrefixListReferences'


class Action1780(Enum):
    GetTransitGatewayRouteTableAssociations = 'GetTransitGatewayRouteTableAssociations'


class Action1784(Enum):
    GetTransitGatewayRouteTablePropagations = 'GetTransitGatewayRouteTablePropagations'


class Action1788(Enum):
    GetVerifiedAccessEndpointPolicy = 'GetVerifiedAccessEndpointPolicy'


class Action1792(Enum):
    GetVerifiedAccessGroupPolicy = 'GetVerifiedAccessGroupPolicy'


class Action1796(Enum):
    GetVpnConnectionDeviceSampleConfiguration = (
        'GetVpnConnectionDeviceSampleConfiguration'
    )


class Action1800(Enum):
    GetVpnConnectionDeviceTypes = 'GetVpnConnectionDeviceTypes'


class Action1804(Enum):
    GetVpnTunnelReplacementStatus = 'GetVpnTunnelReplacementStatus'


class Action1808(Enum):
    ImportClientVpnClientCertificateRevocationList = (
        'ImportClientVpnClientCertificateRevocationList'
    )


class ClientData(BaseModel):
    Comment: Optional[String] = None
    UploadEnd: Optional[DateTime] = None
    UploadSize: Optional[Double] = None
    UploadStart: Optional[DateTime] = None


class BootMode(Enum):
    legacy_bios = 'legacy-bios'
    uefi = 'uefi'
    uefi_preferred = 'uefi-preferred'


class Action1812(Enum):
    ImportImage = 'ImportImage'


class Platform(Enum):
    Windows = 'Windows'


class Action1816(Enum):
    ImportInstance = 'ImportInstance'


class Action1820(Enum):
    ImportKeyPair = 'ImportKeyPair'


class DiskContainer1(BaseModel):
    Description: Optional[String] = None
    Format: Optional[String] = None
    Url: Optional[String] = None
    UserBucket_1: Optional[UserBucket] = Field(None, alias='UserBucket')


class Action1824(Enum):
    ImportSnapshot = 'ImportSnapshot'


class Image1(BaseModel):
    Bytes: Long
    Format: DiskImageFormat
    ImportManifestUrl_1: ImportManifestUrl = Field(..., alias='ImportManifestUrl')


class Volume1(BaseModel):
    Size: Long


class Action1828(Enum):
    ImportVolume = 'ImportVolume'


class Action1832(Enum):
    ListImagesInRecycleBin = 'ListImagesInRecycleBin'


class Action1836(Enum):
    ListSnapshotsInRecycleBin = 'ListSnapshotsInRecycleBin'


class Action1840(Enum):
    ModifyAddressAttribute = 'ModifyAddressAttribute'


class OptInStatus(Enum):
    opted_in = 'opted-in'
    not_opted_in = 'not-opted-in'


class Action1844(Enum):
    ModifyAvailabilityZoneGroup = 'ModifyAvailabilityZoneGroup'


class Action1848(Enum):
    ModifyCapacityReservation = 'ModifyCapacityReservation'


class Action1852(Enum):
    ModifyCapacityReservationFleet = 'ModifyCapacityReservationFleet'


class DnsServers1(BaseModel):
    CustomDnsServers: Optional[ValueStringList] = None
    Enabled: Optional[Boolean] = None


class Action1856(Enum):
    ModifyClientVpnEndpoint = 'ModifyClientVpnEndpoint'


class Action1860(Enum):
    ModifyDefaultCreditSpecification = 'ModifyDefaultCreditSpecification'


class Action1864(Enum):
    ModifyEbsDefaultKmsKeyId = 'ModifyEbsDefaultKmsKeyId'


class Action1868(Enum):
    ModifyFleet = 'ModifyFleet'


class Attribute16(Enum):
    description = 'description'
    name = 'name'
    loadPermission = 'loadPermission'
    productCodes = 'productCodes'


class Action1872(Enum):
    ModifyFpgaImageAttribute = 'ModifyFpgaImageAttribute'


class UserId(RootModel[List[String]]):
    root: List[String]


class UserGroup(RootModel[List[String]]):
    root: List[String]


class ProductCode1(RootModel[List[String]]):
    root: List[String]


class Action1876(Enum):
    ModifyHosts = 'ModifyHosts'


class Action1880(Enum):
    ModifyIdFormat = 'ModifyIdFormat'


class Action1884(Enum):
    ModifyIdentityIdFormat = 'ModifyIdentityIdFormat'


class Description(BaseModel):
    Value: Optional[String] = None


class ImdsSupport(BaseModel):
    Value: Optional[String] = None


class Action1888(Enum):
    ModifyImageAttribute = 'ModifyImageAttribute'


class OrganizationArn(RootModel[List[String]]):
    root: List[String]


class OrganizationalUnitArn(RootModel[List[String]]):
    root: List[String]


class SourceDestCheck(BaseModel):
    Value: Optional[Boolean] = None


class Attribute18(Enum):
    instanceType = 'instanceType'
    kernel = 'kernel'
    ramdisk = 'ramdisk'
    userData = 'userData'
    disableApiTermination = 'disableApiTermination'
    instanceInitiatedShutdownBehavior = 'instanceInitiatedShutdownBehavior'
    rootDeviceName = 'rootDeviceName'
    blockDeviceMapping = 'blockDeviceMapping'
    productCodes = 'productCodes'
    sourceDestCheck = 'sourceDestCheck'
    groupSet = 'groupSet'
    ebsOptimized = 'ebsOptimized'
    sriovNetSupport = 'sriovNetSupport'
    enaSupport = 'enaSupport'
    enclaveOptions = 'enclaveOptions'
    disableApiStop = 'disableApiStop'


class DisableApiTermination(BaseModel):
    Value: Optional[Boolean] = None


class EbsOptimized(BaseModel):
    Value: Optional[Boolean] = None


class EnaSupport1(BaseModel):
    Value: Optional[Boolean] = None


class InstanceInitiatedShutdownBehavior(BaseModel):
    Value: Optional[String] = None


class InstanceType6(BaseModel):
    Value: Optional[String] = None


class Kernel(BaseModel):
    Value: Optional[String] = None


class Ramdisk(BaseModel):
    Value: Optional[String] = None


class SriovNetSupport(BaseModel):
    Value: Optional[String] = None


class UserData1(BaseModel):
    Value: Optional[Blob] = None


class DisableApiStop(BaseModel):
    Value: Optional[Boolean] = None


class Action1892(Enum):
    ModifyInstanceAttribute = 'ModifyInstanceAttribute'


class Action1896(Enum):
    ModifyInstanceCapacityReservationAttributes = (
        'ModifyInstanceCapacityReservationAttributes'
    )


class Action1900(Enum):
    ModifyInstanceCreditSpecification = 'ModifyInstanceCreditSpecification'


class Action1904(Enum):
    ModifyInstanceEventStartTime = 'ModifyInstanceEventStartTime'


class Action1908(Enum):
    ModifyInstanceEventWindow = 'ModifyInstanceEventWindow'


class AutoRecovery(Enum):
    disabled = 'disabled'
    default = 'default'


class Action1912(Enum):
    ModifyInstanceMaintenanceOptions = 'ModifyInstanceMaintenanceOptions'


class HttpTokens(Enum):
    optional = 'optional'
    required = 'required'


class HttpEndpoint(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class HttpProtocolIpv6(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class InstanceMetadataTags(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class Action1916(Enum):
    ModifyInstanceMetadataOptions = 'ModifyInstanceMetadataOptions'


class Tenancy5(Enum):
    dedicated = 'dedicated'
    host = 'host'


class Action1920(Enum):
    ModifyInstancePlacement = 'ModifyInstancePlacement'


class Action1924(Enum):
    ModifyIpam = 'ModifyIpam'


class Action1928(Enum):
    ModifyIpamPool = 'ModifyIpamPool'


class Action1932(Enum):
    ModifyIpamResourceCidr = 'ModifyIpamResourceCidr'


class Action1936(Enum):
    ModifyIpamResourceDiscovery = 'ModifyIpamResourceDiscovery'


class Action1940(Enum):
    ModifyIpamScope = 'ModifyIpamScope'


class Action1944(Enum):
    ModifyLaunchTemplate = 'ModifyLaunchTemplate'


class Action1948(Enum):
    ModifyLocalGatewayRoute = 'ModifyLocalGatewayRoute'


class Action1952(Enum):
    ModifyManagedPrefixList = 'ModifyManagedPrefixList'


class Attachment(BaseModel):
    AttachmentId: Optional[NetworkInterfaceAttachmentId] = None
    DeleteOnTermination: Optional[Boolean] = None


class Action1956(Enum):
    ModifyNetworkInterfaceAttribute = 'ModifyNetworkInterfaceAttribute'


class PrivateDnsHostnameType(Enum):
    ip_name = 'ip-name'
    resource_name = 'resource-name'


class Action1960(Enum):
    ModifyPrivateDnsNameOptions = 'ModifyPrivateDnsNameOptions'


class Action1964(Enum):
    ModifyReservedInstances = 'ModifyReservedInstances'


class Action1968(Enum):
    ModifySecurityGroupRules = 'ModifySecurityGroupRules'


class Attribute20(Enum):
    productCodes = 'productCodes'
    createVolumePermission = 'createVolumePermission'


class Action1972(Enum):
    ModifySnapshotAttribute = 'ModifySnapshotAttribute'


class UserGroup2(RootModel[List[SecurityGroupName]]):
    root: List[SecurityGroupName]


class StorageTier1(Enum):
    archive = 'archive'


class Action1976(Enum):
    ModifySnapshotTier = 'ModifySnapshotTier'


class ExcessCapacityTerminationPolicy5(Enum):
    noTermination = 'noTermination'
    default = 'default'


class Action1980(Enum):
    ModifySpotFleetRequest = 'ModifySpotFleetRequest'


class AssignIpv6AddressOnCreation(BaseModel):
    Value: Optional[Boolean] = None


class MapPublicIpOnLaunch(BaseModel):
    Value: Optional[Boolean] = None


class MapCustomerOwnedIpOnLaunch(BaseModel):
    Value: Optional[Boolean] = None


class EnableDns64(BaseModel):
    Value: Optional[Boolean] = None


class PrivateDnsHostnameTypeOnLaunch(Enum):
    ip_name = 'ip-name'
    resource_name = 'resource-name'


class EnableResourceNameDnsARecordOnLaunch(BaseModel):
    Value: Optional[Boolean] = None


class EnableResourceNameDnsAAAARecordOnLaunch(BaseModel):
    Value: Optional[Boolean] = None


class DisableLniAtDeviceIndex(BaseModel):
    Value: Optional[Boolean] = None


class Action1984(Enum):
    ModifySubnetAttribute = 'ModifySubnetAttribute'


class Action1988(Enum):
    ModifyTrafficMirrorFilterNetworkServices = (
        'ModifyTrafficMirrorFilterNetworkServices'
    )


class AddNetworkService(RootModel[List[TrafficMirrorNetworkService]]):
    root: List[TrafficMirrorNetworkService]


class RemoveNetworkService(RootModel[List[TrafficMirrorNetworkService]]):
    root: List[TrafficMirrorNetworkService]


class Action1992(Enum):
    ModifyTrafficMirrorFilterRule = 'ModifyTrafficMirrorFilterRule'


class RemoveField(RootModel[List[TrafficMirrorFilterRuleField]]):
    root: List[TrafficMirrorFilterRuleField]


class Action1996(Enum):
    ModifyTrafficMirrorSession = 'ModifyTrafficMirrorSession'


class RemoveField1(RootModel[List[TrafficMirrorSessionField]]):
    root: List[TrafficMirrorSessionField]


class Options12(BaseModel):
    AddTransitGatewayCidrBlocks: Optional[TransitGatewayCidrBlockStringList] = None
    AmazonSideAsn: Optional[Long] = None
    AssociationDefaultRouteTableId: Optional[TransitGatewayRouteTableId] = None
    AutoAcceptSharedAttachments: Optional[AutoAcceptSharedAttachmentsValue] = None
    DefaultRouteTableAssociation: Optional[DefaultRouteTableAssociationValue] = None
    DefaultRouteTablePropagation: Optional[DefaultRouteTablePropagationValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    PropagationDefaultRouteTableId: Optional[TransitGatewayRouteTableId] = None
    RemoveTransitGatewayCidrBlocks: Optional[TransitGatewayCidrBlockStringList] = None
    VpnEcmpSupport: Optional[VpnEcmpSupportValue] = None


class Action2000(Enum):
    ModifyTransitGateway = 'ModifyTransitGateway'


class Action2004(Enum):
    ModifyTransitGatewayPrefixListReference = 'ModifyTransitGatewayPrefixListReference'


class Options14(BaseModel):
    ApplianceModeSupport: Optional[ApplianceModeSupportValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    Ipv6Support: Optional[Ipv6SupportValue] = None


class Action2008(Enum):
    ModifyTransitGatewayVpcAttachment = 'ModifyTransitGatewayVpcAttachment'


class AddSubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class RemoveSubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class NetworkInterfaceOptions2(BaseModel):
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None


class Action2012(Enum):
    ModifyVerifiedAccessEndpoint = 'ModifyVerifiedAccessEndpoint'


class Action2016(Enum):
    ModifyVerifiedAccessEndpointPolicy = 'ModifyVerifiedAccessEndpointPolicy'


class Action2020(Enum):
    ModifyVerifiedAccessGroup = 'ModifyVerifiedAccessGroup'


class Action2024(Enum):
    ModifyVerifiedAccessGroupPolicy = 'ModifyVerifiedAccessGroupPolicy'


class Action2028(Enum):
    ModifyVerifiedAccessInstance = 'ModifyVerifiedAccessInstance'


class AccessLogs(BaseModel):
    CloudWatchLogs: Optional[VerifiedAccessLogCloudWatchLogsDestinationOptions] = None
    KinesisDataFirehose: Optional[
        VerifiedAccessLogKinesisDataFirehoseDestinationOptions
    ] = None
    S3: Optional[VerifiedAccessLogS3DestinationOptions] = None


class Action2032(Enum):
    ModifyVerifiedAccessInstanceLoggingConfiguration = (
        'ModifyVerifiedAccessInstanceLoggingConfiguration'
    )


class OidcOptions3(BaseModel):
    Scope: Optional[String] = None


class Action2036(Enum):
    ModifyVerifiedAccessTrustProvider = 'ModifyVerifiedAccessTrustProvider'


class Action2040(Enum):
    ModifyVolume = 'ModifyVolume'


class AutoEnableIO(BaseModel):
    Value: Optional[Boolean] = None


class Action2044(Enum):
    ModifyVolumeAttribute = 'ModifyVolumeAttribute'


class EnableDnsHostnames(BaseModel):
    Value: Optional[Boolean] = None


class EnableDnsSupport(BaseModel):
    Value: Optional[Boolean] = None


class EnableNetworkAddressUsageMetrics(BaseModel):
    Value: Optional[Boolean] = None


class Action2048(Enum):
    ModifyVpcAttribute = 'ModifyVpcAttribute'


class Action2052(Enum):
    ModifyVpcEndpoint = 'ModifyVpcEndpoint'


class AddRouteTableId(RootModel[List[RouteTableId]]):
    root: List[RouteTableId]


class RemoveRouteTableId(RootModel[List[RouteTableId]]):
    root: List[RouteTableId]


class AddSubnetId(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class RemoveSubnetId(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class AddSecurityGroupId(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class RemoveSecurityGroupId(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class Action2056(Enum):
    ModifyVpcEndpointConnectionNotification = 'ModifyVpcEndpointConnectionNotification'


class Action2060(Enum):
    ModifyVpcEndpointServiceConfiguration = 'ModifyVpcEndpointServiceConfiguration'


class AddNetworkLoadBalancerArn(RootModel[List[String]]):
    root: List[String]


class RemoveNetworkLoadBalancerArn(RootModel[List[String]]):
    root: List[String]


class AddGatewayLoadBalancerArn(RootModel[List[String]]):
    root: List[String]


class RemoveGatewayLoadBalancerArn(RootModel[List[String]]):
    root: List[String]


class AddSupportedIpAddressType(RootModel[List[String]]):
    root: List[String]


class RemoveSupportedIpAddressType(RootModel[List[String]]):
    root: List[String]


class Action2064(Enum):
    ModifyVpcEndpointServicePayerResponsibility = (
        'ModifyVpcEndpointServicePayerResponsibility'
    )


class Action2068(Enum):
    ModifyVpcEndpointServicePermissions = 'ModifyVpcEndpointServicePermissions'


class AddAllowedPrincipals(RootModel[List[String]]):
    root: List[String]


class RemoveAllowedPrincipals(RootModel[List[String]]):
    root: List[String]


class AccepterPeeringConnectionOptions(BaseModel):
    AllowDnsResolutionFromRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalClassicLinkToRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalVpcToRemoteClassicLink: Optional[Boolean] = None


class RequesterPeeringConnectionOptions(BaseModel):
    AllowDnsResolutionFromRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalClassicLinkToRemoteVpc: Optional[Boolean] = None
    AllowEgressFromLocalVpcToRemoteClassicLink: Optional[Boolean] = None


class Action2072(Enum):
    ModifyVpcPeeringConnectionOptions = 'ModifyVpcPeeringConnectionOptions'


class InstanceTenancy4(Enum):
    default = 'default'


class Action2076(Enum):
    ModifyVpcTenancy = 'ModifyVpcTenancy'


class Action2080(Enum):
    ModifyVpnConnection = 'ModifyVpnConnection'


class Action2084(Enum):
    ModifyVpnConnectionOptions = 'ModifyVpnConnectionOptions'


class Action2088(Enum):
    ModifyVpnTunnelCertificate = 'ModifyVpnTunnelCertificate'


class Action2092(Enum):
    ModifyVpnTunnelOptions = 'ModifyVpnTunnelOptions'


class Action2096(Enum):
    MonitorInstances = 'MonitorInstances'


class Action2100(Enum):
    MoveAddressToVpc = 'MoveAddressToVpc'


class Action2104(Enum):
    MoveByoipCidrToIpam = 'MoveByoipCidrToIpam'


class CidrAuthorizationContext1(BaseModel):
    Message: String
    Signature: String


class Action2108(Enum):
    ProvisionByoipCidr = 'ProvisionByoipCidr'


class PoolTagSpecification(RootModel[List[TagSpecification]]):
    root: List[TagSpecification]


class CidrAuthorizationContext3(BaseModel):
    Message: Optional[String] = None
    Signature: Optional[String] = None


class Action2112(Enum):
    ProvisionIpamPoolCidr = 'ProvisionIpamPoolCidr'


class Action2116(Enum):
    ProvisionPublicIpv4PoolCidr = 'ProvisionPublicIpv4PoolCidr'


class CurrencyCode(Enum):
    USD = 'USD'


class Action2120(Enum):
    PurchaseHostReservation = 'PurchaseHostReservation'


class LimitPrice(BaseModel):
    Amount: Optional[Double] = None
    CurrencyCode: Optional[CurrencyCodeValues] = None


class Action2124(Enum):
    PurchaseReservedInstancesOffering = 'PurchaseReservedInstancesOffering'


class Action2128(Enum):
    PurchaseScheduledInstances = 'PurchaseScheduledInstances'


class Action2132(Enum):
    RebootInstances = 'RebootInstances'


class Architecture(Enum):
    i386 = 'i386'
    x86_64 = 'x86_64'
    arm64 = 'arm64'
    x86_64_mac = 'x86_64_mac'
    arm64_mac = 'arm64_mac'


class TpmSupport(Enum):
    v2_0 = 'v2.0'


class ImdsSupport2(Enum):
    v2_0 = 'v2.0'


class Action2136(Enum):
    RegisterImage = 'RegisterImage'


class BillingProduct(RootModel[List[String]]):
    root: List[String]


class Action2140(Enum):
    RegisterInstanceEventNotificationAttributes = (
        'RegisterInstanceEventNotificationAttributes'
    )


class Action2144(Enum):
    RegisterTransitGatewayMulticastGroupMembers = (
        'RegisterTransitGatewayMulticastGroupMembers'
    )


class Action2148(Enum):
    RegisterTransitGatewayMulticastGroupSources = (
        'RegisterTransitGatewayMulticastGroupSources'
    )


class Action2152(Enum):
    RejectTransitGatewayMulticastDomainAssociations = (
        'RejectTransitGatewayMulticastDomainAssociations'
    )


class SubnetIds4(RootModel[List[String]]):
    root: List[String]


class Action2156(Enum):
    RejectTransitGatewayPeeringAttachment = 'RejectTransitGatewayPeeringAttachment'


class Action2160(Enum):
    RejectTransitGatewayVpcAttachment = 'RejectTransitGatewayVpcAttachment'


class Action2164(Enum):
    RejectVpcEndpointConnections = 'RejectVpcEndpointConnections'


class Action2168(Enum):
    RejectVpcPeeringConnection = 'RejectVpcPeeringConnection'


class Action2172(Enum):
    ReleaseAddress = 'ReleaseAddress'


class Action2176(Enum):
    ReleaseHosts = 'ReleaseHosts'


class Action2180(Enum):
    ReleaseIpamPoolAllocation = 'ReleaseIpamPoolAllocation'


class Action2184(Enum):
    ReplaceIamInstanceProfileAssociation = 'ReplaceIamInstanceProfileAssociation'


class Action2188(Enum):
    ReplaceNetworkAclAssociation = 'ReplaceNetworkAclAssociation'


class RuleAction7(Enum):
    allow = 'allow'
    deny = 'deny'


class Action2192(Enum):
    ReplaceNetworkAclEntry = 'ReplaceNetworkAclEntry'


class Action2196(Enum):
    ReplaceRoute = 'ReplaceRoute'


class Action2200(Enum):
    ReplaceRouteTableAssociation = 'ReplaceRouteTableAssociation'


class Action2204(Enum):
    ReplaceTransitGatewayRoute = 'ReplaceTransitGatewayRoute'


class Action2208(Enum):
    ReplaceVpnTunnel = 'ReplaceVpnTunnel'


class Status1(Enum):
    ok = 'ok'
    impaired = 'impaired'


class Action2212(Enum):
    ReportInstanceStatus = 'ReportInstanceStatus'


class ReasonCode(RootModel[List[ReportInstanceReasonCodes]]):
    root: List[ReportInstanceReasonCodes]


class Action2216(Enum):
    RequestSpotFleet = 'RequestSpotFleet'


class Type6(Enum):
    one_time = 'one-time'
    persistent = 'persistent'


class Action2220(Enum):
    RequestSpotInstances = 'RequestSpotInstances'


class Attribute22(Enum):
    domain_name = 'domain-name'


class Action2224(Enum):
    ResetAddressAttribute = 'ResetAddressAttribute'


class Action2228(Enum):
    ResetEbsDefaultKmsKeyId = 'ResetEbsDefaultKmsKeyId'


class Attribute24(Enum):
    loadPermission = 'loadPermission'


class Action2232(Enum):
    ResetFpgaImageAttribute = 'ResetFpgaImageAttribute'


class Attribute26(Enum):
    launchPermission = 'launchPermission'


class Action2236(Enum):
    ResetImageAttribute = 'ResetImageAttribute'


class Attribute28(Enum):
    instanceType = 'instanceType'
    kernel = 'kernel'
    ramdisk = 'ramdisk'
    userData = 'userData'
    disableApiTermination = 'disableApiTermination'
    instanceInitiatedShutdownBehavior = 'instanceInitiatedShutdownBehavior'
    rootDeviceName = 'rootDeviceName'
    blockDeviceMapping = 'blockDeviceMapping'
    productCodes = 'productCodes'
    sourceDestCheck = 'sourceDestCheck'
    groupSet = 'groupSet'
    ebsOptimized = 'ebsOptimized'
    sriovNetSupport = 'sriovNetSupport'
    enaSupport = 'enaSupport'
    enclaveOptions = 'enclaveOptions'
    disableApiStop = 'disableApiStop'


class Action2240(Enum):
    ResetInstanceAttribute = 'ResetInstanceAttribute'


class Action2244(Enum):
    ResetNetworkInterfaceAttribute = 'ResetNetworkInterfaceAttribute'


class Attribute30(Enum):
    productCodes = 'productCodes'
    createVolumePermission = 'createVolumePermission'


class Action2248(Enum):
    ResetSnapshotAttribute = 'ResetSnapshotAttribute'


class Action2252(Enum):
    RestoreAddressToClassic = 'RestoreAddressToClassic'


class Action2256(Enum):
    RestoreImageFromRecycleBin = 'RestoreImageFromRecycleBin'


class Action2260(Enum):
    RestoreManagedPrefixListVersion = 'RestoreManagedPrefixListVersion'


class Action2264(Enum):
    RestoreSnapshotFromRecycleBin = 'RestoreSnapshotFromRecycleBin'


class Action2268(Enum):
    RestoreSnapshotTier = 'RestoreSnapshotTier'


class Action2272(Enum):
    RevokeClientVpnIngress = 'RevokeClientVpnIngress'


class Action2276(Enum):
    RevokeSecurityGroupEgress = 'RevokeSecurityGroupEgress'


class Action2280(Enum):
    RevokeSecurityGroupIngress = 'RevokeSecurityGroupIngress'


class InstanceType8(Enum):
    a1_medium = 'a1.medium'
    a1_large = 'a1.large'
    a1_xlarge = 'a1.xlarge'
    a1_2xlarge = 'a1.2xlarge'
    a1_4xlarge = 'a1.4xlarge'
    a1_metal = 'a1.metal'
    c1_medium = 'c1.medium'
    c1_xlarge = 'c1.xlarge'
    c3_large = 'c3.large'
    c3_xlarge = 'c3.xlarge'
    c3_2xlarge = 'c3.2xlarge'
    c3_4xlarge = 'c3.4xlarge'
    c3_8xlarge = 'c3.8xlarge'
    c4_large = 'c4.large'
    c4_xlarge = 'c4.xlarge'
    c4_2xlarge = 'c4.2xlarge'
    c4_4xlarge = 'c4.4xlarge'
    c4_8xlarge = 'c4.8xlarge'
    c5_large = 'c5.large'
    c5_xlarge = 'c5.xlarge'
    c5_2xlarge = 'c5.2xlarge'
    c5_4xlarge = 'c5.4xlarge'
    c5_9xlarge = 'c5.9xlarge'
    c5_12xlarge = 'c5.12xlarge'
    c5_18xlarge = 'c5.18xlarge'
    c5_24xlarge = 'c5.24xlarge'
    c5_metal = 'c5.metal'
    c5a_large = 'c5a.large'
    c5a_xlarge = 'c5a.xlarge'
    c5a_2xlarge = 'c5a.2xlarge'
    c5a_4xlarge = 'c5a.4xlarge'
    c5a_8xlarge = 'c5a.8xlarge'
    c5a_12xlarge = 'c5a.12xlarge'
    c5a_16xlarge = 'c5a.16xlarge'
    c5a_24xlarge = 'c5a.24xlarge'
    c5ad_large = 'c5ad.large'
    c5ad_xlarge = 'c5ad.xlarge'
    c5ad_2xlarge = 'c5ad.2xlarge'
    c5ad_4xlarge = 'c5ad.4xlarge'
    c5ad_8xlarge = 'c5ad.8xlarge'
    c5ad_12xlarge = 'c5ad.12xlarge'
    c5ad_16xlarge = 'c5ad.16xlarge'
    c5ad_24xlarge = 'c5ad.24xlarge'
    c5d_large = 'c5d.large'
    c5d_xlarge = 'c5d.xlarge'
    c5d_2xlarge = 'c5d.2xlarge'
    c5d_4xlarge = 'c5d.4xlarge'
    c5d_9xlarge = 'c5d.9xlarge'
    c5d_12xlarge = 'c5d.12xlarge'
    c5d_18xlarge = 'c5d.18xlarge'
    c5d_24xlarge = 'c5d.24xlarge'
    c5d_metal = 'c5d.metal'
    c5n_large = 'c5n.large'
    c5n_xlarge = 'c5n.xlarge'
    c5n_2xlarge = 'c5n.2xlarge'
    c5n_4xlarge = 'c5n.4xlarge'
    c5n_9xlarge = 'c5n.9xlarge'
    c5n_18xlarge = 'c5n.18xlarge'
    c5n_metal = 'c5n.metal'
    c6g_medium = 'c6g.medium'
    c6g_large = 'c6g.large'
    c6g_xlarge = 'c6g.xlarge'
    c6g_2xlarge = 'c6g.2xlarge'
    c6g_4xlarge = 'c6g.4xlarge'
    c6g_8xlarge = 'c6g.8xlarge'
    c6g_12xlarge = 'c6g.12xlarge'
    c6g_16xlarge = 'c6g.16xlarge'
    c6g_metal = 'c6g.metal'
    c6gd_medium = 'c6gd.medium'
    c6gd_large = 'c6gd.large'
    c6gd_xlarge = 'c6gd.xlarge'
    c6gd_2xlarge = 'c6gd.2xlarge'
    c6gd_4xlarge = 'c6gd.4xlarge'
    c6gd_8xlarge = 'c6gd.8xlarge'
    c6gd_12xlarge = 'c6gd.12xlarge'
    c6gd_16xlarge = 'c6gd.16xlarge'
    c6gd_metal = 'c6gd.metal'
    c6gn_medium = 'c6gn.medium'
    c6gn_large = 'c6gn.large'
    c6gn_xlarge = 'c6gn.xlarge'
    c6gn_2xlarge = 'c6gn.2xlarge'
    c6gn_4xlarge = 'c6gn.4xlarge'
    c6gn_8xlarge = 'c6gn.8xlarge'
    c6gn_12xlarge = 'c6gn.12xlarge'
    c6gn_16xlarge = 'c6gn.16xlarge'
    c6i_large = 'c6i.large'
    c6i_xlarge = 'c6i.xlarge'
    c6i_2xlarge = 'c6i.2xlarge'
    c6i_4xlarge = 'c6i.4xlarge'
    c6i_8xlarge = 'c6i.8xlarge'
    c6i_12xlarge = 'c6i.12xlarge'
    c6i_16xlarge = 'c6i.16xlarge'
    c6i_24xlarge = 'c6i.24xlarge'
    c6i_32xlarge = 'c6i.32xlarge'
    c6i_metal = 'c6i.metal'
    cc1_4xlarge = 'cc1.4xlarge'
    cc2_8xlarge = 'cc2.8xlarge'
    cg1_4xlarge = 'cg1.4xlarge'
    cr1_8xlarge = 'cr1.8xlarge'
    d2_xlarge = 'd2.xlarge'
    d2_2xlarge = 'd2.2xlarge'
    d2_4xlarge = 'd2.4xlarge'
    d2_8xlarge = 'd2.8xlarge'
    d3_xlarge = 'd3.xlarge'
    d3_2xlarge = 'd3.2xlarge'
    d3_4xlarge = 'd3.4xlarge'
    d3_8xlarge = 'd3.8xlarge'
    d3en_xlarge = 'd3en.xlarge'
    d3en_2xlarge = 'd3en.2xlarge'
    d3en_4xlarge = 'd3en.4xlarge'
    d3en_6xlarge = 'd3en.6xlarge'
    d3en_8xlarge = 'd3en.8xlarge'
    d3en_12xlarge = 'd3en.12xlarge'
    dl1_24xlarge = 'dl1.24xlarge'
    f1_2xlarge = 'f1.2xlarge'
    f1_4xlarge = 'f1.4xlarge'
    f1_16xlarge = 'f1.16xlarge'
    g2_2xlarge = 'g2.2xlarge'
    g2_8xlarge = 'g2.8xlarge'
    g3_4xlarge = 'g3.4xlarge'
    g3_8xlarge = 'g3.8xlarge'
    g3_16xlarge = 'g3.16xlarge'
    g3s_xlarge = 'g3s.xlarge'
    g4ad_xlarge = 'g4ad.xlarge'
    g4ad_2xlarge = 'g4ad.2xlarge'
    g4ad_4xlarge = 'g4ad.4xlarge'
    g4ad_8xlarge = 'g4ad.8xlarge'
    g4ad_16xlarge = 'g4ad.16xlarge'
    g4dn_xlarge = 'g4dn.xlarge'
    g4dn_2xlarge = 'g4dn.2xlarge'
    g4dn_4xlarge = 'g4dn.4xlarge'
    g4dn_8xlarge = 'g4dn.8xlarge'
    g4dn_12xlarge = 'g4dn.12xlarge'
    g4dn_16xlarge = 'g4dn.16xlarge'
    g4dn_metal = 'g4dn.metal'
    g5_xlarge = 'g5.xlarge'
    g5_2xlarge = 'g5.2xlarge'
    g5_4xlarge = 'g5.4xlarge'
    g5_8xlarge = 'g5.8xlarge'
    g5_12xlarge = 'g5.12xlarge'
    g5_16xlarge = 'g5.16xlarge'
    g5_24xlarge = 'g5.24xlarge'
    g5_48xlarge = 'g5.48xlarge'
    g5g_xlarge = 'g5g.xlarge'
    g5g_2xlarge = 'g5g.2xlarge'
    g5g_4xlarge = 'g5g.4xlarge'
    g5g_8xlarge = 'g5g.8xlarge'
    g5g_16xlarge = 'g5g.16xlarge'
    g5g_metal = 'g5g.metal'
    hi1_4xlarge = 'hi1.4xlarge'
    hpc6a_48xlarge = 'hpc6a.48xlarge'
    hs1_8xlarge = 'hs1.8xlarge'
    h1_2xlarge = 'h1.2xlarge'
    h1_4xlarge = 'h1.4xlarge'
    h1_8xlarge = 'h1.8xlarge'
    h1_16xlarge = 'h1.16xlarge'
    i2_xlarge = 'i2.xlarge'
    i2_2xlarge = 'i2.2xlarge'
    i2_4xlarge = 'i2.4xlarge'
    i2_8xlarge = 'i2.8xlarge'
    i3_large = 'i3.large'
    i3_xlarge = 'i3.xlarge'
    i3_2xlarge = 'i3.2xlarge'
    i3_4xlarge = 'i3.4xlarge'
    i3_8xlarge = 'i3.8xlarge'
    i3_16xlarge = 'i3.16xlarge'
    i3_metal = 'i3.metal'
    i3en_large = 'i3en.large'
    i3en_xlarge = 'i3en.xlarge'
    i3en_2xlarge = 'i3en.2xlarge'
    i3en_3xlarge = 'i3en.3xlarge'
    i3en_6xlarge = 'i3en.6xlarge'
    i3en_12xlarge = 'i3en.12xlarge'
    i3en_24xlarge = 'i3en.24xlarge'
    i3en_metal = 'i3en.metal'
    im4gn_large = 'im4gn.large'
    im4gn_xlarge = 'im4gn.xlarge'
    im4gn_2xlarge = 'im4gn.2xlarge'
    im4gn_4xlarge = 'im4gn.4xlarge'
    im4gn_8xlarge = 'im4gn.8xlarge'
    im4gn_16xlarge = 'im4gn.16xlarge'
    inf1_xlarge = 'inf1.xlarge'
    inf1_2xlarge = 'inf1.2xlarge'
    inf1_6xlarge = 'inf1.6xlarge'
    inf1_24xlarge = 'inf1.24xlarge'
    is4gen_medium = 'is4gen.medium'
    is4gen_large = 'is4gen.large'
    is4gen_xlarge = 'is4gen.xlarge'
    is4gen_2xlarge = 'is4gen.2xlarge'
    is4gen_4xlarge = 'is4gen.4xlarge'
    is4gen_8xlarge = 'is4gen.8xlarge'
    m1_small = 'm1.small'
    m1_medium = 'm1.medium'
    m1_large = 'm1.large'
    m1_xlarge = 'm1.xlarge'
    m2_xlarge = 'm2.xlarge'
    m2_2xlarge = 'm2.2xlarge'
    m2_4xlarge = 'm2.4xlarge'
    m3_medium = 'm3.medium'
    m3_large = 'm3.large'
    m3_xlarge = 'm3.xlarge'
    m3_2xlarge = 'm3.2xlarge'
    m4_large = 'm4.large'
    m4_xlarge = 'm4.xlarge'
    m4_2xlarge = 'm4.2xlarge'
    m4_4xlarge = 'm4.4xlarge'
    m4_10xlarge = 'm4.10xlarge'
    m4_16xlarge = 'm4.16xlarge'
    m5_large = 'm5.large'
    m5_xlarge = 'm5.xlarge'
    m5_2xlarge = 'm5.2xlarge'
    m5_4xlarge = 'm5.4xlarge'
    m5_8xlarge = 'm5.8xlarge'
    m5_12xlarge = 'm5.12xlarge'
    m5_16xlarge = 'm5.16xlarge'
    m5_24xlarge = 'm5.24xlarge'
    m5_metal = 'm5.metal'
    m5a_large = 'm5a.large'
    m5a_xlarge = 'm5a.xlarge'
    m5a_2xlarge = 'm5a.2xlarge'
    m5a_4xlarge = 'm5a.4xlarge'
    m5a_8xlarge = 'm5a.8xlarge'
    m5a_12xlarge = 'm5a.12xlarge'
    m5a_16xlarge = 'm5a.16xlarge'
    m5a_24xlarge = 'm5a.24xlarge'
    m5ad_large = 'm5ad.large'
    m5ad_xlarge = 'm5ad.xlarge'
    m5ad_2xlarge = 'm5ad.2xlarge'
    m5ad_4xlarge = 'm5ad.4xlarge'
    m5ad_8xlarge = 'm5ad.8xlarge'
    m5ad_12xlarge = 'm5ad.12xlarge'
    m5ad_16xlarge = 'm5ad.16xlarge'
    m5ad_24xlarge = 'm5ad.24xlarge'
    m5d_large = 'm5d.large'
    m5d_xlarge = 'm5d.xlarge'
    m5d_2xlarge = 'm5d.2xlarge'
    m5d_4xlarge = 'm5d.4xlarge'
    m5d_8xlarge = 'm5d.8xlarge'
    m5d_12xlarge = 'm5d.12xlarge'
    m5d_16xlarge = 'm5d.16xlarge'
    m5d_24xlarge = 'm5d.24xlarge'
    m5d_metal = 'm5d.metal'
    m5dn_large = 'm5dn.large'
    m5dn_xlarge = 'm5dn.xlarge'
    m5dn_2xlarge = 'm5dn.2xlarge'
    m5dn_4xlarge = 'm5dn.4xlarge'
    m5dn_8xlarge = 'm5dn.8xlarge'
    m5dn_12xlarge = 'm5dn.12xlarge'
    m5dn_16xlarge = 'm5dn.16xlarge'
    m5dn_24xlarge = 'm5dn.24xlarge'
    m5dn_metal = 'm5dn.metal'
    m5n_large = 'm5n.large'
    m5n_xlarge = 'm5n.xlarge'
    m5n_2xlarge = 'm5n.2xlarge'
    m5n_4xlarge = 'm5n.4xlarge'
    m5n_8xlarge = 'm5n.8xlarge'
    m5n_12xlarge = 'm5n.12xlarge'
    m5n_16xlarge = 'm5n.16xlarge'
    m5n_24xlarge = 'm5n.24xlarge'
    m5n_metal = 'm5n.metal'
    m5zn_large = 'm5zn.large'
    m5zn_xlarge = 'm5zn.xlarge'
    m5zn_2xlarge = 'm5zn.2xlarge'
    m5zn_3xlarge = 'm5zn.3xlarge'
    m5zn_6xlarge = 'm5zn.6xlarge'
    m5zn_12xlarge = 'm5zn.12xlarge'
    m5zn_metal = 'm5zn.metal'
    m6a_large = 'm6a.large'
    m6a_xlarge = 'm6a.xlarge'
    m6a_2xlarge = 'm6a.2xlarge'
    m6a_4xlarge = 'm6a.4xlarge'
    m6a_8xlarge = 'm6a.8xlarge'
    m6a_12xlarge = 'm6a.12xlarge'
    m6a_16xlarge = 'm6a.16xlarge'
    m6a_24xlarge = 'm6a.24xlarge'
    m6a_32xlarge = 'm6a.32xlarge'
    m6a_48xlarge = 'm6a.48xlarge'
    m6g_metal = 'm6g.metal'
    m6g_medium = 'm6g.medium'
    m6g_large = 'm6g.large'
    m6g_xlarge = 'm6g.xlarge'
    m6g_2xlarge = 'm6g.2xlarge'
    m6g_4xlarge = 'm6g.4xlarge'
    m6g_8xlarge = 'm6g.8xlarge'
    m6g_12xlarge = 'm6g.12xlarge'
    m6g_16xlarge = 'm6g.16xlarge'
    m6gd_metal = 'm6gd.metal'
    m6gd_medium = 'm6gd.medium'
    m6gd_large = 'm6gd.large'
    m6gd_xlarge = 'm6gd.xlarge'
    m6gd_2xlarge = 'm6gd.2xlarge'
    m6gd_4xlarge = 'm6gd.4xlarge'
    m6gd_8xlarge = 'm6gd.8xlarge'
    m6gd_12xlarge = 'm6gd.12xlarge'
    m6gd_16xlarge = 'm6gd.16xlarge'
    m6i_large = 'm6i.large'
    m6i_xlarge = 'm6i.xlarge'
    m6i_2xlarge = 'm6i.2xlarge'
    m6i_4xlarge = 'm6i.4xlarge'
    m6i_8xlarge = 'm6i.8xlarge'
    m6i_12xlarge = 'm6i.12xlarge'
    m6i_16xlarge = 'm6i.16xlarge'
    m6i_24xlarge = 'm6i.24xlarge'
    m6i_32xlarge = 'm6i.32xlarge'
    m6i_metal = 'm6i.metal'
    mac1_metal = 'mac1.metal'
    p2_xlarge = 'p2.xlarge'
    p2_8xlarge = 'p2.8xlarge'
    p2_16xlarge = 'p2.16xlarge'
    p3_2xlarge = 'p3.2xlarge'
    p3_8xlarge = 'p3.8xlarge'
    p3_16xlarge = 'p3.16xlarge'
    p3dn_24xlarge = 'p3dn.24xlarge'
    p4d_24xlarge = 'p4d.24xlarge'
    r3_large = 'r3.large'
    r3_xlarge = 'r3.xlarge'
    r3_2xlarge = 'r3.2xlarge'
    r3_4xlarge = 'r3.4xlarge'
    r3_8xlarge = 'r3.8xlarge'
    r4_large = 'r4.large'
    r4_xlarge = 'r4.xlarge'
    r4_2xlarge = 'r4.2xlarge'
    r4_4xlarge = 'r4.4xlarge'
    r4_8xlarge = 'r4.8xlarge'
    r4_16xlarge = 'r4.16xlarge'
    r5_large = 'r5.large'
    r5_xlarge = 'r5.xlarge'
    r5_2xlarge = 'r5.2xlarge'
    r5_4xlarge = 'r5.4xlarge'
    r5_8xlarge = 'r5.8xlarge'
    r5_12xlarge = 'r5.12xlarge'
    r5_16xlarge = 'r5.16xlarge'
    r5_24xlarge = 'r5.24xlarge'
    r5_metal = 'r5.metal'
    r5a_large = 'r5a.large'
    r5a_xlarge = 'r5a.xlarge'
    r5a_2xlarge = 'r5a.2xlarge'
    r5a_4xlarge = 'r5a.4xlarge'
    r5a_8xlarge = 'r5a.8xlarge'
    r5a_12xlarge = 'r5a.12xlarge'
    r5a_16xlarge = 'r5a.16xlarge'
    r5a_24xlarge = 'r5a.24xlarge'
    r5ad_large = 'r5ad.large'
    r5ad_xlarge = 'r5ad.xlarge'
    r5ad_2xlarge = 'r5ad.2xlarge'
    r5ad_4xlarge = 'r5ad.4xlarge'
    r5ad_8xlarge = 'r5ad.8xlarge'
    r5ad_12xlarge = 'r5ad.12xlarge'
    r5ad_16xlarge = 'r5ad.16xlarge'
    r5ad_24xlarge = 'r5ad.24xlarge'
    r5b_large = 'r5b.large'
    r5b_xlarge = 'r5b.xlarge'
    r5b_2xlarge = 'r5b.2xlarge'
    r5b_4xlarge = 'r5b.4xlarge'
    r5b_8xlarge = 'r5b.8xlarge'
    r5b_12xlarge = 'r5b.12xlarge'
    r5b_16xlarge = 'r5b.16xlarge'
    r5b_24xlarge = 'r5b.24xlarge'
    r5b_metal = 'r5b.metal'
    r5d_large = 'r5d.large'
    r5d_xlarge = 'r5d.xlarge'
    r5d_2xlarge = 'r5d.2xlarge'
    r5d_4xlarge = 'r5d.4xlarge'
    r5d_8xlarge = 'r5d.8xlarge'
    r5d_12xlarge = 'r5d.12xlarge'
    r5d_16xlarge = 'r5d.16xlarge'
    r5d_24xlarge = 'r5d.24xlarge'
    r5d_metal = 'r5d.metal'
    r5dn_large = 'r5dn.large'
    r5dn_xlarge = 'r5dn.xlarge'
    r5dn_2xlarge = 'r5dn.2xlarge'
    r5dn_4xlarge = 'r5dn.4xlarge'
    r5dn_8xlarge = 'r5dn.8xlarge'
    r5dn_12xlarge = 'r5dn.12xlarge'
    r5dn_16xlarge = 'r5dn.16xlarge'
    r5dn_24xlarge = 'r5dn.24xlarge'
    r5dn_metal = 'r5dn.metal'
    r5n_large = 'r5n.large'
    r5n_xlarge = 'r5n.xlarge'
    r5n_2xlarge = 'r5n.2xlarge'
    r5n_4xlarge = 'r5n.4xlarge'
    r5n_8xlarge = 'r5n.8xlarge'
    r5n_12xlarge = 'r5n.12xlarge'
    r5n_16xlarge = 'r5n.16xlarge'
    r5n_24xlarge = 'r5n.24xlarge'
    r5n_metal = 'r5n.metal'
    r6g_medium = 'r6g.medium'
    r6g_large = 'r6g.large'
    r6g_xlarge = 'r6g.xlarge'
    r6g_2xlarge = 'r6g.2xlarge'
    r6g_4xlarge = 'r6g.4xlarge'
    r6g_8xlarge = 'r6g.8xlarge'
    r6g_12xlarge = 'r6g.12xlarge'
    r6g_16xlarge = 'r6g.16xlarge'
    r6g_metal = 'r6g.metal'
    r6gd_medium = 'r6gd.medium'
    r6gd_large = 'r6gd.large'
    r6gd_xlarge = 'r6gd.xlarge'
    r6gd_2xlarge = 'r6gd.2xlarge'
    r6gd_4xlarge = 'r6gd.4xlarge'
    r6gd_8xlarge = 'r6gd.8xlarge'
    r6gd_12xlarge = 'r6gd.12xlarge'
    r6gd_16xlarge = 'r6gd.16xlarge'
    r6gd_metal = 'r6gd.metal'
    r6i_large = 'r6i.large'
    r6i_xlarge = 'r6i.xlarge'
    r6i_2xlarge = 'r6i.2xlarge'
    r6i_4xlarge = 'r6i.4xlarge'
    r6i_8xlarge = 'r6i.8xlarge'
    r6i_12xlarge = 'r6i.12xlarge'
    r6i_16xlarge = 'r6i.16xlarge'
    r6i_24xlarge = 'r6i.24xlarge'
    r6i_32xlarge = 'r6i.32xlarge'
    r6i_metal = 'r6i.metal'
    t1_micro = 't1.micro'
    t2_nano = 't2.nano'
    t2_micro = 't2.micro'
    t2_small = 't2.small'
    t2_medium = 't2.medium'
    t2_large = 't2.large'
    t2_xlarge = 't2.xlarge'
    t2_2xlarge = 't2.2xlarge'
    t3_nano = 't3.nano'
    t3_micro = 't3.micro'
    t3_small = 't3.small'
    t3_medium = 't3.medium'
    t3_large = 't3.large'
    t3_xlarge = 't3.xlarge'
    t3_2xlarge = 't3.2xlarge'
    t3a_nano = 't3a.nano'
    t3a_micro = 't3a.micro'
    t3a_small = 't3a.small'
    t3a_medium = 't3a.medium'
    t3a_large = 't3a.large'
    t3a_xlarge = 't3a.xlarge'
    t3a_2xlarge = 't3a.2xlarge'
    t4g_nano = 't4g.nano'
    t4g_micro = 't4g.micro'
    t4g_small = 't4g.small'
    t4g_medium = 't4g.medium'
    t4g_large = 't4g.large'
    t4g_xlarge = 't4g.xlarge'
    t4g_2xlarge = 't4g.2xlarge'
    u_6tb1_56xlarge = 'u-6tb1.56xlarge'
    u_6tb1_112xlarge = 'u-6tb1.112xlarge'
    u_9tb1_112xlarge = 'u-9tb1.112xlarge'
    u_12tb1_112xlarge = 'u-12tb1.112xlarge'
    u_6tb1_metal = 'u-6tb1.metal'
    u_9tb1_metal = 'u-9tb1.metal'
    u_12tb1_metal = 'u-12tb1.metal'
    u_18tb1_metal = 'u-18tb1.metal'
    u_24tb1_metal = 'u-24tb1.metal'
    vt1_3xlarge = 'vt1.3xlarge'
    vt1_6xlarge = 'vt1.6xlarge'
    vt1_24xlarge = 'vt1.24xlarge'
    x1_16xlarge = 'x1.16xlarge'
    x1_32xlarge = 'x1.32xlarge'
    x1e_xlarge = 'x1e.xlarge'
    x1e_2xlarge = 'x1e.2xlarge'
    x1e_4xlarge = 'x1e.4xlarge'
    x1e_8xlarge = 'x1e.8xlarge'
    x1e_16xlarge = 'x1e.16xlarge'
    x1e_32xlarge = 'x1e.32xlarge'
    x2iezn_2xlarge = 'x2iezn.2xlarge'
    x2iezn_4xlarge = 'x2iezn.4xlarge'
    x2iezn_6xlarge = 'x2iezn.6xlarge'
    x2iezn_8xlarge = 'x2iezn.8xlarge'
    x2iezn_12xlarge = 'x2iezn.12xlarge'
    x2iezn_metal = 'x2iezn.metal'
    x2gd_medium = 'x2gd.medium'
    x2gd_large = 'x2gd.large'
    x2gd_xlarge = 'x2gd.xlarge'
    x2gd_2xlarge = 'x2gd.2xlarge'
    x2gd_4xlarge = 'x2gd.4xlarge'
    x2gd_8xlarge = 'x2gd.8xlarge'
    x2gd_12xlarge = 'x2gd.12xlarge'
    x2gd_16xlarge = 'x2gd.16xlarge'
    x2gd_metal = 'x2gd.metal'
    z1d_large = 'z1d.large'
    z1d_xlarge = 'z1d.xlarge'
    z1d_2xlarge = 'z1d.2xlarge'
    z1d_3xlarge = 'z1d.3xlarge'
    z1d_6xlarge = 'z1d.6xlarge'
    z1d_12xlarge = 'z1d.12xlarge'
    z1d_metal = 'z1d.metal'
    x2idn_16xlarge = 'x2idn.16xlarge'
    x2idn_24xlarge = 'x2idn.24xlarge'
    x2idn_32xlarge = 'x2idn.32xlarge'
    x2iedn_xlarge = 'x2iedn.xlarge'
    x2iedn_2xlarge = 'x2iedn.2xlarge'
    x2iedn_4xlarge = 'x2iedn.4xlarge'
    x2iedn_8xlarge = 'x2iedn.8xlarge'
    x2iedn_16xlarge = 'x2iedn.16xlarge'
    x2iedn_24xlarge = 'x2iedn.24xlarge'
    x2iedn_32xlarge = 'x2iedn.32xlarge'
    c6a_large = 'c6a.large'
    c6a_xlarge = 'c6a.xlarge'
    c6a_2xlarge = 'c6a.2xlarge'
    c6a_4xlarge = 'c6a.4xlarge'
    c6a_8xlarge = 'c6a.8xlarge'
    c6a_12xlarge = 'c6a.12xlarge'
    c6a_16xlarge = 'c6a.16xlarge'
    c6a_24xlarge = 'c6a.24xlarge'
    c6a_32xlarge = 'c6a.32xlarge'
    c6a_48xlarge = 'c6a.48xlarge'
    c6a_metal = 'c6a.metal'
    m6a_metal = 'm6a.metal'
    i4i_large = 'i4i.large'
    i4i_xlarge = 'i4i.xlarge'
    i4i_2xlarge = 'i4i.2xlarge'
    i4i_4xlarge = 'i4i.4xlarge'
    i4i_8xlarge = 'i4i.8xlarge'
    i4i_16xlarge = 'i4i.16xlarge'
    i4i_32xlarge = 'i4i.32xlarge'
    i4i_metal = 'i4i.metal'
    x2idn_metal = 'x2idn.metal'
    x2iedn_metal = 'x2iedn.metal'
    c7g_medium = 'c7g.medium'
    c7g_large = 'c7g.large'
    c7g_xlarge = 'c7g.xlarge'
    c7g_2xlarge = 'c7g.2xlarge'
    c7g_4xlarge = 'c7g.4xlarge'
    c7g_8xlarge = 'c7g.8xlarge'
    c7g_12xlarge = 'c7g.12xlarge'
    c7g_16xlarge = 'c7g.16xlarge'
    mac2_metal = 'mac2.metal'
    c6id_large = 'c6id.large'
    c6id_xlarge = 'c6id.xlarge'
    c6id_2xlarge = 'c6id.2xlarge'
    c6id_4xlarge = 'c6id.4xlarge'
    c6id_8xlarge = 'c6id.8xlarge'
    c6id_12xlarge = 'c6id.12xlarge'
    c6id_16xlarge = 'c6id.16xlarge'
    c6id_24xlarge = 'c6id.24xlarge'
    c6id_32xlarge = 'c6id.32xlarge'
    c6id_metal = 'c6id.metal'
    m6id_large = 'm6id.large'
    m6id_xlarge = 'm6id.xlarge'
    m6id_2xlarge = 'm6id.2xlarge'
    m6id_4xlarge = 'm6id.4xlarge'
    m6id_8xlarge = 'm6id.8xlarge'
    m6id_12xlarge = 'm6id.12xlarge'
    m6id_16xlarge = 'm6id.16xlarge'
    m6id_24xlarge = 'm6id.24xlarge'
    m6id_32xlarge = 'm6id.32xlarge'
    m6id_metal = 'm6id.metal'
    r6id_large = 'r6id.large'
    r6id_xlarge = 'r6id.xlarge'
    r6id_2xlarge = 'r6id.2xlarge'
    r6id_4xlarge = 'r6id.4xlarge'
    r6id_8xlarge = 'r6id.8xlarge'
    r6id_12xlarge = 'r6id.12xlarge'
    r6id_16xlarge = 'r6id.16xlarge'
    r6id_24xlarge = 'r6id.24xlarge'
    r6id_32xlarge = 'r6id.32xlarge'
    r6id_metal = 'r6id.metal'
    r6a_large = 'r6a.large'
    r6a_xlarge = 'r6a.xlarge'
    r6a_2xlarge = 'r6a.2xlarge'
    r6a_4xlarge = 'r6a.4xlarge'
    r6a_8xlarge = 'r6a.8xlarge'
    r6a_12xlarge = 'r6a.12xlarge'
    r6a_16xlarge = 'r6a.16xlarge'
    r6a_24xlarge = 'r6a.24xlarge'
    r6a_32xlarge = 'r6a.32xlarge'
    r6a_48xlarge = 'r6a.48xlarge'
    r6a_metal = 'r6a.metal'
    p4de_24xlarge = 'p4de.24xlarge'
    u_3tb1_56xlarge = 'u-3tb1.56xlarge'
    u_18tb1_112xlarge = 'u-18tb1.112xlarge'
    u_24tb1_112xlarge = 'u-24tb1.112xlarge'
    trn1_2xlarge = 'trn1.2xlarge'
    trn1_32xlarge = 'trn1.32xlarge'
    hpc6id_32xlarge = 'hpc6id.32xlarge'
    c6in_large = 'c6in.large'
    c6in_xlarge = 'c6in.xlarge'
    c6in_2xlarge = 'c6in.2xlarge'
    c6in_4xlarge = 'c6in.4xlarge'
    c6in_8xlarge = 'c6in.8xlarge'
    c6in_12xlarge = 'c6in.12xlarge'
    c6in_16xlarge = 'c6in.16xlarge'
    c6in_24xlarge = 'c6in.24xlarge'
    c6in_32xlarge = 'c6in.32xlarge'
    m6in_large = 'm6in.large'
    m6in_xlarge = 'm6in.xlarge'
    m6in_2xlarge = 'm6in.2xlarge'
    m6in_4xlarge = 'm6in.4xlarge'
    m6in_8xlarge = 'm6in.8xlarge'
    m6in_12xlarge = 'm6in.12xlarge'
    m6in_16xlarge = 'm6in.16xlarge'
    m6in_24xlarge = 'm6in.24xlarge'
    m6in_32xlarge = 'm6in.32xlarge'
    m6idn_large = 'm6idn.large'
    m6idn_xlarge = 'm6idn.xlarge'
    m6idn_2xlarge = 'm6idn.2xlarge'
    m6idn_4xlarge = 'm6idn.4xlarge'
    m6idn_8xlarge = 'm6idn.8xlarge'
    m6idn_12xlarge = 'm6idn.12xlarge'
    m6idn_16xlarge = 'm6idn.16xlarge'
    m6idn_24xlarge = 'm6idn.24xlarge'
    m6idn_32xlarge = 'm6idn.32xlarge'
    r6in_large = 'r6in.large'
    r6in_xlarge = 'r6in.xlarge'
    r6in_2xlarge = 'r6in.2xlarge'
    r6in_4xlarge = 'r6in.4xlarge'
    r6in_8xlarge = 'r6in.8xlarge'
    r6in_12xlarge = 'r6in.12xlarge'
    r6in_16xlarge = 'r6in.16xlarge'
    r6in_24xlarge = 'r6in.24xlarge'
    r6in_32xlarge = 'r6in.32xlarge'
    r6idn_large = 'r6idn.large'
    r6idn_xlarge = 'r6idn.xlarge'
    r6idn_2xlarge = 'r6idn.2xlarge'
    r6idn_4xlarge = 'r6idn.4xlarge'
    r6idn_8xlarge = 'r6idn.8xlarge'
    r6idn_12xlarge = 'r6idn.12xlarge'
    r6idn_16xlarge = 'r6idn.16xlarge'
    r6idn_24xlarge = 'r6idn.24xlarge'
    r6idn_32xlarge = 'r6idn.32xlarge'
    c7g_metal = 'c7g.metal'
    m7g_medium = 'm7g.medium'
    m7g_large = 'm7g.large'
    m7g_xlarge = 'm7g.xlarge'
    m7g_2xlarge = 'm7g.2xlarge'
    m7g_4xlarge = 'm7g.4xlarge'
    m7g_8xlarge = 'm7g.8xlarge'
    m7g_12xlarge = 'm7g.12xlarge'
    m7g_16xlarge = 'm7g.16xlarge'
    m7g_metal = 'm7g.metal'
    r7g_medium = 'r7g.medium'
    r7g_large = 'r7g.large'
    r7g_xlarge = 'r7g.xlarge'
    r7g_2xlarge = 'r7g.2xlarge'
    r7g_4xlarge = 'r7g.4xlarge'
    r7g_8xlarge = 'r7g.8xlarge'
    r7g_12xlarge = 'r7g.12xlarge'
    r7g_16xlarge = 'r7g.16xlarge'
    r7g_metal = 'r7g.metal'
    c6in_metal = 'c6in.metal'
    m6in_metal = 'm6in.metal'
    m6idn_metal = 'm6idn.metal'
    r6in_metal = 'r6in.metal'
    r6idn_metal = 'r6idn.metal'


class Monitoring1(BaseModel):
    Enabled: Boolean


class Placement(BaseModel):
    Affinity: Optional[String] = None
    AvailabilityZone: Optional[String] = None
    GroupId: Optional[PlacementGroupId] = None
    GroupName: Optional[PlacementGroupName] = None
    HostId: Optional[String] = None
    HostResourceGroupArn: Optional[String] = None
    PartitionNumber: Optional[Integer] = None
    SpreadDomain: Optional[String] = None
    Tenancy_1: Optional[Tenancy] = Field(None, alias='Tenancy')


class InstanceInitiatedShutdownBehavior2(Enum):
    stop = 'stop'
    terminate = 'terminate'


class LaunchTemplate3(BaseModel):
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName: Optional[String] = None
    Version: Optional[String] = None


class CreditSpecification1(BaseModel):
    CpuCredits: String


class CpuOptions(BaseModel):
    CoreCount: Optional[Integer] = None
    ThreadsPerCore: Optional[Integer] = None


class MetadataOptions(BaseModel):
    HttpEndpoint: Optional[InstanceMetadataEndpointState] = None
    HttpProtocolIpv6: Optional[InstanceMetadataProtocolState] = None
    HttpPutResponseHopLimit: Optional[Integer] = None
    HttpTokens: Optional[HttpTokensState] = None
    InstanceMetadataTags: Optional[InstanceMetadataTagsState] = None


class PrivateDnsNameOptions(BaseModel):
    EnableResourceNameDnsAAAARecord: Optional[Boolean] = None
    EnableResourceNameDnsARecord: Optional[Boolean] = None
    HostnameType_1: Optional[HostnameType] = Field(None, alias='HostnameType')


class MaintenanceOptions(BaseModel):
    AutoRecovery: Optional[InstanceAutoRecoveryState] = None


class Action2284(Enum):
    RunInstances = 'RunInstances'


class SecurityGroup1(RootModel[List[SecurityGroupName]]):
    root: List[SecurityGroupName]


class Action2288(Enum):
    RunScheduledInstances = 'RunScheduledInstances'


class Action2292(Enum):
    SearchLocalGatewayRoutes = 'SearchLocalGatewayRoutes'


class Action2296(Enum):
    SearchTransitGatewayMulticastGroups = 'SearchTransitGatewayMulticastGroups'


class Action2300(Enum):
    SearchTransitGatewayRoutes = 'SearchTransitGatewayRoutes'


class Action2304(Enum):
    SendDiagnosticInterrupt = 'SendDiagnosticInterrupt'


class Action2308(Enum):
    StartInstances = 'StartInstances'


class Action2312(Enum):
    StartNetworkInsightsAccessScopeAnalysis = 'StartNetworkInsightsAccessScopeAnalysis'


class Action2316(Enum):
    StartNetworkInsightsAnalysis = 'StartNetworkInsightsAnalysis'


class AdditionalAccount(RootModel[List[String]]):
    root: List[String]


class FilterInArn(RootModel[List[ResourceArn]]):
    root: List[ResourceArn]


class Action2320(Enum):
    StartVpcEndpointServicePrivateDnsVerification = (
        'StartVpcEndpointServicePrivateDnsVerification'
    )


class Action2324(Enum):
    StopInstances = 'StopInstances'


class Action2328(Enum):
    TerminateClientVpnConnections = 'TerminateClientVpnConnections'


class Action2332(Enum):
    TerminateInstances = 'TerminateInstances'


class Action2336(Enum):
    UnassignIpv6Addresses = 'UnassignIpv6Addresses'


class Action2340(Enum):
    UnassignPrivateIpAddresses = 'UnassignPrivateIpAddresses'


class Action2344(Enum):
    UnassignPrivateNatGatewayAddress = 'UnassignPrivateNatGatewayAddress'


class Action2348(Enum):
    UnmonitorInstances = 'UnmonitorInstances'


class Action2352(Enum):
    UpdateSecurityGroupRuleDescriptionsEgress = (
        'UpdateSecurityGroupRuleDescriptionsEgress'
    )


class Action2356(Enum):
    UpdateSecurityGroupRuleDescriptionsIngress = (
        'UpdateSecurityGroupRuleDescriptionsIngress'
    )


class Action2360(Enum):
    WithdrawByoipCidr = 'WithdrawByoipCidr'


class AcceleratorCount(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class AcceleratorCountRequest(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class AcceleratorTotalMemoryMiB(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class AcceleratorTotalMemoryMiBRequest(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class AcceptAddressTransferRequest(BaseModel):
    Address: String
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class AcceptReservedInstancesExchangeQuoteRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ReservedInstanceIds: ReservedInstanceIdSet
    TargetConfigurations: Optional[TargetConfigurationRequestSet] = None


class AcceptReservedInstancesExchangeQuoteResult(BaseModel):
    ExchangeId: Optional[String] = None


class AcceptTransitGatewayMulticastDomainAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SubnetIds: Optional[ValueStringList] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayMulticastDomainId_1: Optional[TransitGatewayMulticastDomainId] = (
        Field(None, alias='TransitGatewayMulticastDomainId')
    )


class AcceptTransitGatewayPeeringAttachmentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class AcceptTransitGatewayVpcAttachmentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class AcceptVpcEndpointConnectionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ServiceId: VpcEndpointServiceId
    VpcEndpointIds: VpcEndpointIdList


class AcceptVpcPeeringConnectionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcPeeringConnectionId: VpcPeeringConnectionIdWithResolver


class AccountAttributeValue(BaseModel):
    AttributeValue: Optional[String] = None


class AccountAttributeValueList(RootModel[List[AccountAttributeValue]]):
    root: List[AccountAttributeValue]


class ActiveInstance(BaseModel):
    InstanceHealth: Optional[InstanceHealthStatus] = None
    InstanceId: Optional[String] = None
    InstanceType: Optional[String] = None
    SpotInstanceRequestId: Optional[String] = None


class ActiveInstanceSet(RootModel[List[ActiveInstance]]):
    root: List[ActiveInstance]


class AddIpamOperatingRegion(BaseModel):
    RegionName: Optional[String] = None


class AddIpamOperatingRegionSet(RootModel[List[AddIpamOperatingRegion]]):
    root: List[AddIpamOperatingRegion] = Field(..., max_length=50, min_length=0)


class AddPrefixListEntry(BaseModel):
    Cidr: String
    Description: Optional[String] = None


class AddedPrincipal(BaseModel):
    Principal: Optional[String] = None
    PrincipalType_1: Optional[PrincipalType] = Field(None, alias='PrincipalType')
    ServiceId: Optional[String] = None
    ServicePermissionId: Optional[String] = None


class AddedPrincipalSet(RootModel[List[AddedPrincipal]]):
    root: List[AddedPrincipal]


class Address(BaseModel):
    AllocationId: Optional[String] = None
    AssociationId: Optional[String] = None
    CarrierIp: Optional[String] = None
    CustomerOwnedIp: Optional[String] = None
    CustomerOwnedIpv4Pool: Optional[String] = None
    Domain: Optional[DomainType] = None
    InstanceId: Optional[String] = None
    NetworkBorderGroup: Optional[String] = None
    NetworkInterfaceId: Optional[String] = None
    NetworkInterfaceOwnerId: Optional[String] = None
    PrivateIpAddress: Optional[String] = None
    PublicIp: Optional[String] = None
    PublicIpv4Pool: Optional[String] = None
    Tags: Optional[TagList] = None


class AddressList(RootModel[List[Address]]):
    root: List[Address]


class AddressTransfer(BaseModel):
    AddressTransferStatus_1: Optional[AddressTransferStatus] = Field(
        None, alias='AddressTransferStatus'
    )
    AllocationId: Optional[String] = None
    PublicIp: Optional[String] = None
    TransferAccountId: Optional[String] = None
    TransferOfferAcceptedTimestamp: Optional[MillisecondDateTime] = None
    TransferOfferExpirationTimestamp: Optional[MillisecondDateTime] = None


class AddressTransferList(RootModel[List[AddressTransfer]]):
    root: List[AddressTransfer]


class AdvertiseByoipCidrRequest(BaseModel):
    Cidr: String
    DryRun: Optional[Boolean] = None


class AllocateAddressRequest(BaseModel):
    Address: Optional[PublicIpAddress] = None
    CustomerOwnedIpv4Pool: Optional[String] = None
    Domain: Optional[DomainType] = None
    DryRun: Optional[Boolean] = None
    NetworkBorderGroup: Optional[String] = None
    PublicIpv4Pool: Optional[Ipv4PoolEc2Id] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class AllocateAddressResult(BaseModel):
    AllocationId: Optional[String] = None
    CarrierIp: Optional[String] = None
    CustomerOwnedIp: Optional[String] = None
    CustomerOwnedIpv4Pool: Optional[String] = None
    Domain: Optional[DomainType] = None
    NetworkBorderGroup: Optional[String] = None
    PublicIp: Optional[String] = None
    PublicIpv4Pool: Optional[String] = None


class AllocateHostsRequest(BaseModel):
    AutoPlacement_1: Optional[AutoPlacement] = Field(None, alias='AutoPlacement')
    AvailabilityZone: String
    ClientToken: Optional[String] = None
    HostMaintenance_1: Optional[HostMaintenance] = Field(None, alias='HostMaintenance')
    HostRecovery_1: Optional[HostRecovery] = Field(None, alias='HostRecovery')
    InstanceFamily: Optional[String] = None
    InstanceType: Optional[String] = None
    OutpostArn: Optional[String] = None
    Quantity: Integer
    TagSpecifications: Optional[TagSpecificationList] = None


class AllowedPrincipal(BaseModel):
    Principal: Optional[String] = None
    PrincipalType_1: Optional[PrincipalType] = Field(None, alias='PrincipalType')
    ServiceId: Optional[String] = None
    ServicePermissionId: Optional[String] = None
    Tags: Optional[TagList] = None


class AllowedPrincipalSet(RootModel[List[AllowedPrincipal]]):
    root: List[AllowedPrincipal]


class AlternatePathHint(BaseModel):
    ComponentArn: Optional[String] = None
    ComponentId: Optional[String] = None


class AlternatePathHintList(RootModel[List[AlternatePathHint]]):
    root: List[AlternatePathHint]


class AnalysisAclRule(BaseModel):
    Cidr: Optional[String] = None
    Egress: Optional[Boolean] = None
    PortRange_1: Optional[PortRange] = Field(None, alias='PortRange')
    Protocol: Optional[String] = None
    RuleAction: Optional[String] = None
    RuleNumber: Optional[Integer] = None


class AnalysisComponent(BaseModel):
    Arn: Optional[String] = None
    Id: Optional[String] = None
    Name: Optional[String] = None


class AnalysisComponentList(RootModel[List[AnalysisComponent]]):
    root: List[AnalysisComponent]


class AnalysisLoadBalancerListener(BaseModel):
    InstancePort: Optional[Port] = None
    LoadBalancerPort: Optional[Port] = None


class AnalysisLoadBalancerTarget(BaseModel):
    Address: Optional[IpAddress] = None
    AvailabilityZone: Optional[String] = None
    Instance: Optional[AnalysisComponent] = None
    Port_1: Optional[Port] = Field(None, alias='Port')


class AnalysisPacketHeader(BaseModel):
    DestinationAddresses: Optional[IpAddressList] = None
    DestinationPortRanges: Optional[PortRangeList] = None
    Protocol: Optional[String] = None
    SourceAddresses: Optional[IpAddressList] = None
    SourcePortRanges: Optional[PortRangeList] = None


class AnalysisRouteTableRoute(BaseModel):
    CarrierGatewayId: Optional[String] = None
    CoreNetworkArn: Optional[ResourceArn] = None
    DestinationCidr: Optional[String] = None
    DestinationPrefixListId: Optional[String] = None
    EgressOnlyInternetGatewayId: Optional[String] = None
    GatewayId: Optional[String] = None
    InstanceId: Optional[String] = None
    LocalGatewayId: Optional[String] = None
    NatGatewayId: Optional[String] = None
    NetworkInterfaceId: Optional[String] = None
    Origin: Optional[String] = None
    State: Optional[String] = None
    TransitGatewayId: Optional[String] = None
    VpcPeeringConnectionId: Optional[String] = None


class AnalysisSecurityGroupRule(BaseModel):
    Cidr: Optional[String] = None
    Direction: Optional[String] = None
    PortRange_1: Optional[PortRange] = Field(None, alias='PortRange')
    PrefixListId: Optional[String] = None
    Protocol: Optional[String] = None
    SecurityGroupId: Optional[String] = None


class ArnList(RootModel[List[ResourceArn]]):
    root: List[ResourceArn]


class AssignedPrivateIpAddress(BaseModel):
    PrivateIpAddress: Optional[String] = None


class AssignedPrivateIpAddressList(RootModel[List[AssignedPrivateIpAddress]]):
    root: List[AssignedPrivateIpAddress]


class AssociateAddressRequest(BaseModel):
    AllocationId_1: Optional[AllocationId] = Field(None, alias='AllocationId')
    AllowReassociation: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    PrivateIpAddress: Optional[String] = None
    PublicIp: Optional[EipAllocationPublicIp] = None


class AssociateAddressResult(BaseModel):
    AssociationId: Optional[String] = None


class AssociateClientVpnTargetNetworkRequest(BaseModel):
    ClientToken: Optional[String] = None
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')


class AssociateDhcpOptionsRequest(BaseModel):
    DhcpOptionsId: DefaultingDhcpOptionsId
    DryRun: Optional[Boolean] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class AssociateEnclaveCertificateIamRoleRequest(BaseModel):
    CertificateArn: CertificateId
    DryRun: Optional[Boolean] = None
    RoleArn: RoleId


class AssociateEnclaveCertificateIamRoleResult(BaseModel):
    CertificateS3BucketName: Optional[String] = None
    CertificateS3ObjectKey: Optional[String] = None
    EncryptionKmsKeyId: Optional[String] = None


class AssociateIpamResourceDiscoveryRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamId_1: IpamId = Field(..., alias='IpamId')
    IpamResourceDiscoveryId_1: IpamResourceDiscoveryId = Field(
        ..., alias='IpamResourceDiscoveryId'
    )
    TagSpecifications: Optional[TagSpecificationList] = None


class AssociateRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GatewayId: Optional[RouteGatewayId] = None
    RouteTableId_1: RouteTableId = Field(..., alias='RouteTableId')
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')


class AssociateSubnetCidrBlockRequest(BaseModel):
    Ipv6CidrBlock: String
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')


class AssociateTransitGatewayMulticastDomainRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SubnetIds: TransitGatewaySubnetIdList
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )
    TransitGatewayMulticastDomainId_1: TransitGatewayMulticastDomainId = Field(
        ..., alias='TransitGatewayMulticastDomainId'
    )


class AssociateTransitGatewayPolicyTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )
    TransitGatewayPolicyTableId_1: TransitGatewayPolicyTableId = Field(
        ..., alias='TransitGatewayPolicyTableId'
    )


class AssociateTransitGatewayRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class AssociateTrunkInterfaceRequest(BaseModel):
    BranchInterfaceId: NetworkInterfaceId
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    GreKey: Optional[Integer] = None
    TrunkInterfaceId: NetworkInterfaceId
    VlanId: Optional[Integer] = None


class AssociateVpcCidrBlockRequest(BaseModel):
    AmazonProvidedIpv6CidrBlock: Optional[Boolean] = None
    CidrBlock: Optional[String] = None
    Ipv4IpamPoolId: Optional[IpamPoolId] = None
    Ipv4NetmaskLength: Optional[NetmaskLength] = None
    Ipv6CidrBlock: Optional[String] = None
    Ipv6CidrBlockNetworkBorderGroup: Optional[String] = None
    Ipv6IpamPoolId: Optional[IpamPoolId] = None
    Ipv6NetmaskLength: Optional[NetmaskLength] = None
    Ipv6Pool: Optional[Ipv6PoolEc2Id] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class AssociatedRole(BaseModel):
    AssociatedRoleArn: Optional[ResourceArn] = None
    CertificateS3BucketName: Optional[String] = None
    CertificateS3ObjectKey: Optional[String] = None
    EncryptionKmsKeyId: Optional[String] = None


class AssociatedRolesList(RootModel[List[AssociatedRole]]):
    root: List[AssociatedRole]


class AssociatedTargetNetwork(BaseModel):
    NetworkId: Optional[String] = None
    NetworkType: Optional[AssociatedNetworkType] = None


class AssociatedTargetNetworkSet(RootModel[List[AssociatedTargetNetwork]]):
    root: List[AssociatedTargetNetwork]


class AssociationIdList(RootModel[List[IamInstanceProfileAssociationId]]):
    root: List[IamInstanceProfileAssociationId]


class AssociationStatus(BaseModel):
    Code: Optional[AssociationStatusCode] = None
    Message: Optional[String] = None


class AthenaIntegration(BaseModel):
    IntegrationResultS3DestinationArn: String
    PartitionEndDate: Optional[MillisecondDateTime] = None
    PartitionLoadFrequency_1: PartitionLoadFrequency = Field(
        ..., alias='PartitionLoadFrequency'
    )
    PartitionStartDate: Optional[MillisecondDateTime] = None


class AthenaIntegrationsSet(RootModel[List[AthenaIntegration]]):
    root: List[AthenaIntegration] = Field(..., max_length=10, min_length=1)


class AttachClassicLinkVpcResult(BaseModel):
    Return: Optional[Boolean] = None


class AttachInternetGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InternetGatewayId_1: InternetGatewayId = Field(..., alias='InternetGatewayId')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class AttachNetworkInterfaceResult(BaseModel):
    AttachmentId: Optional[String] = None
    NetworkCardIndex: Optional[Integer] = None


class AttachVerifiedAccessTrustProviderRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessInstanceId_1: VerifiedAccessInstanceId = Field(
        ..., alias='VerifiedAccessInstanceId'
    )
    VerifiedAccessTrustProviderId_1: VerifiedAccessTrustProviderId = Field(
        ..., alias='VerifiedAccessTrustProviderId'
    )


class AttachVolumeRequest(BaseModel):
    Device: String
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class AttachVpnGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')
    VpnGatewayId_1: VpnGatewayId = Field(..., alias='VpnGatewayId')


class AttachVpnGatewayResult(BaseModel):
    VpcAttachment_1: Optional[VpcAttachment] = Field(None, alias='VpcAttachment')


class AttachmentEnaSrdUdpSpecification(BaseModel):
    EnaSrdUdpEnabled: Optional[Boolean] = None


class AttributeBooleanValue(BaseModel):
    Value: Optional[Boolean] = None


class AttributeValue(BaseModel):
    Value: Optional[String] = None


class AuthorizeClientVpnIngressRequest(BaseModel):
    AccessGroupId: Optional[String] = None
    AuthorizeAllGroups: Optional[Boolean] = None
    ClientToken: Optional[String] = None
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    TargetNetworkCidr: String


class AvailabilityZoneMessage(BaseModel):
    Message: Optional[String] = None


class AvailabilityZoneMessageList(RootModel[List[AvailabilityZoneMessage]]):
    root: List[AvailabilityZoneMessage]


class AvailabilityZoneStringList(RootModel[List[String]]):
    root: List[String]


class BaselineEbsBandwidthMbps(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class BaselineEbsBandwidthMbpsRequest(BaseModel):
    Max: Optional[Integer] = None
    Min: Optional[Integer] = None


class BillingProductList(RootModel[List[String]]):
    root: List[String]


class BundleTaskError(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class ByoipCidr(BaseModel):
    Cidr: Optional[String] = None
    Description: Optional[String] = None
    State: Optional[ByoipCidrState] = None
    StatusMessage: Optional[String] = None


class ByoipCidrSet(RootModel[List[ByoipCidr]]):
    root: List[ByoipCidr]


class CancelCapacityReservationFleetError(BaseModel):
    Code: Optional[CancelCapacityReservationFleetErrorCode] = None
    Message: Optional[CancelCapacityReservationFleetErrorMessage] = None


class CancelCapacityReservationFleetsRequest(BaseModel):
    CapacityReservationFleetIds: CapacityReservationFleetIdSet
    DryRun: Optional[Boolean] = None


class CancelCapacityReservationRequest(BaseModel):
    CapacityReservationId_1: CapacityReservationId = Field(
        ..., alias='CapacityReservationId'
    )
    DryRun: Optional[Boolean] = None


class CancelConversionRequest(BaseModel):
    ConversionTaskId_1: ConversionTaskId = Field(..., alias='ConversionTaskId')
    DryRun: Optional[Boolean] = None
    ReasonMessage: Optional[String] = None


class CancelExportTaskRequest(BaseModel):
    ExportTaskId: ExportVmTaskId


class CancelImageLaunchPermissionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')


class CancelImportTaskRequest(BaseModel):
    CancelReason: Optional[String] = None
    DryRun: Optional[Boolean] = None
    ImportTaskId_1: Optional[ImportTaskId] = Field(None, alias='ImportTaskId')


class CancelImportTaskResult(BaseModel):
    ImportTaskId: Optional[String] = None
    PreviousState: Optional[String] = None
    State: Optional[String] = None


class CancelReservedInstancesListingRequest(BaseModel):
    ReservedInstancesListingId_1: ReservedInstancesListingId = Field(
        ..., alias='ReservedInstancesListingId'
    )


class CancelSpotFleetRequestsError(BaseModel):
    Code: Optional[CancelBatchErrorCode] = None
    Message: Optional[String] = None


class CancelSpotFleetRequestsErrorItem(BaseModel):
    Error: Optional[CancelSpotFleetRequestsError] = None
    SpotFleetRequestId: Optional[String] = None


class CancelSpotFleetRequestsErrorSet(
    RootModel[List[CancelSpotFleetRequestsErrorItem]]
):
    root: List[CancelSpotFleetRequestsErrorItem]


class CancelSpotFleetRequestsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SpotFleetRequestIds: SpotFleetRequestIdList
    TerminateInstances: Boolean


class CancelSpotFleetRequestsSuccessItem(BaseModel):
    CurrentSpotFleetRequestState: Optional[BatchState] = None
    PreviousSpotFleetRequestState: Optional[BatchState] = None
    SpotFleetRequestId: Optional[String] = None


class CancelSpotFleetRequestsSuccessSet(
    RootModel[List[CancelSpotFleetRequestsSuccessItem]]
):
    root: List[CancelSpotFleetRequestsSuccessItem]


class CancelSpotInstanceRequestsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SpotInstanceRequestIds: SpotInstanceRequestIdList


class CancelledSpotInstanceRequest(BaseModel):
    SpotInstanceRequestId: Optional[String] = None
    State: Optional[CancelSpotInstanceRequestState] = None


class CancelledSpotInstanceRequestList(RootModel[List[CancelledSpotInstanceRequest]]):
    root: List[CancelledSpotInstanceRequest]


class CapacityAllocation(BaseModel):
    AllocationType_1: Optional[AllocationType] = Field(None, alias='AllocationType')
    Count: Optional[Integer] = None


class CapacityAllocations(RootModel[List[CapacityAllocation]]):
    root: List[CapacityAllocation]


class CapacityReservation(BaseModel):
    AvailabilityZone: Optional[String] = None
    AvailabilityZoneId: Optional[String] = None
    AvailableInstanceCount: Optional[Integer] = None
    CapacityAllocations_1: Optional[CapacityAllocations] = Field(
        None, alias='CapacityAllocations'
    )
    CapacityReservationArn: Optional[String] = None
    CapacityReservationFleetId: Optional[String] = None
    CapacityReservationId: Optional[String] = None
    CreateDate: Optional[DateTime] = None
    EbsOptimized: Optional[Boolean] = None
    EndDate: Optional[DateTime] = None
    EndDateType_1: Optional[EndDateType] = Field(None, alias='EndDateType')
    EphemeralStorage: Optional[Boolean] = None
    InstanceMatchCriteria_1: Optional[InstanceMatchCriteria] = Field(
        None, alias='InstanceMatchCriteria'
    )
    InstancePlatform: Optional[CapacityReservationInstancePlatform] = None
    InstanceType: Optional[String] = None
    OutpostArn_1: Optional[OutpostArn] = Field(None, alias='OutpostArn')
    OwnerId: Optional[String] = None
    PlacementGroupArn_1: Optional[PlacementGroupArn] = Field(
        None, alias='PlacementGroupArn'
    )
    StartDate: Optional[MillisecondDateTime] = None
    State: Optional[CapacityReservationState] = None
    Tags: Optional[TagList] = None
    Tenancy: Optional[CapacityReservationTenancy] = None
    TotalInstanceCount: Optional[Integer] = None


class CapacityReservationFleetCancellationState(BaseModel):
    CapacityReservationFleetId_1: Optional[CapacityReservationFleetId] = Field(
        None, alias='CapacityReservationFleetId'
    )
    CurrentFleetState: Optional[CapacityReservationFleetState] = None
    PreviousFleetState: Optional[CapacityReservationFleetState] = None


class CapacityReservationFleetCancellationStateSet(
    RootModel[List[CapacityReservationFleetCancellationState]]
):
    root: List[CapacityReservationFleetCancellationState]


class CapacityReservationGroup(BaseModel):
    GroupArn: Optional[String] = None
    OwnerId: Optional[String] = None


class CapacityReservationGroupSet(RootModel[List[CapacityReservationGroup]]):
    root: List[CapacityReservationGroup]


class CapacityReservationOptions(BaseModel):
    UsageStrategy: Optional[FleetCapacityReservationUsageStrategy] = None


class CapacityReservationOptionsRequest(BaseModel):
    UsageStrategy: Optional[FleetCapacityReservationUsageStrategy] = None


class CapacityReservationSet(RootModel[List[CapacityReservation]]):
    root: List[CapacityReservation]


class CapacityReservationTarget(BaseModel):
    CapacityReservationId_1: Optional[CapacityReservationId] = Field(
        None, alias='CapacityReservationId'
    )
    CapacityReservationResourceGroupArn: Optional[String] = None


class CapacityReservationTargetResponse(BaseModel):
    CapacityReservationId: Optional[String] = None
    CapacityReservationResourceGroupArn: Optional[String] = None


class CarrierGateway(BaseModel):
    CarrierGatewayId_1: Optional[CarrierGatewayId] = Field(
        None, alias='CarrierGatewayId'
    )
    OwnerId: Optional[String] = None
    State: Optional[CarrierGatewayState] = None
    Tags: Optional[TagList] = None
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class CarrierGatewaySet(RootModel[List[CarrierGateway]]):
    root: List[CarrierGateway]


class CertificateAuthentication(BaseModel):
    ClientRootCertificateChain: Optional[String] = None


class CertificateAuthenticationRequest(BaseModel):
    ClientRootCertificateChainArn: Optional[String] = None


class CidrAuthorizationContext(BaseModel):
    Message: String
    Signature: String


class CidrBlock(BaseModel):
    CidrBlock: Optional[String] = None


class CidrBlockSet(RootModel[List[CidrBlock]]):
    root: List[CidrBlock]


class ClassicLinkDnsSupport(BaseModel):
    ClassicLinkDnsSupported: Optional[Boolean] = None
    VpcId: Optional[String] = None


class ClassicLinkDnsSupportList(RootModel[List[ClassicLinkDnsSupport]]):
    root: List[ClassicLinkDnsSupport]


class ClassicLoadBalancer(BaseModel):
    Name: Optional[String] = None


class ClassicLoadBalancers(RootModel[List[ClassicLoadBalancer]]):
    root: List[ClassicLoadBalancer] = Field(..., max_length=5, min_length=1)


class ClassicLoadBalancersConfig(BaseModel):
    ClassicLoadBalancers_1: Optional[ClassicLoadBalancers] = Field(
        None, alias='ClassicLoadBalancers'
    )


class ClientCertificateRevocationListStatus(BaseModel):
    Code: Optional[ClientCertificateRevocationListStatusCode] = None
    Message: Optional[String] = None


class ClientLoginBannerResponseOptions(BaseModel):
    BannerText: Optional[String] = None
    Enabled: Optional[Boolean] = None


class ClientVpnAuthorizationRuleStatus(BaseModel):
    Code: Optional[ClientVpnAuthorizationRuleStatusCode] = None
    Message: Optional[String] = None


class ClientVpnConnectionStatus(BaseModel):
    Code: Optional[ClientVpnConnectionStatusCode] = None
    Message: Optional[String] = None


class ClientVpnEndpointAttributeStatus(BaseModel):
    Code: Optional[ClientVpnEndpointAttributeStatusCode] = None
    Message: Optional[String] = None


class ClientVpnEndpointStatus(BaseModel):
    Code: Optional[ClientVpnEndpointStatusCode] = None
    Message: Optional[String] = None


class ClientVpnRouteStatus(BaseModel):
    Code: Optional[ClientVpnRouteStatusCode] = None
    Message: Optional[String] = None


class ClientVpnSecurityGroupIdSet(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class CloudWatchLogOptions(BaseModel):
    LogEnabled: Optional[Boolean] = None
    LogGroupArn: Optional[String] = None
    LogOutputFormat: Optional[String] = None


class CloudWatchLogOptionsSpecification(BaseModel):
    LogEnabled: Optional[Boolean] = None
    LogGroupArn: Optional[CloudWatchLogGroupArn] = None
    LogOutputFormat: Optional[String] = None


class CoipAddressUsage(BaseModel):
    AllocationId: Optional[String] = None
    AwsAccountId: Optional[String] = None
    AwsService: Optional[String] = None
    CoIp: Optional[String] = None


class CoipAddressUsageSet(RootModel[List[CoipAddressUsage]]):
    root: List[CoipAddressUsage]


class CoipCidr(BaseModel):
    Cidr: Optional[String] = None
    CoipPoolId: Optional[Ipv4PoolCoipId] = None
    LocalGatewayRouteTableId: Optional[String] = None


class CoipPool(BaseModel):
    LocalGatewayRouteTableId: Optional[LocalGatewayRoutetableId] = None
    PoolArn: Optional[ResourceArn] = None
    PoolCidrs: Optional[ValueStringList] = None
    PoolId: Optional[Ipv4PoolCoipId] = None
    Tags: Optional[TagList] = None


class CoipPoolIdSet(RootModel[List[Ipv4PoolCoipId]]):
    root: List[Ipv4PoolCoipId]


class CoipPoolSet(RootModel[List[CoipPool]]):
    root: List[CoipPool]


class ConfirmProductInstanceRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    ProductCode: String


class ConfirmProductInstanceResult(BaseModel):
    OwnerId: Optional[String] = None
    Return: Optional[Boolean] = None


class ConnectionLogResponseOptions(BaseModel):
    CloudwatchLogGroup: Optional[String] = None
    CloudwatchLogStream: Optional[String] = None
    Enabled: Optional[Boolean] = None


class ConnectionNotification(BaseModel):
    ConnectionEvents: Optional[ValueStringList] = None
    ConnectionNotificationArn: Optional[String] = None
    ConnectionNotificationId: Optional[String] = None
    ConnectionNotificationState_1: Optional[ConnectionNotificationState] = Field(
        None, alias='ConnectionNotificationState'
    )
    ConnectionNotificationType_1: Optional[ConnectionNotificationType] = Field(
        None, alias='ConnectionNotificationType'
    )
    ServiceId: Optional[String] = None
    VpcEndpointId: Optional[String] = None


class ConnectionNotificationSet(RootModel[List[ConnectionNotification]]):
    root: List[ConnectionNotification]


class ConversionIdStringList(RootModel[List[ConversionTaskId]]):
    root: List[ConversionTaskId]


class CopyFpgaImageRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Name: Optional[String] = None
    SourceFpgaImageId: String
    SourceRegion: String


class CopyFpgaImageResult(BaseModel):
    FpgaImageId: Optional[String] = None


class CopyImageRequest(BaseModel):
    ClientToken: Optional[String] = None
    CopyImageTags: Optional[Boolean] = None
    Description: Optional[String] = None
    DestinationOutpostArn: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    Name: String
    SourceImageId: String
    SourceRegion: String


class CopyImageResult(BaseModel):
    ImageId: Optional[String] = None


class CopySnapshotRequest(BaseModel):
    Description: Optional[String] = None
    DestinationOutpostArn: Optional[String] = None
    DestinationRegion: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    PresignedUrl: Optional[CopySnapshotRequestPSU] = None
    SourceRegion: String
    SourceSnapshotId: String
    TagSpecifications: Optional[TagSpecificationList] = None


class CopySnapshotResult(BaseModel):
    SnapshotId: Optional[String] = None
    Tags: Optional[TagList] = None


class CpuOptionsRequest(BaseModel):
    CoreCount: Optional[Integer] = None
    ThreadsPerCore: Optional[Integer] = None


class CreateCapacityReservationRequest(BaseModel):
    AvailabilityZone: Optional[String] = None
    AvailabilityZoneId: Optional[String] = None
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    EbsOptimized: Optional[Boolean] = None
    EndDate: Optional[DateTime] = None
    EndDateType_1: Optional[EndDateType] = Field(None, alias='EndDateType')
    EphemeralStorage: Optional[Boolean] = None
    InstanceCount: Integer
    InstanceMatchCriteria_1: Optional[InstanceMatchCriteria] = Field(
        None, alias='InstanceMatchCriteria'
    )
    InstancePlatform: CapacityReservationInstancePlatform
    InstanceType: String
    OutpostArn_1: Optional[OutpostArn] = Field(None, alias='OutpostArn')
    PlacementGroupArn_1: Optional[PlacementGroupArn] = Field(
        None, alias='PlacementGroupArn'
    )
    TagSpecifications: Optional[TagSpecificationList] = None
    Tenancy: Optional[CapacityReservationTenancy] = None


class CreateCapacityReservationResult(BaseModel):
    CapacityReservation_1: Optional[CapacityReservation] = Field(
        None, alias='CapacityReservation'
    )


class CreateCarrierGatewayRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateCarrierGatewayResult(BaseModel):
    CarrierGateway_1: Optional[CarrierGateway] = Field(None, alias='CarrierGateway')


class CreateClientVpnEndpointResult(BaseModel):
    ClientVpnEndpointId: Optional[String] = None
    DnsName: Optional[String] = None
    Status: Optional[ClientVpnEndpointStatus] = None


class CreateClientVpnRouteRequest(BaseModel):
    ClientToken: Optional[String] = None
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    Description: Optional[String] = None
    DestinationCidrBlock: String
    DryRun: Optional[Boolean] = None
    TargetVpcSubnetId: SubnetId


class CreateClientVpnRouteResult(BaseModel):
    Status: Optional[ClientVpnRouteStatus] = None


class CreateCoipCidrRequest(BaseModel):
    Cidr: String
    CoipPoolId: Ipv4PoolCoipId
    DryRun: Optional[Boolean] = None


class CreateCoipCidrResult(BaseModel):
    CoipCidr_1: Optional[CoipCidr] = Field(None, alias='CoipCidr')


class CreateCoipPoolRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableId: LocalGatewayRoutetableId
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateCoipPoolResult(BaseModel):
    CoipPool_1: Optional[CoipPool] = Field(None, alias='CoipPool')


class CreateCustomerGatewayRequest(BaseModel):
    BgpAsn: Optional[Integer] = None
    CertificateArn: Optional[String] = None
    DeviceName: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpAddress: Optional[String] = None
    PublicIp: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    Type: GatewayType


class CreateDefaultSubnetRequest(BaseModel):
    AvailabilityZone: String
    DryRun: Optional[Boolean] = None
    Ipv6Native: Optional[Boolean] = None


class CreateEgressOnlyInternetGatewayRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateFlowLogsRequest(BaseModel):
    ClientToken: Optional[String] = None
    DeliverCrossAccountRole: Optional[String] = None
    DeliverLogsPermissionArn: Optional[String] = None
    DestinationOptions: Optional[DestinationOptionsRequest] = None
    DryRun: Optional[Boolean] = None
    LogDestination: Optional[String] = None
    LogDestinationType_1: Optional[LogDestinationType] = Field(
        None, alias='LogDestinationType'
    )
    LogFormat: Optional[String] = None
    LogGroupName: Optional[String] = None
    MaxAggregationInterval: Optional[Integer] = None
    ResourceIds: FlowLogResourceIds
    ResourceType: FlowLogsResourceType
    TagSpecifications: Optional[TagSpecificationList] = None
    TrafficType_1: Optional[TrafficType] = Field(None, alias='TrafficType')


class CreateFpgaImageResult(BaseModel):
    FpgaImageGlobalId: Optional[String] = None
    FpgaImageId: Optional[String] = None


class CreateImageResult(BaseModel):
    ImageId: Optional[String] = None


class CreateInternetGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateIpamRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    OperatingRegions: Optional[AddIpamOperatingRegionSet] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateIpamResourceDiscoveryRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    OperatingRegions: Optional[AddIpamOperatingRegionSet] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateIpamScopeRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamId_1: IpamId = Field(..., alias='IpamId')
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateKeyPairRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    KeyFormat_1: Optional[KeyFormat] = Field(None, alias='KeyFormat')
    KeyName: String
    KeyType_1: Optional[KeyType] = Field(None, alias='KeyType')
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateLocalGatewayRouteRequest(BaseModel):
    DestinationCidrBlock: Optional[String] = None
    DestinationPrefixListId: Optional[PrefixListResourceId] = None
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableId: LocalGatewayRoutetableId
    LocalGatewayVirtualInterfaceGroupId_1: Optional[
        LocalGatewayVirtualInterfaceGroupId
    ] = Field(None, alias='LocalGatewayVirtualInterfaceGroupId')
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )


class CreateLocalGatewayRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LocalGatewayId_1: LocalGatewayId = Field(..., alias='LocalGatewayId')
    Mode: Optional[LocalGatewayRouteTableMode] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableId: LocalGatewayRoutetableId
    LocalGatewayVirtualInterfaceGroupId_1: LocalGatewayVirtualInterfaceGroupId = Field(
        ..., alias='LocalGatewayVirtualInterfaceGroupId'
    )
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateLocalGatewayRouteTableVpcAssociationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableId: LocalGatewayRoutetableId
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateNetworkAclRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateNetworkInterfacePermissionRequest(BaseModel):
    AwsAccountId: Optional[String] = None
    AwsService: Optional[String] = None
    DryRun: Optional[Boolean] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    Permission: InterfacePermissionType


class CreatePlacementGroupRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupName: Optional[String] = None
    PartitionCount: Optional[Integer] = None
    SpreadLevel_1: Optional[SpreadLevel] = Field(None, alias='SpreadLevel')
    Strategy: Optional[PlacementStrategy] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreatePublicIpv4PoolRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreatePublicIpv4PoolResult(BaseModel):
    PoolId: Optional[Ipv4PoolEc2Id] = None


class CreateReplaceRootVolumeTaskRequest(BaseModel):
    ClientToken: Optional[String] = None
    DeleteReplacedRootVolume: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateReservedInstancesListingRequest(BaseModel):
    ClientToken: String
    InstanceCount: Integer
    PriceSchedules: PriceScheduleSpecificationList
    ReservedInstancesId: ReservationId


class CreateRestoreImageTaskRequest(BaseModel):
    Bucket: String
    DryRun: Optional[Boolean] = None
    Name: Optional[String] = None
    ObjectKey: String
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateRestoreImageTaskResult(BaseModel):
    ImageId: Optional[String] = None


class CreateRouteRequest(BaseModel):
    CarrierGatewayId_1: Optional[CarrierGatewayId] = Field(
        None, alias='CarrierGatewayId'
    )
    CoreNetworkArn_1: Optional[CoreNetworkArn] = Field(None, alias='CoreNetworkArn')
    DestinationCidrBlock: Optional[String] = None
    DestinationIpv6CidrBlock: Optional[String] = None
    DestinationPrefixListId: Optional[PrefixListResourceId] = None
    DryRun: Optional[Boolean] = None
    EgressOnlyInternetGatewayId_1: Optional[EgressOnlyInternetGatewayId] = Field(
        None, alias='EgressOnlyInternetGatewayId'
    )
    GatewayId: Optional[RouteGatewayId] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    LocalGatewayId_1: Optional[LocalGatewayId] = Field(None, alias='LocalGatewayId')
    NatGatewayId_1: Optional[NatGatewayId] = Field(None, alias='NatGatewayId')
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    RouteTableId_1: RouteTableId = Field(..., alias='RouteTableId')
    TransitGatewayId_1: Optional[TransitGatewayId] = Field(
        None, alias='TransitGatewayId'
    )
    VpcEndpointId_1: Optional[VpcEndpointId] = Field(None, alias='VpcEndpointId')
    VpcPeeringConnectionId_1: Optional[VpcPeeringConnectionId] = Field(
        None, alias='VpcPeeringConnectionId'
    )


class CreateRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateSecurityGroupRequest(BaseModel):
    Description: String
    DryRun: Optional[Boolean] = None
    GroupName: String
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class CreateSecurityGroupResult(BaseModel):
    GroupId: Optional[String] = None
    Tags: Optional[TagList] = None


class CreateSnapshotRequest(BaseModel):
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    OutpostArn: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class CreateSpotDatafeedSubscriptionRequest(BaseModel):
    Bucket: String
    DryRun: Optional[Boolean] = None
    Prefix: Optional[String] = None


class CreateStoreImageTaskResult(BaseModel):
    ObjectKey: Optional[String] = None


class CreateSubnetCidrReservationRequest(BaseModel):
    Cidr: String
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    ReservationType: SubnetCidrReservationType
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateSubnetRequest(BaseModel):
    AvailabilityZone: Optional[String] = None
    AvailabilityZoneId: Optional[String] = None
    CidrBlock: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Ipv6CidrBlock: Optional[String] = None
    Ipv6Native: Optional[Boolean] = None
    OutpostArn: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateTrafficMirrorFilterRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateTrafficMirrorFilterRuleRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DestinationCidrBlock: String
    DestinationPortRange: Optional[TrafficMirrorPortRangeRequest] = None
    DryRun: Optional[Boolean] = None
    Protocol: Optional[Integer] = None
    RuleAction: TrafficMirrorRuleAction
    RuleNumber: Integer
    SourceCidrBlock: String
    SourcePortRange: Optional[TrafficMirrorPortRangeRequest] = None
    TrafficDirection_1: TrafficDirection = Field(..., alias='TrafficDirection')
    TrafficMirrorFilterId_1: TrafficMirrorFilterId = Field(
        ..., alias='TrafficMirrorFilterId'
    )


class CreateTrafficMirrorSessionRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    PacketLength: Optional[Integer] = None
    SessionNumber: Integer
    TagSpecifications: Optional[TagSpecificationList] = None
    TrafficMirrorFilterId_1: TrafficMirrorFilterId = Field(
        ..., alias='TrafficMirrorFilterId'
    )
    TrafficMirrorTargetId_1: TrafficMirrorTargetId = Field(
        ..., alias='TrafficMirrorTargetId'
    )
    VirtualNetworkId: Optional[Integer] = None


class CreateTrafficMirrorSessionResult(BaseModel):
    ClientToken: Optional[String] = None
    TrafficMirrorSession_1: Optional[TrafficMirrorSession] = Field(
        None, alias='TrafficMirrorSession'
    )


class CreateTrafficMirrorTargetRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    GatewayLoadBalancerEndpointId: Optional[VpcEndpointId] = None
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    NetworkLoadBalancerArn: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateTransitGatewayConnectRequestOptions(BaseModel):
    Protocol: ProtocolValue


class CreateTransitGatewayMulticastDomainRequestOptions(BaseModel):
    AutoAcceptSharedAssociations: Optional[AutoAcceptSharedAssociationsValue] = None
    Igmpv2Support: Optional[Igmpv2SupportValue] = None
    StaticSourcesSupport: Optional[StaticSourcesSupportValue] = None


class CreateTransitGatewayPeeringAttachmentRequestOptions(BaseModel):
    DynamicRouting: Optional[DynamicRoutingValue] = None


class CreateTransitGatewayPolicyTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TransitGatewayId_1: TransitGatewayId = Field(..., alias='TransitGatewayId')


class CreateTransitGatewayPrefixListReferenceRequest(BaseModel):
    Blackhole: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    PrefixListId: PrefixListResourceId
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class CreateTransitGatewayRouteRequest(BaseModel):
    Blackhole: Optional[Boolean] = None
    DestinationCidrBlock: String
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class CreateTransitGatewayRouteTableAnnouncementRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PeeringAttachmentId: TransitGatewayAttachmentId
    TagSpecifications: Optional[TagSpecificationList] = None
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class CreateTransitGatewayRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TransitGatewayId_1: TransitGatewayId = Field(..., alias='TransitGatewayId')


class CreateTransitGatewayVpcAttachmentRequestOptions(BaseModel):
    ApplianceModeSupport: Optional[ApplianceModeSupportValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    Ipv6Support: Optional[Ipv6SupportValue] = None


class CreateVerifiedAccessEndpointEniOptions(BaseModel):
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None


class CreateVerifiedAccessEndpointSubnetIdList(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class CreateVerifiedAccessGroupRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    PolicyDocument: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VerifiedAccessInstanceId_1: VerifiedAccessInstanceId = Field(
        ..., alias='VerifiedAccessInstanceId'
    )


class CreateVerifiedAccessGroupResult(BaseModel):
    VerifiedAccessGroup_1: Optional[VerifiedAccessGroup] = Field(
        None, alias='VerifiedAccessGroup'
    )


class CreateVerifiedAccessInstanceRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateVerifiedAccessTrustProviderDeviceOptions(BaseModel):
    TenantId: Optional[String] = None


class CreateVerifiedAccessTrustProviderOidcOptions(BaseModel):
    AuthorizationEndpoint: Optional[String] = None
    ClientId: Optional[String] = None
    ClientSecret: Optional[String] = None
    Issuer: Optional[String] = None
    Scope: Optional[String] = None
    TokenEndpoint: Optional[String] = None
    UserInfoEndpoint: Optional[String] = None


class CreateVerifiedAccessTrustProviderRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DeviceOptions: Optional[CreateVerifiedAccessTrustProviderDeviceOptions] = None
    DeviceTrustProviderType_1: Optional[DeviceTrustProviderType] = Field(
        None, alias='DeviceTrustProviderType'
    )
    DryRun: Optional[Boolean] = None
    OidcOptions: Optional[CreateVerifiedAccessTrustProviderOidcOptions] = None
    PolicyReferenceName: String
    TagSpecifications: Optional[TagSpecificationList] = None
    TrustProviderType_1: TrustProviderType = Field(..., alias='TrustProviderType')
    UserTrustProviderType_1: Optional[UserTrustProviderType] = Field(
        None, alias='UserTrustProviderType'
    )


class CreateVolumePermission(BaseModel):
    Group: Optional[PermissionGroup] = None
    UserId: Optional[String] = None


class CreateVolumePermissionList(RootModel[List[CreateVolumePermission]]):
    root: List[CreateVolumePermission]


class CreateVolumePermissionModifications(BaseModel):
    Add: Optional[CreateVolumePermissionList] = None
    Remove: Optional[CreateVolumePermissionList] = None


class CreateVolumeRequest(BaseModel):
    AvailabilityZone: AvailabilityZoneName
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    Iops: Optional[Integer] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    MultiAttachEnabled: Optional[Boolean] = None
    OutpostArn: Optional[String] = None
    Size: Optional[Integer] = None
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    TagSpecifications: Optional[TagSpecificationList] = None
    Throughput: Optional[Integer] = None
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')


class CreateVpcEndpointConnectionNotificationRequest(BaseModel):
    ClientToken: Optional[String] = None
    ConnectionEvents: ValueStringList
    ConnectionNotificationArn: String
    DryRun: Optional[Boolean] = None
    ServiceId: Optional[VpcEndpointServiceId] = None
    VpcEndpointId_1: Optional[VpcEndpointId] = Field(None, alias='VpcEndpointId')


class CreateVpcEndpointConnectionNotificationResult(BaseModel):
    ClientToken: Optional[String] = None
    ConnectionNotification_1: Optional[ConnectionNotification] = Field(
        None, alias='ConnectionNotification'
    )


class CreateVpcEndpointServiceConfigurationRequest(BaseModel):
    AcceptanceRequired: Optional[Boolean] = None
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    GatewayLoadBalancerArns: Optional[ValueStringList] = None
    NetworkLoadBalancerArns: Optional[ValueStringList] = None
    PrivateDnsName: Optional[String] = None
    SupportedIpAddressTypes: Optional[ValueStringList] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateVpcPeeringConnectionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PeerOwnerId: Optional[String] = None
    PeerRegion: Optional[String] = None
    PeerVpcId: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateVpcRequest(BaseModel):
    AmazonProvidedIpv6CidrBlock: Optional[Boolean] = None
    CidrBlock: Optional[String] = None
    DryRun: Optional[Boolean] = None
    InstanceTenancy: Optional[Tenancy] = None
    Ipv4IpamPoolId: Optional[IpamPoolId] = None
    Ipv4NetmaskLength: Optional[NetmaskLength] = None
    Ipv6CidrBlock: Optional[String] = None
    Ipv6CidrBlockNetworkBorderGroup: Optional[String] = None
    Ipv6IpamPoolId: Optional[IpamPoolId] = None
    Ipv6NetmaskLength: Optional[NetmaskLength] = None
    Ipv6Pool: Optional[Ipv6PoolEc2Id] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateVpnConnectionRouteRequest(BaseModel):
    DestinationCidrBlock: String
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')


class CreateVpnGatewayRequest(BaseModel):
    AmazonSideAsn: Optional[Long] = None
    AvailabilityZone: Optional[String] = None
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    Type: GatewayType


class CreditSpecification(BaseModel):
    CpuCredits: Optional[String] = None


class CreditSpecificationRequest(BaseModel):
    CpuCredits: String


class CustomerGateway(BaseModel):
    BgpAsn: Optional[String] = None
    CertificateArn: Optional[String] = None
    CustomerGatewayId: Optional[String] = None
    DeviceName: Optional[String] = None
    IpAddress: Optional[String] = None
    State: Optional[String] = None
    Tags: Optional[TagList] = None
    Type: Optional[String] = None


class CustomerGatewayList(RootModel[List[CustomerGateway]]):
    root: List[CustomerGateway]


class DataQuery(BaseModel):
    Destination: Optional[String] = None
    Id: Optional[String] = None
    Metric: Optional[MetricType] = None
    Period: Optional[PeriodType] = None
    Source: Optional[String] = None
    Statistic: Optional[StatisticType] = None


class DeleteCarrierGatewayResult(BaseModel):
    CarrierGateway_1: Optional[CarrierGateway] = Field(None, alias='CarrierGateway')


class DeleteClientVpnEndpointResult(BaseModel):
    Status: Optional[ClientVpnEndpointStatus] = None


class DeleteClientVpnRouteRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DestinationCidrBlock: String
    DryRun: Optional[Boolean] = None
    TargetVpcSubnetId: Optional[SubnetId] = None


class DeleteClientVpnRouteResult(BaseModel):
    Status: Optional[ClientVpnRouteStatus] = None


class DeleteCoipCidrRequest(BaseModel):
    Cidr: String
    CoipPoolId: Ipv4PoolCoipId
    DryRun: Optional[Boolean] = None


class DeleteCoipCidrResult(BaseModel):
    CoipCidr_1: Optional[CoipCidr] = Field(None, alias='CoipCidr')


class DeleteCoipPoolRequest(BaseModel):
    CoipPoolId: Ipv4PoolCoipId
    DryRun: Optional[Boolean] = None


class DeleteCoipPoolResult(BaseModel):
    CoipPool_1: Optional[CoipPool] = Field(None, alias='CoipPool')


class DeleteDhcpOptionsRequest(BaseModel):
    DhcpOptionsId_1: DhcpOptionsId = Field(..., alias='DhcpOptionsId')
    DryRun: Optional[Boolean] = None


class DeleteEgressOnlyInternetGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    EgressOnlyInternetGatewayId_1: EgressOnlyInternetGatewayId = Field(
        ..., alias='EgressOnlyInternetGatewayId'
    )


class DeleteFleetError(BaseModel):
    Code: Optional[DeleteFleetErrorCode] = None
    Message: Optional[String] = None


class DeleteFleetErrorItem(BaseModel):
    Error: Optional[DeleteFleetError] = None
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')


class DeleteFleetErrorSet(RootModel[List[DeleteFleetErrorItem]]):
    root: List[DeleteFleetErrorItem]


class DeleteFleetSuccessItem(BaseModel):
    CurrentFleetState: Optional[FleetStateCode] = None
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    PreviousFleetState: Optional[FleetStateCode] = None


class DeleteFleetSuccessSet(RootModel[List[DeleteFleetSuccessItem]]):
    root: List[DeleteFleetSuccessItem]


class DeleteFleetsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    FleetIds: FleetIdSet
    TerminateInstances: Boolean


class DeleteFleetsResult(BaseModel):
    SuccessfulFleetDeletions: Optional[DeleteFleetSuccessSet] = None
    UnsuccessfulFleetDeletions: Optional[DeleteFleetErrorSet] = None


class DeleteFpgaImageRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    FpgaImageId_1: FpgaImageId = Field(..., alias='FpgaImageId')


class DeleteInstanceEventWindowRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ForceDelete: Optional[Boolean] = None
    InstanceEventWindowId_1: InstanceEventWindowId = Field(
        ..., alias='InstanceEventWindowId'
    )


class DeleteInstanceEventWindowResult(BaseModel):
    InstanceEventWindowState: Optional[InstanceEventWindowStateChange] = None


class DeleteInternetGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InternetGatewayId_1: InternetGatewayId = Field(..., alias='InternetGatewayId')


class DeleteIpamPoolRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')


class DeleteIpamRequest(BaseModel):
    Cascade: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    IpamId_1: IpamId = Field(..., alias='IpamId')


class DeleteIpamResourceDiscoveryRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    IpamResourceDiscoveryId_1: IpamResourceDiscoveryId = Field(
        ..., alias='IpamResourceDiscoveryId'
    )


class DeleteIpamScopeRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    IpamScopeId_1: IpamScopeId = Field(..., alias='IpamScopeId')


class DeleteKeyPairRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    KeyName: Optional[KeyPairName] = None
    KeyPairId_1: Optional[KeyPairId] = Field(None, alias='KeyPairId')


class DeleteLaunchTemplateRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )


class DeleteLaunchTemplateVersionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    Versions: VersionStringList


class DeleteLaunchTemplateVersionsResponseSuccessItem(BaseModel):
    LaunchTemplateId: Optional[String] = None
    LaunchTemplateName: Optional[String] = None
    VersionNumber: Optional[Long] = None


class DeleteLaunchTemplateVersionsResponseSuccessSet(
    RootModel[List[DeleteLaunchTemplateVersionsResponseSuccessItem]]
):
    root: List[DeleteLaunchTemplateVersionsResponseSuccessItem]


class DeleteLocalGatewayRouteRequest(BaseModel):
    DestinationCidrBlock: Optional[String] = None
    DestinationPrefixListId: Optional[PrefixListResourceId] = None
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableId: LocalGatewayRoutetableId


class DeleteLocalGatewayRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableId: LocalGatewayRoutetableId


class DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableVirtualInterfaceGroupAssociationId_1: (
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
    ) = Field(..., alias='LocalGatewayRouteTableVirtualInterfaceGroupAssociationId')


class DeleteLocalGatewayRouteTableVpcAssociationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableVpcAssociationId_1: LocalGatewayRouteTableVpcAssociationId = (
        Field(..., alias='LocalGatewayRouteTableVpcAssociationId')
    )


class DeleteManagedPrefixListRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PrefixListId: PrefixListResourceId


class DeleteNatGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NatGatewayId_1: NatGatewayId = Field(..., alias='NatGatewayId')


class DeleteNatGatewayResult(BaseModel):
    NatGatewayId: Optional[String] = None


class DeleteNetworkAclEntryRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Egress: Boolean
    NetworkAclId_1: NetworkAclId = Field(..., alias='NetworkAclId')
    RuleNumber: Integer


class DeleteNetworkAclRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NetworkAclId_1: NetworkAclId = Field(..., alias='NetworkAclId')


class DeleteNetworkInsightsAccessScopeAnalysisRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NetworkInsightsAccessScopeAnalysisId_1: NetworkInsightsAccessScopeAnalysisId = (
        Field(..., alias='NetworkInsightsAccessScopeAnalysisId')
    )


class DeleteNetworkInsightsAccessScopeAnalysisResult(BaseModel):
    NetworkInsightsAccessScopeAnalysisId_1: Optional[
        NetworkInsightsAccessScopeAnalysisId
    ] = Field(None, alias='NetworkInsightsAccessScopeAnalysisId')


class DeleteNetworkInsightsAccessScopeRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NetworkInsightsAccessScopeId_1: NetworkInsightsAccessScopeId = Field(
        ..., alias='NetworkInsightsAccessScopeId'
    )


class DeleteNetworkInsightsAccessScopeResult(BaseModel):
    NetworkInsightsAccessScopeId_1: Optional[NetworkInsightsAccessScopeId] = Field(
        None, alias='NetworkInsightsAccessScopeId'
    )


class DeleteNetworkInsightsAnalysisRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NetworkInsightsAnalysisId_1: NetworkInsightsAnalysisId = Field(
        ..., alias='NetworkInsightsAnalysisId'
    )


class DeleteNetworkInsightsAnalysisResult(BaseModel):
    NetworkInsightsAnalysisId_1: Optional[NetworkInsightsAnalysisId] = Field(
        None, alias='NetworkInsightsAnalysisId'
    )


class DeleteNetworkInsightsPathRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NetworkInsightsPathId_1: NetworkInsightsPathId = Field(
        ..., alias='NetworkInsightsPathId'
    )


class DeleteNetworkInsightsPathResult(BaseModel):
    NetworkInsightsPathId_1: Optional[NetworkInsightsPathId] = Field(
        None, alias='NetworkInsightsPathId'
    )


class DeleteNetworkInterfacePermissionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Force: Optional[Boolean] = None
    NetworkInterfacePermissionId_1: NetworkInterfacePermissionId = Field(
        ..., alias='NetworkInterfacePermissionId'
    )


class DeleteNetworkInterfaceRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')


class DeletePlacementGroupRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupName: PlacementGroupName


class DeletePublicIpv4PoolRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PoolId: Ipv4PoolEc2Id


class DeleteQueuedReservedInstancesError(BaseModel):
    Code: Optional[DeleteQueuedReservedInstancesErrorCode] = None
    Message: Optional[String] = None


class DeleteQueuedReservedInstancesIdList(RootModel[List[ReservationId]]):
    root: List[ReservationId] = Field(..., max_length=100, min_length=1)


class DeleteQueuedReservedInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ReservedInstancesIds: DeleteQueuedReservedInstancesIdList


class DeleteRouteRequest(BaseModel):
    DestinationCidrBlock: Optional[String] = None
    DestinationIpv6CidrBlock: Optional[String] = None
    DestinationPrefixListId: Optional[PrefixListResourceId] = None
    DryRun: Optional[Boolean] = None
    RouteTableId_1: RouteTableId = Field(..., alias='RouteTableId')


class DeleteRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    RouteTableId_1: RouteTableId = Field(..., alias='RouteTableId')


class DeleteSecurityGroupRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupId: Optional[SecurityGroupId] = None
    GroupName: Optional[SecurityGroupName] = None


class DeleteSnapshotRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class DeleteSubnetCidrReservationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SubnetCidrReservationId_1: SubnetCidrReservationId = Field(
        ..., alias='SubnetCidrReservationId'
    )


class DeleteSubnetRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')


class DeleteTrafficMirrorFilterRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TrafficMirrorFilterId_1: TrafficMirrorFilterId = Field(
        ..., alias='TrafficMirrorFilterId'
    )


class DeleteTrafficMirrorFilterResult(BaseModel):
    TrafficMirrorFilterId: Optional[String] = None


class DeleteTrafficMirrorFilterRuleRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TrafficMirrorFilterRuleId: TrafficMirrorFilterRuleIdWithResolver


class DeleteTrafficMirrorFilterRuleResult(BaseModel):
    TrafficMirrorFilterRuleId: Optional[String] = None


class DeleteTrafficMirrorSessionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TrafficMirrorSessionId_1: TrafficMirrorSessionId = Field(
        ..., alias='TrafficMirrorSessionId'
    )


class DeleteTrafficMirrorSessionResult(BaseModel):
    TrafficMirrorSessionId: Optional[String] = None


class DeleteTrafficMirrorTargetRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TrafficMirrorTargetId_1: TrafficMirrorTargetId = Field(
        ..., alias='TrafficMirrorTargetId'
    )


class DeleteTrafficMirrorTargetResult(BaseModel):
    TrafficMirrorTargetId: Optional[String] = None


class DeleteTransitGatewayConnectPeerRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayConnectPeerId_1: TransitGatewayConnectPeerId = Field(
        ..., alias='TransitGatewayConnectPeerId'
    )


class DeleteTransitGatewayConnectRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class DeleteTransitGatewayMulticastDomainRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayMulticastDomainId_1: TransitGatewayMulticastDomainId = Field(
        ..., alias='TransitGatewayMulticastDomainId'
    )


class DeleteTransitGatewayPeeringAttachmentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class DeleteTransitGatewayPolicyTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayPolicyTableId_1: TransitGatewayPolicyTableId = Field(
        ..., alias='TransitGatewayPolicyTableId'
    )


class DeleteTransitGatewayPrefixListReferenceRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PrefixListId: PrefixListResourceId
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class DeleteTransitGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayId_1: TransitGatewayId = Field(..., alias='TransitGatewayId')


class DeleteTransitGatewayRouteRequest(BaseModel):
    DestinationCidrBlock: String
    DryRun: Optional[Boolean] = None
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class DeleteTransitGatewayRouteTableAnnouncementRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayRouteTableAnnouncementId_1: TransitGatewayRouteTableAnnouncementId = (
        Field(..., alias='TransitGatewayRouteTableAnnouncementId')
    )


class DeleteTransitGatewayRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class DeleteTransitGatewayVpcAttachmentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class DeleteVerifiedAccessEndpointRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessEndpointId_1: VerifiedAccessEndpointId = Field(
        ..., alias='VerifiedAccessEndpointId'
    )


class DeleteVerifiedAccessGroupRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessGroupId_1: VerifiedAccessGroupId = Field(
        ..., alias='VerifiedAccessGroupId'
    )


class DeleteVerifiedAccessGroupResult(BaseModel):
    VerifiedAccessGroup_1: Optional[VerifiedAccessGroup] = Field(
        None, alias='VerifiedAccessGroup'
    )


class DeleteVerifiedAccessInstanceRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessInstanceId_1: VerifiedAccessInstanceId = Field(
        ..., alias='VerifiedAccessInstanceId'
    )


class DeleteVerifiedAccessTrustProviderRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessTrustProviderId_1: VerifiedAccessTrustProviderId = Field(
        ..., alias='VerifiedAccessTrustProviderId'
    )


class DeleteVolumeRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class DeleteVpcEndpointServiceConfigurationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ServiceIds: VpcEndpointServiceIdList


class DeleteVpcEndpointsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcEndpointIds: VpcEndpointIdList


class DeleteVpcPeeringConnectionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcPeeringConnectionId_1: VpcPeeringConnectionId = Field(
        ..., alias='VpcPeeringConnectionId'
    )


class DeleteVpcRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class DeleteVpnConnectionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')


class DeleteVpnConnectionRouteRequest(BaseModel):
    DestinationCidrBlock: String
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')


class DeleteVpnGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpnGatewayId_1: VpnGatewayId = Field(..., alias='VpnGatewayId')


class DeprovisionByoipCidrRequest(BaseModel):
    Cidr: String
    DryRun: Optional[Boolean] = None


class DeprovisionByoipCidrResult(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')


class DeprovisionIpamPoolCidrRequest(BaseModel):
    Cidr: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')


class DeprovisionPublicIpv4PoolCidrRequest(BaseModel):
    Cidr: String
    DryRun: Optional[Boolean] = None
    PoolId: Ipv4PoolEc2Id


class DeprovisionedAddressSet(RootModel[List[String]]):
    root: List[String]


class DeregisterImageRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')


class DeregisterTransitGatewayMulticastGroupMembersRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupIpAddress: Optional[String] = None
    NetworkInterfaceIds: Optional[TransitGatewayNetworkInterfaceIdList] = None
    TransitGatewayMulticastDomainId_1: Optional[TransitGatewayMulticastDomainId] = (
        Field(None, alias='TransitGatewayMulticastDomainId')
    )


class DeregisterTransitGatewayMulticastGroupSourcesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupIpAddress: Optional[String] = None
    NetworkInterfaceIds: Optional[TransitGatewayNetworkInterfaceIdList] = None
    TransitGatewayMulticastDomainId_1: Optional[TransitGatewayMulticastDomainId] = (
        Field(None, alias='TransitGatewayMulticastDomainId')
    )


class DescribeAddressTransfersRequest(BaseModel):
    AllocationIds: Optional[AllocationIdList] = None
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[DescribeAddressTransfersMaxResults] = None
    NextToken: Optional[String] = None


class DescribeAddressTransfersResult(BaseModel):
    AddressTransfers: Optional[AddressTransferList] = None
    NextToken: Optional[String] = None


class DescribeAddressesAttributeRequest(BaseModel):
    AllocationIds_1: Optional[AllocationIds] = Field(None, alias='AllocationIds')
    Attribute: Optional[AddressAttributeName] = None
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[AddressMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAddressesResult(BaseModel):
    Addresses: Optional[AddressList] = None


class DescribeAwsNetworkPerformanceMetricSubscriptionsResult(BaseModel):
    NextToken: Optional[String] = None
    Subscriptions: Optional[SubscriptionList] = None


class DescribeByoipCidrsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: DescribeByoipCidrsMaxResults
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeByoipCidrsResult(BaseModel):
    ByoipCidrs: Optional[ByoipCidrSet] = None
    NextToken: Optional[String] = None


class DescribeCapacityReservationsResult(BaseModel):
    CapacityReservations: Optional[CapacityReservationSet] = None
    NextToken: Optional[String] = None


class DescribeCarrierGatewaysResult(BaseModel):
    CarrierGateways: Optional[CarrierGatewaySet] = None
    NextToken: Optional[String] = None


class DescribeCoipPoolsResult(BaseModel):
    CoipPools: Optional[CoipPoolSet] = None
    NextToken: Optional[String] = None


class DescribeConversionTasksRequest(BaseModel):
    ConversionTaskIds: Optional[ConversionIdStringList] = None
    DryRun: Optional[Boolean] = None


class DescribeCustomerGatewaysResult(BaseModel):
    CustomerGateways: Optional[CustomerGatewayList] = None


class DescribeFastSnapshotRestoreSuccessItem(BaseModel):
    AvailabilityZone: Optional[String] = None
    DisabledTime: Optional[MillisecondDateTime] = None
    DisablingTime: Optional[MillisecondDateTime] = None
    EnabledTime: Optional[MillisecondDateTime] = None
    EnablingTime: Optional[MillisecondDateTime] = None
    OptimizingTime: Optional[MillisecondDateTime] = None
    OwnerAlias: Optional[String] = None
    OwnerId: Optional[String] = None
    SnapshotId: Optional[String] = None
    State: Optional[FastSnapshotRestoreStateCode] = None
    StateTransitionReason: Optional[String] = None


class DescribeFastSnapshotRestoreSuccessSet(
    RootModel[List[DescribeFastSnapshotRestoreSuccessItem]]
):
    root: List[DescribeFastSnapshotRestoreSuccessItem]


class DescribeFastSnapshotRestoresResult(BaseModel):
    FastSnapshotRestores: Optional[DescribeFastSnapshotRestoreSuccessSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFleetHistoryRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    EventType: Optional[FleetEventType] = None
    FleetId_1: FleetId = Field(..., alias='FleetId')
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    StartTime: DateTime


class DescribeFleetInstancesResult(BaseModel):
    ActiveInstances: Optional[ActiveInstanceSet] = None
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    NextToken: Optional[String] = None


class DescribeFpgaImageAttributeRequest(BaseModel):
    Attribute: FpgaImageAttributeName
    DryRun: Optional[Boolean] = None
    FpgaImageId_1: FpgaImageId = Field(..., alias='FpgaImageId')


class DescribeIdFormatRequest(BaseModel):
    Resource: Optional[String] = None


class DescribeIdentityIdFormatRequest(BaseModel):
    PrincipalArn: String
    Resource: Optional[String] = None


class DescribeImageAttributeRequest(BaseModel):
    Attribute: ImageAttributeName
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')


class DescribeInstanceAttributeRequest(BaseModel):
    Attribute: InstanceAttributeName
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class DescribeNetworkInterfaceAttributeRequest(BaseModel):
    Attribute: Optional[NetworkInterfaceAttribute] = None
    DryRun: Optional[Boolean] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')


class DescribeSnapshotAttributeRequest(BaseModel):
    Attribute: SnapshotAttributeName
    DryRun: Optional[Boolean] = None
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class DescribeSpotFleetInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[DescribeSpotFleetInstancesMaxResults] = None
    NextToken: Optional[String] = None
    SpotFleetRequestId_1: SpotFleetRequestId = Field(..., alias='SpotFleetRequestId')


class DescribeSpotFleetInstancesResponse(BaseModel):
    ActiveInstances: Optional[ActiveInstanceSet] = None
    NextToken: Optional[String] = None
    SpotFleetRequestId: Optional[String] = None


class DescribeSpotFleetRequestHistoryRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    EventType_1: Optional[EventType] = Field(None, alias='EventType')
    MaxResults: Optional[DescribeSpotFleetRequestHistoryMaxResults] = None
    NextToken: Optional[String] = None
    SpotFleetRequestId_1: SpotFleetRequestId = Field(..., alias='SpotFleetRequestId')
    StartTime: DateTime


class DescribeSpotFleetRequestsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    SpotFleetRequestIds: Optional[SpotFleetRequestIdList] = None


class DescribeStaleSecurityGroupsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[DescribeStaleSecurityGroupsMaxResults] = None
    NextToken: Optional[DescribeStaleSecurityGroupsNextToken] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class DescribeTagsResult(BaseModel):
    NextToken: Optional[String] = None
    Tags: Optional[TagDescriptionList] = None


class DescribeTrafficMirrorSessionsResult(BaseModel):
    NextToken: Optional[String] = None
    TrafficMirrorSessions: Optional[TrafficMirrorSessionSet] = None


class DescribeVerifiedAccessGroupsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessGroups: Optional[VerifiedAccessGroupList] = None


class DescribeVolumeAttributeRequest(BaseModel):
    Attribute: VolumeAttributeName
    DryRun: Optional[Boolean] = None
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class DescribeVpcAttributeRequest(BaseModel):
    Attribute: VpcAttributeName
    DryRun: Optional[Boolean] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class DescribeVpcAttributeResult(BaseModel):
    EnableDnsHostnames: Optional[AttributeBooleanValue] = None
    EnableDnsSupport: Optional[AttributeBooleanValue] = None
    EnableNetworkAddressUsageMetrics: Optional[AttributeBooleanValue] = None
    VpcId: Optional[String] = None


class DescribeVpcClassicLinkDnsSupportResult(BaseModel):
    NextToken: Optional[DescribeVpcClassicLinkDnsSupportNextToken] = None
    Vpcs: Optional[ClassicLinkDnsSupportList] = None


class DescribeVpcClassicLinkResult(BaseModel):
    Vpcs: Optional[VpcClassicLinkList] = None


class DescribeVpcEndpointConnectionNotificationsResult(BaseModel):
    ConnectionNotificationSet_1: Optional[ConnectionNotificationSet] = Field(
        None, alias='ConnectionNotificationSet'
    )
    NextToken: Optional[String] = None


class DescribeVpcEndpointServicePermissionsResult(BaseModel):
    AllowedPrincipals: Optional[AllowedPrincipalSet] = None
    NextToken: Optional[String] = None


class DetachClassicLinkVpcRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class DetachInternetGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InternetGatewayId_1: InternetGatewayId = Field(..., alias='InternetGatewayId')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class DetachNetworkInterfaceRequest(BaseModel):
    AttachmentId: NetworkInterfaceAttachmentId
    DryRun: Optional[Boolean] = None
    Force: Optional[Boolean] = None


class DetachVerifiedAccessTrustProviderRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessInstanceId_1: VerifiedAccessInstanceId = Field(
        ..., alias='VerifiedAccessInstanceId'
    )
    VerifiedAccessTrustProviderId_1: VerifiedAccessTrustProviderId = Field(
        ..., alias='VerifiedAccessTrustProviderId'
    )


class DetachVolumeRequest(BaseModel):
    Device: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Force: Optional[Boolean] = None
    InstanceId: Optional[InstanceIdForResolver] = None
    VolumeId: VolumeIdWithResolver


class DetachVpnGatewayRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')
    VpnGatewayId_1: VpnGatewayId = Field(..., alias='VpnGatewayId')


class DhcpConfigurationValueList(RootModel[List[AttributeValue]]):
    root: List[AttributeValue]


class DirectoryServiceAuthentication(BaseModel):
    DirectoryId: Optional[String] = None


class DirectoryServiceAuthenticationRequest(BaseModel):
    DirectoryId: Optional[String] = None


class DisableAddressTransferResult(BaseModel):
    AddressTransfer_1: Optional[AddressTransfer] = Field(None, alias='AddressTransfer')


class DisableAwsNetworkPerformanceMetricSubscriptionRequest(BaseModel):
    Destination: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Metric: Optional[MetricType] = None
    Source: Optional[String] = None
    Statistic: Optional[StatisticType] = None


class DisableFastLaunchRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Force: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')


class DisableFastSnapshotRestoreStateError(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class DisableFastSnapshotRestoreStateErrorItem(BaseModel):
    AvailabilityZone: Optional[String] = None
    Error: Optional[DisableFastSnapshotRestoreStateError] = None


class DisableFastSnapshotRestoreStateErrorSet(
    RootModel[List[DisableFastSnapshotRestoreStateErrorItem]]
):
    root: List[DisableFastSnapshotRestoreStateErrorItem]


class DisableFastSnapshotRestoreSuccessItem(BaseModel):
    AvailabilityZone: Optional[String] = None
    DisabledTime: Optional[MillisecondDateTime] = None
    DisablingTime: Optional[MillisecondDateTime] = None
    EnabledTime: Optional[MillisecondDateTime] = None
    EnablingTime: Optional[MillisecondDateTime] = None
    OptimizingTime: Optional[MillisecondDateTime] = None
    OwnerAlias: Optional[String] = None
    OwnerId: Optional[String] = None
    SnapshotId: Optional[String] = None
    State: Optional[FastSnapshotRestoreStateCode] = None
    StateTransitionReason: Optional[String] = None


class DisableFastSnapshotRestoreSuccessSet(
    RootModel[List[DisableFastSnapshotRestoreSuccessItem]]
):
    root: List[DisableFastSnapshotRestoreSuccessItem]


class DisableFastSnapshotRestoresRequest(BaseModel):
    AvailabilityZones: AvailabilityZoneStringList
    DryRun: Optional[Boolean] = None
    SourceSnapshotIds: SnapshotIdStringList


class DisableImageDeprecationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')


class DisableIpamOrganizationAdminAccountRequest(BaseModel):
    DelegatedAdminAccountId: String
    DryRun: Optional[Boolean] = None


class DisableTransitGatewayRouteTablePropagationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableAnnouncementId_1: Optional[
        TransitGatewayRouteTableAnnouncementId
    ] = Field(None, alias='TransitGatewayRouteTableAnnouncementId')
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class DisableVgwRoutePropagationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GatewayId: VpnGatewayId
    RouteTableId_1: RouteTableId = Field(..., alias='RouteTableId')


class DisableVpcClassicLinkDnsSupportRequest(BaseModel):
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class DisableVpcClassicLinkRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class DisassociateAddressRequest(BaseModel):
    AssociationId: Optional[ElasticIpAssociationId] = None
    DryRun: Optional[Boolean] = None
    PublicIp: Optional[EipAllocationPublicIp] = None


class DisassociateClientVpnTargetNetworkResult(BaseModel):
    AssociationId: Optional[String] = None
    Status: Optional[AssociationStatus] = None


class DisassociateEnclaveCertificateIamRoleRequest(BaseModel):
    CertificateArn: CertificateId
    DryRun: Optional[Boolean] = None
    RoleArn: RoleId


class DisassociateIamInstanceProfileRequest(BaseModel):
    AssociationId: IamInstanceProfileAssociationId


class DisassociateIpamResourceDiscoveryRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    IpamResourceDiscoveryAssociationId_1: IpamResourceDiscoveryAssociationId = Field(
        ..., alias='IpamResourceDiscoveryAssociationId'
    )


class DisassociateRouteTableRequest(BaseModel):
    AssociationId: RouteTableAssociationId
    DryRun: Optional[Boolean] = None


class DisassociateSubnetCidrBlockRequest(BaseModel):
    AssociationId: SubnetCidrAssociationId


class DisassociateTransitGatewayMulticastDomainRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SubnetIds: TransitGatewaySubnetIdList
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )
    TransitGatewayMulticastDomainId_1: TransitGatewayMulticastDomainId = Field(
        ..., alias='TransitGatewayMulticastDomainId'
    )


class DisassociateTransitGatewayPolicyTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )
    TransitGatewayPolicyTableId_1: TransitGatewayPolicyTableId = Field(
        ..., alias='TransitGatewayPolicyTableId'
    )


class DisassociateTransitGatewayRouteTableRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class DisassociateTrunkInterfaceRequest(BaseModel):
    AssociationId: TrunkInterfaceAssociationId
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None


class DisassociateTrunkInterfaceResult(BaseModel):
    ClientToken: Optional[String] = None
    Return: Optional[Boolean] = None


class DisassociateVpcCidrBlockRequest(BaseModel):
    AssociationId: VpcCidrAssociationId


class DiskImageDescription(BaseModel):
    Checksum: Optional[String] = None
    Format: Optional[DiskImageFormat] = None
    ImportManifestUrl: Optional[String] = None
    Size: Optional[Long] = None


class DiskImageDetail(BaseModel):
    Bytes: Long
    Format: DiskImageFormat
    ImportManifestUrl_1: ImportManifestUrl = Field(..., alias='ImportManifestUrl')


class DiskImageVolumeDescription(BaseModel):
    Id: Optional[String] = None
    Size: Optional[Long] = None


class DiskInfo(BaseModel):
    Count: Optional[DiskCount] = None
    SizeInGB: Optional[DiskSize] = None
    Type: Optional[DiskType] = None


class DiskInfoList(RootModel[List[DiskInfo]]):
    root: List[DiskInfo]


class DnsEntry(BaseModel):
    DnsName: Optional[String] = None
    HostedZoneId: Optional[String] = None


class DnsEntrySet(RootModel[List[DnsEntry]]):
    root: List[DnsEntry]


class DnsOptionsSpecification(BaseModel):
    DnsRecordIpType_1: Optional[DnsRecordIpType] = Field(None, alias='DnsRecordIpType')
    PrivateDnsOnlyForInboundResolverEndpoint: Optional[Boolean] = None


class DnsServersOptionsModifyStructure(BaseModel):
    CustomDnsServers: Optional[ValueStringList] = None
    Enabled: Optional[Boolean] = None


class EbsBlockDevice(BaseModel):
    DeleteOnTermination: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    Iops: Optional[Integer] = None
    KmsKeyId: Optional[String] = None
    OutpostArn: Optional[String] = None
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    Throughput: Optional[Integer] = None
    VolumeSize: Optional[Integer] = None
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')


class EbsInstanceBlockDevice(BaseModel):
    AttachTime: Optional[DateTime] = None
    DeleteOnTermination: Optional[Boolean] = None
    Status: Optional[AttachmentStatus] = None
    VolumeId: Optional[String] = None


class EbsInstanceBlockDeviceSpecification(BaseModel):
    DeleteOnTermination: Optional[Boolean] = None
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')


class EbsOptimizedInfo(BaseModel):
    BaselineBandwidthInMbps_1: Optional[BaselineBandwidthInMbps] = Field(
        None, alias='BaselineBandwidthInMbps'
    )
    BaselineIops_1: Optional[BaselineIops] = Field(None, alias='BaselineIops')
    BaselineThroughputInMBps_1: Optional[BaselineThroughputInMBps] = Field(
        None, alias='BaselineThroughputInMBps'
    )
    MaximumBandwidthInMbps_1: Optional[MaximumBandwidthInMbps] = Field(
        None, alias='MaximumBandwidthInMbps'
    )
    MaximumIops_1: Optional[MaximumIops] = Field(None, alias='MaximumIops')
    MaximumThroughputInMBps_1: Optional[MaximumThroughputInMBps] = Field(
        None, alias='MaximumThroughputInMBps'
    )


class EfaInfo(BaseModel):
    MaximumEfaInterfaces_1: Optional[MaximumEfaInterfaces] = Field(
        None, alias='MaximumEfaInterfaces'
    )


class EipAssociationIdList(RootModel[List[ElasticIpAssociationId]]):
    root: List[ElasticIpAssociationId]


class ElasticGpuAssociation(BaseModel):
    ElasticGpuAssociationId: Optional[String] = None
    ElasticGpuAssociationState: Optional[String] = None
    ElasticGpuAssociationTime: Optional[String] = None
    ElasticGpuId_1: Optional[ElasticGpuId] = Field(None, alias='ElasticGpuId')


class ElasticGpuAssociationList(RootModel[List[ElasticGpuAssociation]]):
    root: List[ElasticGpuAssociation]


class ElasticGpuHealth(BaseModel):
    Status: Optional[ElasticGpuStatus] = None


class ElasticGpuSpecification(BaseModel):
    Type: String


class ElasticGpuSpecificationList(RootModel[List[ElasticGpuSpecification]]):
    root: List[ElasticGpuSpecification]


class ElasticGpuSpecificationResponse(BaseModel):
    Type: Optional[String] = None


class ElasticGpuSpecificationResponseList(
    RootModel[List[ElasticGpuSpecificationResponse]]
):
    root: List[ElasticGpuSpecificationResponse]


class ElasticGpuSpecifications(RootModel[List[ElasticGpuSpecification]]):
    root: List[ElasticGpuSpecification]


class ElasticGpus(BaseModel):
    AvailabilityZone: Optional[String] = None
    ElasticGpuHealth_1: Optional[ElasticGpuHealth] = Field(
        None, alias='ElasticGpuHealth'
    )
    ElasticGpuId: Optional[String] = None
    ElasticGpuState_1: Optional[ElasticGpuState] = Field(None, alias='ElasticGpuState')
    ElasticGpuType: Optional[String] = None
    InstanceId: Optional[String] = None
    Tags: Optional[TagList] = None


class ElasticInferenceAccelerator(BaseModel):
    Count: Optional[ElasticInferenceAcceleratorCount] = None
    Type: String


class ElasticInferenceAcceleratorAssociation(BaseModel):
    ElasticInferenceAcceleratorArn: Optional[String] = None
    ElasticInferenceAcceleratorAssociationId: Optional[String] = None
    ElasticInferenceAcceleratorAssociationState: Optional[String] = None
    ElasticInferenceAcceleratorAssociationTime: Optional[DateTime] = None


class ElasticInferenceAcceleratorAssociationList(
    RootModel[List[ElasticInferenceAcceleratorAssociation]]
):
    root: List[ElasticInferenceAcceleratorAssociation]


class ElasticInferenceAccelerators(RootModel[List[ElasticInferenceAccelerator]]):
    root: List[ElasticInferenceAccelerator]


class EnableAddressTransferRequest(BaseModel):
    AllocationId_1: AllocationId = Field(..., alias='AllocationId')
    DryRun: Optional[Boolean] = None
    TransferAccountId: String


class EnableAddressTransferResult(BaseModel):
    AddressTransfer_1: Optional[AddressTransfer] = Field(None, alias='AddressTransfer')


class EnableAwsNetworkPerformanceMetricSubscriptionRequest(BaseModel):
    Destination: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Metric: Optional[MetricType] = None
    Source: Optional[String] = None
    Statistic: Optional[StatisticType] = None


class EnableFastSnapshotRestoreStateError(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class EnableFastSnapshotRestoreStateErrorItem(BaseModel):
    AvailabilityZone: Optional[String] = None
    Error: Optional[EnableFastSnapshotRestoreStateError] = None


class EnableFastSnapshotRestoreStateErrorSet(
    RootModel[List[EnableFastSnapshotRestoreStateErrorItem]]
):
    root: List[EnableFastSnapshotRestoreStateErrorItem]


class EnableFastSnapshotRestoreSuccessItem(BaseModel):
    AvailabilityZone: Optional[String] = None
    DisabledTime: Optional[MillisecondDateTime] = None
    DisablingTime: Optional[MillisecondDateTime] = None
    EnabledTime: Optional[MillisecondDateTime] = None
    EnablingTime: Optional[MillisecondDateTime] = None
    OptimizingTime: Optional[MillisecondDateTime] = None
    OwnerAlias: Optional[String] = None
    OwnerId: Optional[String] = None
    SnapshotId: Optional[String] = None
    State: Optional[FastSnapshotRestoreStateCode] = None
    StateTransitionReason: Optional[String] = None


class EnableFastSnapshotRestoreSuccessSet(
    RootModel[List[EnableFastSnapshotRestoreSuccessItem]]
):
    root: List[EnableFastSnapshotRestoreSuccessItem]


class EnableFastSnapshotRestoresRequest(BaseModel):
    AvailabilityZones: AvailabilityZoneStringList
    DryRun: Optional[Boolean] = None
    SourceSnapshotIds: SnapshotIdStringList


class EnableImageDeprecationRequest(BaseModel):
    DeprecateAt: MillisecondDateTime
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')


class EnableIpamOrganizationAdminAccountRequest(BaseModel):
    DelegatedAdminAccountId: String
    DryRun: Optional[Boolean] = None


class EnableTransitGatewayRouteTablePropagationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableAnnouncementId_1: Optional[
        TransitGatewayRouteTableAnnouncementId
    ] = Field(None, alias='TransitGatewayRouteTableAnnouncementId')
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class EnableVgwRoutePropagationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GatewayId: VpnGatewayId
    RouteTableId_1: RouteTableId = Field(..., alias='RouteTableId')


class EnableVolumeIORequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class EnableVpcClassicLinkDnsSupportRequest(BaseModel):
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')


class EnableVpcClassicLinkRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class ErrorSet(RootModel[List[ValidationError]]):
    root: List[ValidationError]


class EventInformation(BaseModel):
    EventDescription: Optional[String] = None
    EventSubType: Optional[String] = None
    InstanceId: Optional[String] = None


class ExecutableByStringList(RootModel[List[String]]):
    root: List[String]


class ExportClientVpnClientCertificateRevocationListResult(BaseModel):
    CertificateRevocationList: Optional[String] = None
    Status: Optional[ClientCertificateRevocationListStatus] = None


class ExportClientVpnClientConfigurationResult(BaseModel):
    ClientConfiguration: Optional[String] = None


class ExportTaskS3Location(BaseModel):
    S3Bucket: Optional[String] = None
    S3Prefix: Optional[String] = None


class ExportTaskS3LocationRequest(BaseModel):
    S3Bucket: String
    S3Prefix: Optional[String] = None


class ExportToS3Task(BaseModel):
    ContainerFormat_1: Optional[ContainerFormat] = Field(None, alias='ContainerFormat')
    DiskImageFormat_1: Optional[DiskImageFormat] = Field(None, alias='DiskImageFormat')
    S3Bucket: Optional[String] = None
    S3Key: Optional[String] = None


class ExportToS3TaskSpecification(BaseModel):
    ContainerFormat_1: Optional[ContainerFormat] = Field(None, alias='ContainerFormat')
    DiskImageFormat_1: Optional[DiskImageFormat] = Field(None, alias='DiskImageFormat')
    S3Bucket: Optional[String] = None
    S3Prefix: Optional[String] = None


class ExportTransitGatewayRoutesResult(BaseModel):
    S3Location: Optional[String] = None


class FailedCapacityReservationFleetCancellationResult(BaseModel):
    CancelCapacityReservationFleetError_1: Optional[
        CancelCapacityReservationFleetError
    ] = Field(None, alias='CancelCapacityReservationFleetError')
    CapacityReservationFleetId_1: Optional[CapacityReservationFleetId] = Field(
        None, alias='CapacityReservationFleetId'
    )


class FailedCapacityReservationFleetCancellationResultSet(
    RootModel[List[FailedCapacityReservationFleetCancellationResult]]
):
    root: List[FailedCapacityReservationFleetCancellationResult]


class FailedQueuedPurchaseDeletion(BaseModel):
    Error: Optional[DeleteQueuedReservedInstancesError] = None
    ReservedInstancesId: Optional[String] = None


class FailedQueuedPurchaseDeletionSet(RootModel[List[FailedQueuedPurchaseDeletion]]):
    root: List[FailedQueuedPurchaseDeletion]


class FastLaunchImageIdList(RootModel[List[ImageId]]):
    root: List[ImageId]


class FastLaunchLaunchTemplateSpecificationRequest(BaseModel):
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName: Optional[String] = None
    Version: String


class FastLaunchLaunchTemplateSpecificationResponse(BaseModel):
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName: Optional[String] = None
    Version: Optional[String] = None


class FastLaunchSnapshotConfigurationRequest(BaseModel):
    TargetResourceCount: Optional[Integer] = None


class FastLaunchSnapshotConfigurationResponse(BaseModel):
    TargetResourceCount: Optional[Integer] = None


class FederatedAuthentication(BaseModel):
    SamlProviderArn: Optional[String] = None
    SelfServiceSamlProviderArn: Optional[String] = None


class FederatedAuthenticationRequest(BaseModel):
    SAMLProviderArn: Optional[String] = None
    SelfServiceSAMLProviderArn: Optional[String] = None


class Filter(BaseModel):
    Name: Optional[String] = None
    Values: Optional[ValueStringList] = None


class FilterList(RootModel[List[Filter]]):
    root: List[Filter]


class FilterPortRange(BaseModel):
    FromPort: Optional[Port] = None
    ToPort: Optional[Port] = None


class FirewallStatefulRule(BaseModel):
    DestinationPorts: Optional[PortRangeList] = None
    Destinations: Optional[ValueStringList] = None
    Direction: Optional[String] = None
    Protocol: Optional[String] = None
    RuleAction: Optional[String] = None
    RuleGroupArn: Optional[ResourceArn] = None
    SourcePorts: Optional[PortRangeList] = None
    Sources: Optional[ValueStringList] = None


class FirewallStatelessRule(BaseModel):
    DestinationPorts: Optional[PortRangeList] = None
    Destinations: Optional[ValueStringList] = None
    Priority_1: Optional[Priority] = Field(None, alias='Priority')
    Protocols: Optional[ProtocolIntList] = None
    RuleAction: Optional[String] = None
    RuleGroupArn: Optional[ResourceArn] = None
    SourcePorts: Optional[PortRangeList] = None
    Sources: Optional[ValueStringList] = None


class FleetCapacityReservation(BaseModel):
    AvailabilityZone: Optional[String] = None
    AvailabilityZoneId: Optional[String] = None
    CapacityReservationId_1: Optional[CapacityReservationId] = Field(
        None, alias='CapacityReservationId'
    )
    CreateDate: Optional[MillisecondDateTime] = None
    EbsOptimized: Optional[Boolean] = None
    FulfilledCapacity: Optional[Double] = None
    InstancePlatform: Optional[CapacityReservationInstancePlatform] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Priority: Optional[IntegerWithConstraints] = None
    TotalInstanceCount: Optional[Integer] = None
    Weight: Optional[DoubleWithConstraints] = None


class FleetCapacityReservationSet(RootModel[List[FleetCapacityReservation]]):
    root: List[FleetCapacityReservation]


class FleetLaunchTemplateSpecification(BaseModel):
    LaunchTemplateId: Optional[String] = None
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    Version: Optional[String] = None


class FleetLaunchTemplateSpecificationRequest(BaseModel):
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    Version: Optional[String] = None


class FleetSpotCapacityRebalance(BaseModel):
    ReplacementStrategy: Optional[FleetReplacementStrategy] = None
    TerminationDelay: Optional[Integer] = None


class FleetSpotCapacityRebalanceRequest(BaseModel):
    ReplacementStrategy: Optional[FleetReplacementStrategy] = None
    TerminationDelay: Optional[Integer] = None


class FleetSpotMaintenanceStrategies(BaseModel):
    CapacityRebalance: Optional[FleetSpotCapacityRebalance] = None


class FleetSpotMaintenanceStrategiesRequest(BaseModel):
    CapacityRebalance: Optional[FleetSpotCapacityRebalanceRequest] = None


class FlowLog(BaseModel):
    CreationTime: Optional[MillisecondDateTime] = None
    DeliverCrossAccountRole: Optional[String] = None
    DeliverLogsErrorMessage: Optional[String] = None
    DeliverLogsPermissionArn: Optional[String] = None
    DeliverLogsStatus: Optional[String] = None
    DestinationOptions: Optional[DestinationOptionsResponse] = None
    FlowLogId: Optional[String] = None
    FlowLogStatus: Optional[String] = None
    LogDestination: Optional[String] = None
    LogDestinationType_1: Optional[LogDestinationType] = Field(
        None, alias='LogDestinationType'
    )
    LogFormat: Optional[String] = None
    LogGroupName: Optional[String] = None
    MaxAggregationInterval: Optional[Integer] = None
    ResourceId: Optional[String] = None
    Tags: Optional[TagList] = None
    TrafficType_1: Optional[TrafficType] = Field(None, alias='TrafficType')


class FlowLogIdList(RootModel[List[VpcFlowLogId]]):
    root: List[VpcFlowLogId]


class FlowLogSet(RootModel[List[FlowLog]]):
    root: List[FlowLog]


class FpgaDeviceMemoryInfo(BaseModel):
    SizeInMiB: Optional[FpgaDeviceMemorySize] = None


class FpgaImageState(BaseModel):
    Code: Optional[FpgaImageStateCode] = None
    Message: Optional[String] = None


class GetAssociatedEnclaveCertificateIamRolesResult(BaseModel):
    AssociatedRoles: Optional[AssociatedRolesList] = None


class GetAssociatedIpv6PoolCidrsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[Ipv6PoolMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PoolId: Ipv6PoolEc2Id


class GetCapacityReservationUsageRequest(BaseModel):
    CapacityReservationId_1: CapacityReservationId = Field(
        ..., alias='CapacityReservationId'
    )
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[GetCapacityReservationUsageRequestMaxResults] = None
    NextToken: Optional[String] = None


class GetCoipPoolUsageRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[CoipPoolMaxResults] = None
    NextToken: Optional[String] = None
    PoolId: Ipv4PoolCoipId


class GetCoipPoolUsageResult(BaseModel):
    CoipAddressUsages: Optional[CoipAddressUsageSet] = None
    CoipPoolId: Optional[String] = None
    LocalGatewayRouteTableId: Optional[String] = None


class GetConsoleOutputRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    Latest: Optional[Boolean] = None


class GetConsoleOutputResult(BaseModel):
    InstanceId: Optional[String] = None
    Output: Optional[String] = None
    Timestamp: Optional[DateTime] = None


class GetConsoleScreenshotRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    WakeUp: Optional[Boolean] = None


class GetConsoleScreenshotResult(BaseModel):
    ImageData: Optional[String] = None
    InstanceId: Optional[String] = None


class GetDefaultCreditSpecificationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceFamily: UnlimitedSupportedInstanceFamily


class GetEbsDefaultKmsKeyIdResult(BaseModel):
    KmsKeyId: Optional[String] = None


class GetFlowLogsIntegrationTemplateResult(BaseModel):
    Result: Optional[String] = None


class GetGroupsForCapacityReservationRequest(BaseModel):
    CapacityReservationId_1: CapacityReservationId = Field(
        ..., alias='CapacityReservationId'
    )
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[GetGroupsForCapacityReservationRequestMaxResults] = None
    NextToken: Optional[String] = None


class GetGroupsForCapacityReservationResult(BaseModel):
    CapacityReservationGroups: Optional[CapacityReservationGroupSet] = None
    NextToken: Optional[String] = None


class GetHostReservationPurchasePreviewRequest(BaseModel):
    HostIdSet: RequestHostIdSet
    OfferingId_1: OfferingId = Field(..., alias='OfferingId')


class GetInstanceUefiDataRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class GetInstanceUefiDataResult(BaseModel):
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    UefiData: Optional[String] = None


class GetIpamAddressHistoryRequest(BaseModel):
    Cidr: String
    DryRun: Optional[Boolean] = None
    EndTime: Optional[MillisecondDateTime] = None
    IpamScopeId_1: IpamScopeId = Field(..., alias='IpamScopeId')
    MaxResults: Optional[IpamAddressHistoryMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StartTime: Optional[MillisecondDateTime] = None
    VpcId: Optional[String] = None


class GetIpamDiscoveredAccountsRequest(BaseModel):
    DiscoveryRegion: String
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamResourceDiscoveryId_1: IpamResourceDiscoveryId = Field(
        ..., alias='IpamResourceDiscoveryId'
    )
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetIpamDiscoveredResourceCidrsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamResourceDiscoveryId_1: IpamResourceDiscoveryId = Field(
        ..., alias='IpamResourceDiscoveryId'
    )
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceRegion: String


class GetIpamPoolAllocationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamPoolAllocationId_1: Optional[IpamPoolAllocationId] = Field(
        None, alias='IpamPoolAllocationId'
    )
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')
    MaxResults: Optional[GetIpamPoolAllocationsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetIpamPoolCidrsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetLaunchTemplateDataRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class GetManagedPrefixListAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[GetManagedPrefixListAssociationsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PrefixListId: PrefixListResourceId


class GetManagedPrefixListEntriesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[PrefixListMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PrefixListId: PrefixListResourceId
    TargetVersion: Optional[Long] = None


class GetNetworkInsightsAccessScopeAnalysisFindingsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[NetworkInsightsMaxResults] = None
    NetworkInsightsAccessScopeAnalysisId_1: NetworkInsightsAccessScopeAnalysisId = (
        Field(..., alias='NetworkInsightsAccessScopeAnalysisId')
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetNetworkInsightsAccessScopeContentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NetworkInsightsAccessScopeId_1: NetworkInsightsAccessScopeId = Field(
        ..., alias='NetworkInsightsAccessScopeId'
    )


class GetPasswordDataRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class GetPasswordDataResult(BaseModel):
    InstanceId: Optional[String] = None
    PasswordData: Optional[String] = None
    Timestamp: Optional[DateTime] = None


class GetReservedInstancesExchangeQuoteRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ReservedInstanceIds: ReservedInstanceIdSet
    TargetConfigurations: Optional[TargetConfigurationRequestSet] = None


class GetSubnetCidrReservationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[GetSubnetCidrReservationsMaxResults] = None
    NextToken: Optional[String] = None
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')


class GetTransitGatewayAttachmentPropagationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class GetTransitGatewayMulticastDomainAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayMulticastDomainId_1: TransitGatewayMulticastDomainId = Field(
        ..., alias='TransitGatewayMulticastDomainId'
    )


class GetTransitGatewayPolicyTableAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayPolicyTableId_1: TransitGatewayPolicyTableId = Field(
        ..., alias='TransitGatewayPolicyTableId'
    )


class GetTransitGatewayPolicyTableEntriesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayPolicyTableId_1: TransitGatewayPolicyTableId = Field(
        ..., alias='TransitGatewayPolicyTableId'
    )


class GetTransitGatewayPrefixListReferencesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class GetTransitGatewayRouteTableAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class GetTransitGatewayRouteTableAssociationsResult(BaseModel):
    Associations: Optional[TransitGatewayRouteTableAssociationList] = None
    NextToken: Optional[String] = None


class GetTransitGatewayRouteTablePropagationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class GetTransitGatewayRouteTablePropagationsResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayRouteTablePropagations: Optional[
        TransitGatewayRouteTablePropagationList
    ] = None


class GetVerifiedAccessEndpointPolicyRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VerifiedAccessEndpointId_1: VerifiedAccessEndpointId = Field(
        ..., alias='VerifiedAccessEndpointId'
    )


class GetVerifiedAccessEndpointPolicyResult(BaseModel):
    PolicyDocument: Optional[String] = None
    PolicyEnabled: Optional[Boolean] = None


class GetVerifiedAccessGroupPolicyRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VerifiedAccessGroupId_1: VerifiedAccessGroupId = Field(
        ..., alias='VerifiedAccessGroupId'
    )


class GetVerifiedAccessGroupPolicyResult(BaseModel):
    PolicyDocument: Optional[String] = None
    PolicyEnabled: Optional[Boolean] = None


class GetVpnConnectionDeviceSampleConfigurationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InternetKeyExchangeVersion: Optional[String] = None
    VpnConnectionDeviceTypeId_1: VpnConnectionDeviceTypeId = Field(
        ..., alias='VpnConnectionDeviceTypeId'
    )
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')


class GetVpnConnectionDeviceSampleConfigurationResult(BaseModel):
    VpnConnectionDeviceSampleConfiguration_1: Optional[
        VpnConnectionDeviceSampleConfiguration
    ] = Field(None, alias='VpnConnectionDeviceSampleConfiguration')


class GetVpnConnectionDeviceTypesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[GVCDMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetVpnConnectionDeviceTypesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VpnConnectionDeviceTypes: Optional[VpnConnectionDeviceTypeList] = None


class GetVpnTunnelReplacementStatusRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')
    VpnTunnelOutsideIpAddress: String


class GpuDeviceMemoryInfo(BaseModel):
    SizeInMiB: Optional[GpuDeviceMemorySize] = None


class GroupIdStringList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class GroupIdentifier(BaseModel):
    GroupId: Optional[String] = None
    GroupName: Optional[String] = None


class GroupIdentifierList(RootModel[List[GroupIdentifier]]):
    root: List[GroupIdentifier]


class GroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class GroupNameStringList(RootModel[List[SecurityGroupName]]):
    root: List[SecurityGroupName]


class HistoryRecord(BaseModel):
    EventInformation_1: Optional[EventInformation] = Field(
        None, alias='EventInformation'
    )
    EventType_1: Optional[EventType] = Field(None, alias='EventType')
    Timestamp: Optional[DateTime] = None


class HistoryRecordEntry(BaseModel):
    EventInformation_1: Optional[EventInformation] = Field(
        None, alias='EventInformation'
    )
    EventType: Optional[FleetEventType] = None
    Timestamp: Optional[DateTime] = None


class HistoryRecordSet(RootModel[List[HistoryRecordEntry]]):
    root: List[HistoryRecordEntry]


class HistoryRecords(RootModel[List[HistoryRecord]]):
    root: List[HistoryRecord]


class HostInstance(BaseModel):
    InstanceId: Optional[String] = None
    InstanceType: Optional[String] = None
    OwnerId: Optional[String] = None


class HostInstanceList(RootModel[List[HostInstance]]):
    root: List[HostInstance]


class HostOffering(BaseModel):
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Duration: Optional[Integer] = None
    HourlyPrice: Optional[String] = None
    InstanceFamily: Optional[String] = None
    OfferingId_1: Optional[OfferingId] = Field(None, alias='OfferingId')
    PaymentOption_1: Optional[PaymentOption] = Field(None, alias='PaymentOption')
    UpfrontPrice: Optional[String] = None


class HostOfferingSet(RootModel[List[HostOffering]]):
    root: List[HostOffering]


class HostProperties(BaseModel):
    Cores: Optional[Integer] = None
    InstanceFamily: Optional[String] = None
    InstanceType: Optional[String] = None
    Sockets: Optional[Integer] = None
    TotalVCpus: Optional[Integer] = None


class IKEVersionsListValue(BaseModel):
    Value: Optional[String] = None


class IKEVersionsRequestListValue(BaseModel):
    Value: Optional[String] = None


class IamInstanceProfile(BaseModel):
    Arn: Optional[String] = None
    Id: Optional[String] = None


class IamInstanceProfileAssociation(BaseModel):
    AssociationId: Optional[String] = None
    IamInstanceProfile_1: Optional[IamInstanceProfile] = Field(
        None, alias='IamInstanceProfile'
    )
    InstanceId: Optional[String] = None
    State: Optional[IamInstanceProfileAssociationState] = None
    Timestamp: Optional[DateTime] = None


class IamInstanceProfileAssociationSet(RootModel[List[IamInstanceProfileAssociation]]):
    root: List[IamInstanceProfileAssociation]


class IamInstanceProfileSpecification(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None


class IcmpTypeCode(BaseModel):
    Code: Optional[Integer] = None
    Type: Optional[Integer] = None


class IdFormat(BaseModel):
    Deadline: Optional[DateTime] = None
    Resource: Optional[String] = None
    UseLongIds: Optional[Boolean] = None


class IdFormatList(RootModel[List[IdFormat]]):
    root: List[IdFormat]


class ImageDiskContainer(BaseModel):
    Description: Optional[String] = None
    DeviceName: Optional[String] = None
    Format: Optional[String] = None
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    Url: Optional[String] = None
    UserBucket_1: Optional[UserBucket] = Field(None, alias='UserBucket')


class ImageDiskContainerList(RootModel[List[ImageDiskContainer]]):
    root: List[ImageDiskContainer]


class ImageRecycleBinInfo(BaseModel):
    Description: Optional[String] = None
    ImageId: Optional[String] = None
    Name: Optional[String] = None
    RecycleBinEnterTime: Optional[MillisecondDateTime] = None
    RecycleBinExitTime: Optional[MillisecondDateTime] = None


class ImageRecycleBinInfoList(RootModel[List[ImageRecycleBinInfo]]):
    root: List[ImageRecycleBinInfo]


class ImportClientVpnClientCertificateRevocationListRequest(BaseModel):
    CertificateRevocationList: String
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None


class ImportImageLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: Optional[String] = None


class ImportImageLicenseConfigurationResponse(BaseModel):
    LicenseConfigurationArn: Optional[String] = None


class ImportImageLicenseSpecificationListRequest(
    RootModel[List[ImportImageLicenseConfigurationRequest]]
):
    root: List[ImportImageLicenseConfigurationRequest]


class ImportImageLicenseSpecificationListResponse(
    RootModel[List[ImportImageLicenseConfigurationResponse]]
):
    root: List[ImportImageLicenseConfigurationResponse]


class ImportImageRequest(BaseModel):
    Architecture: Optional[String] = None
    BootMode: Optional[BootModeValues] = None
    ClientData_1: Optional[ClientData] = Field(None, alias='ClientData')
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DiskContainers: Optional[ImageDiskContainerList] = None
    DryRun: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    Hypervisor: Optional[String] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LicenseSpecifications: Optional[ImportImageLicenseSpecificationListRequest] = None
    LicenseType: Optional[String] = None
    Platform: Optional[String] = None
    RoleName: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    UsageOperation: Optional[String] = None


class ImportInstanceVolumeDetailItem(BaseModel):
    AvailabilityZone: Optional[String] = None
    BytesConverted: Optional[Long] = None
    Description: Optional[String] = None
    Image: Optional[DiskImageDescription] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None
    Volume: Optional[DiskImageVolumeDescription] = None


class ImportInstanceVolumeDetailSet(RootModel[List[ImportInstanceVolumeDetailItem]]):
    root: List[ImportInstanceVolumeDetailItem]


class ImportKeyPairRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    KeyName: String
    PublicKeyMaterial: Blob
    TagSpecifications: Optional[TagSpecificationList] = None


class ImportKeyPairResult(BaseModel):
    KeyFingerprint: Optional[String] = None
    KeyName: Optional[String] = None
    KeyPairId: Optional[String] = None
    Tags: Optional[TagList] = None


class ImportVolumeRequest(BaseModel):
    AvailabilityZone: String
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Image: DiskImageDetail
    Volume: VolumeDetail


class ImportVolumeTaskDetails(BaseModel):
    AvailabilityZone: Optional[String] = None
    BytesConverted: Optional[Long] = None
    Description: Optional[String] = None
    Image: Optional[DiskImageDescription] = None
    Volume: Optional[DiskImageVolumeDescription] = None


class InferenceDeviceInfo(BaseModel):
    Count: Optional[InferenceDeviceCount] = None
    Manufacturer: Optional[InferenceDeviceManufacturerName] = None
    Name: Optional[InferenceDeviceName] = None


class InferenceDeviceInfoList(RootModel[List[InferenceDeviceInfo]]):
    root: List[InferenceDeviceInfo]


class InsideCidrBlocksStringList(RootModel[List[String]]):
    root: List[String]


class InstanceBlockDeviceMapping(BaseModel):
    DeviceName: Optional[String] = None
    Ebs: Optional[EbsInstanceBlockDevice] = None


class InstanceBlockDeviceMappingList(RootModel[List[InstanceBlockDeviceMapping]]):
    root: List[InstanceBlockDeviceMapping]


class InstanceBlockDeviceMappingSpecification(BaseModel):
    DeviceName: Optional[String] = None
    Ebs: Optional[EbsInstanceBlockDeviceSpecification] = None
    NoDevice: Optional[String] = None
    VirtualName: Optional[String] = None


class InstanceBlockDeviceMappingSpecificationList(
    RootModel[List[InstanceBlockDeviceMappingSpecification]]
):
    root: List[InstanceBlockDeviceMappingSpecification]


class InstanceCapacity(BaseModel):
    AvailableCapacity: Optional[Integer] = None
    InstanceType: Optional[String] = None
    TotalCapacity: Optional[Integer] = None


class InstanceCount(BaseModel):
    InstanceCount: Optional[Integer] = None
    State: Optional[ListingState] = None


class InstanceCountList(RootModel[List[InstanceCount]]):
    root: List[InstanceCount]


class InstanceCreditSpecification(BaseModel):
    CpuCredits: Optional[String] = None
    InstanceId: Optional[String] = None


class InstanceCreditSpecificationList(RootModel[List[InstanceCreditSpecification]]):
    root: List[InstanceCreditSpecification]


class InstanceCreditSpecificationRequest(BaseModel):
    CpuCredits: Optional[String] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class InstanceEventWindowAssociationRequest(BaseModel):
    DedicatedHostIds: Optional[DedicatedHostIdList] = None
    InstanceIds: Optional[InstanceIdList] = None
    InstanceTags: Optional[TagList] = None


class InstanceEventWindowAssociationTarget(BaseModel):
    DedicatedHostIds: Optional[DedicatedHostIdList] = None
    InstanceIds: Optional[InstanceIdList] = None
    Tags: Optional[TagList] = None


class InstanceEventWindowDisassociationRequest(BaseModel):
    DedicatedHostIds: Optional[DedicatedHostIdList] = None
    InstanceIds: Optional[InstanceIdList] = None
    InstanceTags: Optional[TagList] = None


class InstanceEventWindowTimeRange(BaseModel):
    EndHour: Optional[Hour] = None
    EndWeekDay: Optional[WeekDay] = None
    StartHour: Optional[Hour] = None
    StartWeekDay: Optional[WeekDay] = None


class InstanceEventWindowTimeRangeList(RootModel[List[InstanceEventWindowTimeRange]]):
    root: List[InstanceEventWindowTimeRange]


class InstanceEventWindowTimeRangeRequest(BaseModel):
    EndHour: Optional[Hour] = None
    EndWeekDay: Optional[WeekDay] = None
    StartHour: Optional[Hour] = None
    StartWeekDay: Optional[WeekDay] = None


class InstanceEventWindowTimeRangeRequestSet(
    RootModel[List[InstanceEventWindowTimeRangeRequest]]
):
    root: List[InstanceEventWindowTimeRangeRequest]


class InstanceExportDetails(BaseModel):
    InstanceId: Optional[String] = None
    TargetEnvironment: Optional[ExportEnvironment] = None


class InstanceFamilyCreditSpecification(BaseModel):
    CpuCredits: Optional[String] = None
    InstanceFamily: Optional[UnlimitedSupportedInstanceFamily] = None


class InstanceIpv4Prefix(BaseModel):
    Ipv4Prefix: Optional[String] = None


class InstanceIpv4PrefixList(RootModel[List[InstanceIpv4Prefix]]):
    root: List[InstanceIpv4Prefix]


class InstanceIpv6Address(BaseModel):
    Ipv6Address: Optional[String] = None


class InstanceIpv6AddressList(RootModel[List[InstanceIpv6Address]]):
    root: List[InstanceIpv6Address]


class InstanceIpv6AddressRequest(BaseModel):
    Ipv6Address: Optional[String] = None


class InstanceIpv6Prefix(BaseModel):
    Ipv6Prefix: Optional[String] = None


class InstanceIpv6PrefixList(RootModel[List[InstanceIpv6Prefix]]):
    root: List[InstanceIpv6Prefix]


class InstanceMetadataOptionsRequest(BaseModel):
    HttpEndpoint: Optional[InstanceMetadataEndpointState] = None
    HttpProtocolIpv6: Optional[InstanceMetadataProtocolState] = None
    HttpPutResponseHopLimit: Optional[Integer] = None
    HttpTokens: Optional[HttpTokensState] = None
    InstanceMetadataTags: Optional[InstanceMetadataTagsState] = None


class InstanceMetadataOptionsResponse(BaseModel):
    HttpEndpoint: Optional[InstanceMetadataEndpointState] = None
    HttpProtocolIpv6: Optional[InstanceMetadataProtocolState] = None
    HttpPutResponseHopLimit: Optional[Integer] = None
    HttpTokens: Optional[HttpTokensState] = None
    InstanceMetadataTags: Optional[InstanceMetadataTagsState] = None
    State: Optional[InstanceMetadataOptionsState] = None


class InstanceNetworkInterfaceAssociation(BaseModel):
    CarrierIp: Optional[String] = None
    CustomerOwnedIp: Optional[String] = None
    IpOwnerId: Optional[String] = None
    PublicDnsName: Optional[String] = None
    PublicIp: Optional[String] = None


class InstanceNetworkInterfaceAttachment(BaseModel):
    AttachTime: Optional[DateTime] = None
    AttachmentId: Optional[String] = None
    DeleteOnTermination: Optional[Boolean] = None
    DeviceIndex: Optional[Integer] = None
    NetworkCardIndex: Optional[Integer] = None
    Status: Optional[AttachmentStatus] = None


class InstancePrivateIpAddress(BaseModel):
    Association: Optional[InstanceNetworkInterfaceAssociation] = None
    Primary: Optional[Boolean] = None
    PrivateDnsName: Optional[String] = None
    PrivateIpAddress: Optional[String] = None


class InstancePrivateIpAddressList(RootModel[List[InstancePrivateIpAddress]]):
    root: List[InstancePrivateIpAddress]


class InstanceRequirements(BaseModel):
    AcceleratorCount_1: Optional[AcceleratorCount] = Field(
        None, alias='AcceleratorCount'
    )
    AcceleratorManufacturers: Optional[AcceleratorManufacturerSet] = None
    AcceleratorNames: Optional[AcceleratorNameSet] = None
    AcceleratorTotalMemoryMiB_1: Optional[AcceleratorTotalMemoryMiB] = Field(
        None, alias='AcceleratorTotalMemoryMiB'
    )
    AcceleratorTypes: Optional[AcceleratorTypeSet] = None
    AllowedInstanceTypes: Optional[AllowedInstanceTypeSet] = None
    BareMetal_1: Optional[BareMetal] = Field(None, alias='BareMetal')
    BaselineEbsBandwidthMbps_1: Optional[BaselineEbsBandwidthMbps] = Field(
        None, alias='BaselineEbsBandwidthMbps'
    )
    BurstablePerformance_1: Optional[BurstablePerformance] = Field(
        None, alias='BurstablePerformance'
    )
    CpuManufacturers: Optional[CpuManufacturerSet] = None
    ExcludedInstanceTypes: Optional[ExcludedInstanceTypeSet] = None
    InstanceGenerations: Optional[InstanceGenerationSet] = None
    LocalStorage_1: Optional[LocalStorage] = Field(None, alias='LocalStorage')
    LocalStorageTypes: Optional[LocalStorageTypeSet] = None
    MemoryGiBPerVCpu_1: Optional[MemoryGiBPerVCpu] = Field(
        None, alias='MemoryGiBPerVCpu'
    )
    MemoryMiB_1: Optional[MemoryMiB] = Field(None, alias='MemoryMiB')
    NetworkBandwidthGbps_1: Optional[NetworkBandwidthGbps] = Field(
        None, alias='NetworkBandwidthGbps'
    )
    NetworkInterfaceCount_1: Optional[NetworkInterfaceCount] = Field(
        None, alias='NetworkInterfaceCount'
    )
    OnDemandMaxPricePercentageOverLowestPrice: Optional[Integer] = None
    RequireHibernateSupport: Optional[Boolean] = None
    SpotMaxPricePercentageOverLowestPrice: Optional[Integer] = None
    TotalLocalStorageGB_1: Optional[TotalLocalStorageGB] = Field(
        None, alias='TotalLocalStorageGB'
    )
    VCpuCount: Optional[VCpuCountRange] = None


class InstanceRequirementsRequest(BaseModel):
    AcceleratorCount: Optional[AcceleratorCountRequest] = None
    AcceleratorManufacturers: Optional[AcceleratorManufacturerSet] = None
    AcceleratorNames: Optional[AcceleratorNameSet] = None
    AcceleratorTotalMemoryMiB: Optional[AcceleratorTotalMemoryMiBRequest] = None
    AcceleratorTypes: Optional[AcceleratorTypeSet] = None
    AllowedInstanceTypes: Optional[AllowedInstanceTypeSet] = None
    BareMetal_1: Optional[BareMetal] = Field(None, alias='BareMetal')
    BaselineEbsBandwidthMbps: Optional[BaselineEbsBandwidthMbpsRequest] = None
    BurstablePerformance_1: Optional[BurstablePerformance] = Field(
        None, alias='BurstablePerformance'
    )
    CpuManufacturers: Optional[CpuManufacturerSet] = None
    ExcludedInstanceTypes: Optional[ExcludedInstanceTypeSet] = None
    InstanceGenerations: Optional[InstanceGenerationSet] = None
    LocalStorage_1: Optional[LocalStorage] = Field(None, alias='LocalStorage')
    LocalStorageTypes: Optional[LocalStorageTypeSet] = None
    MemoryGiBPerVCpu: Optional[MemoryGiBPerVCpuRequest] = None
    MemoryMiB: MemoryMiBRequest
    NetworkBandwidthGbps: Optional[NetworkBandwidthGbpsRequest] = None
    NetworkInterfaceCount: Optional[NetworkInterfaceCountRequest] = None
    OnDemandMaxPricePercentageOverLowestPrice: Optional[Integer] = None
    RequireHibernateSupport: Optional[Boolean] = None
    SpotMaxPricePercentageOverLowestPrice: Optional[Integer] = None
    TotalLocalStorageGB: Optional[TotalLocalStorageGBRequest] = None
    VCpuCount: VCpuCountRangeRequest


class InstanceRequirementsWithMetadataRequest(BaseModel):
    ArchitectureTypes: Optional[ArchitectureTypeSet] = None
    InstanceRequirements: Optional[InstanceRequirementsRequest] = None
    VirtualizationTypes: Optional[VirtualizationTypeSet] = None


class InstanceState(BaseModel):
    Code: Optional[Integer] = None
    Name: Optional[InstanceStateName] = None


class InstanceStateChange(BaseModel):
    CurrentState: Optional[InstanceState] = None
    InstanceId: Optional[String] = None
    PreviousState: Optional[InstanceState] = None


class InstanceStateChangeList(RootModel[List[InstanceStateChange]]):
    root: List[InstanceStateChange]


class InstanceStatusDetails(BaseModel):
    ImpairedSince: Optional[DateTime] = None
    Name: Optional[StatusName] = None
    Status: Optional[StatusType] = None


class InstanceStatusDetailsList(RootModel[List[InstanceStatusDetails]]):
    root: List[InstanceStatusDetails]


class InstanceStatusEvent(BaseModel):
    Code: Optional[EventCode] = None
    Description: Optional[String] = None
    InstanceEventId_1: Optional[InstanceEventId] = Field(None, alias='InstanceEventId')
    NotAfter: Optional[DateTime] = None
    NotBefore: Optional[DateTime] = None
    NotBeforeDeadline: Optional[DateTime] = None


class InstanceStatusEventList(RootModel[List[InstanceStatusEvent]]):
    root: List[InstanceStatusEvent]


class InstanceStatusSummary(BaseModel):
    Details: Optional[InstanceStatusDetailsList] = None
    Status: Optional[SummaryStatus] = None


class InstanceStorageInfo(BaseModel):
    Disks: Optional[DiskInfoList] = None
    EncryptionSupport: Optional[InstanceStorageEncryptionSupport] = None
    NvmeSupport: Optional[EphemeralNvmeSupport] = None
    TotalSizeInGB: Optional[DiskSize] = None


class InstanceTagKeySet(RootModel[List[String]]):
    root: List[String]


class InstanceTagNotificationAttribute(BaseModel):
    IncludeAllTagsOfInstance: Optional[Boolean] = None
    InstanceTagKeys: Optional[InstanceTagKeySet] = None


class InstanceTypeInfoFromInstanceRequirements(BaseModel):
    InstanceType: Optional[String] = None


class InstanceTypeInfoFromInstanceRequirementsSet(
    RootModel[List[InstanceTypeInfoFromInstanceRequirements]]
):
    root: List[InstanceTypeInfoFromInstanceRequirements]


class InstanceTypeOffering(BaseModel):
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Location_1: Optional[Location] = Field(None, alias='Location')
    LocationType_1: Optional[LocationType] = Field(None, alias='LocationType')


class InstanceTypeOfferingsList(RootModel[List[InstanceTypeOffering]]):
    root: List[InstanceTypeOffering]


class InstanceTypes(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=1000, min_length=0)


class InstanceTypesList(RootModel[List[String]]):
    root: List[String]


class InstanceUsage(BaseModel):
    AccountId: Optional[String] = None
    UsedInstanceCount: Optional[Integer] = None


class InstanceUsageSet(RootModel[List[InstanceUsage]]):
    root: List[InstanceUsage]


class IntegrateServices(BaseModel):
    AthenaIntegrations: Optional[AthenaIntegrationsSet] = None


class InternetGatewayAttachment(BaseModel):
    State: Optional[AttachmentStatus] = None
    VpcId: Optional[String] = None


class InternetGatewayAttachmentList(RootModel[List[InternetGatewayAttachment]]):
    root: List[InternetGatewayAttachment]


class IpList(RootModel[List[String]]):
    root: List[String]


class IpPrefixList(RootModel[List[String]]):
    root: List[String]


class IpRange(BaseModel):
    CidrIp: Optional[String] = None
    Description: Optional[String] = None


class IpRangeList(RootModel[List[IpRange]]):
    root: List[IpRange]


class IpRanges(RootModel[List[String]]):
    root: List[String]


class IpamAddressHistoryRecord(BaseModel):
    ResourceCidr: Optional[String] = None
    ResourceComplianceStatus: Optional[IpamComplianceStatus] = None
    ResourceId: Optional[String] = None
    ResourceName: Optional[String] = None
    ResourceOverlapStatus: Optional[IpamOverlapStatus] = None
    ResourceOwnerId: Optional[String] = None
    ResourceRegion: Optional[String] = None
    ResourceType: Optional[IpamAddressHistoryResourceType] = None
    SampledEndTime: Optional[MillisecondDateTime] = None
    SampledStartTime: Optional[MillisecondDateTime] = None
    VpcId: Optional[String] = None


class IpamAddressHistoryRecordSet(RootModel[List[IpamAddressHistoryRecord]]):
    root: List[IpamAddressHistoryRecord]


class IpamCidrAuthorizationContext(BaseModel):
    Message: Optional[String] = None
    Signature: Optional[String] = None


class IpamDiscoveryFailureReason(BaseModel):
    Code: Optional[IpamDiscoveryFailureCode] = None
    Message: Optional[String] = None


class IpamOperatingRegion(BaseModel):
    RegionName: Optional[String] = None


class IpamOperatingRegionSet(RootModel[List[IpamOperatingRegion]]):
    root: List[IpamOperatingRegion]


class IpamPoolAllocation(BaseModel):
    Cidr: Optional[String] = None
    Description: Optional[String] = None
    IpamPoolAllocationId_1: Optional[IpamPoolAllocationId] = Field(
        None, alias='IpamPoolAllocationId'
    )
    ResourceId: Optional[String] = None
    ResourceOwner: Optional[String] = None
    ResourceRegion: Optional[String] = None
    ResourceType: Optional[IpamPoolAllocationResourceType] = None


class IpamPoolAllocationDisallowedCidrs(RootModel[List[String]]):
    root: List[String]


class IpamPoolAllocationSet(RootModel[List[IpamPoolAllocation]]):
    root: List[IpamPoolAllocation]


class IpamPoolCidrFailureReason(BaseModel):
    Code: Optional[IpamPoolCidrFailureCode] = None
    Message: Optional[String] = None


class IpamResourceDiscovery(BaseModel):
    Description: Optional[String] = None
    IpamResourceDiscoveryArn: Optional[String] = None
    IpamResourceDiscoveryId_1: Optional[IpamResourceDiscoveryId] = Field(
        None, alias='IpamResourceDiscoveryId'
    )
    IpamResourceDiscoveryRegion: Optional[String] = None
    IsDefault: Optional[Boolean] = None
    OperatingRegions: Optional[IpamOperatingRegionSet] = None
    OwnerId: Optional[String] = None
    State: Optional[IpamResourceDiscoveryState] = None
    Tags: Optional[TagList] = None


class IpamResourceDiscoveryAssociation(BaseModel):
    IpamArn: Optional[ResourceArn] = None
    IpamId_1: Optional[IpamId] = Field(None, alias='IpamId')
    IpamRegion: Optional[String] = None
    IpamResourceDiscoveryAssociationArn: Optional[String] = None
    IpamResourceDiscoveryAssociationId_1: Optional[
        IpamResourceDiscoveryAssociationId
    ] = Field(None, alias='IpamResourceDiscoveryAssociationId')
    IpamResourceDiscoveryId_1: Optional[IpamResourceDiscoveryId] = Field(
        None, alias='IpamResourceDiscoveryId'
    )
    IsDefault: Optional[Boolean] = None
    OwnerId: Optional[String] = None
    ResourceDiscoveryStatus: Optional[IpamAssociatedResourceDiscoveryStatus] = None
    State: Optional[IpamResourceDiscoveryAssociationState] = None
    Tags: Optional[TagList] = None


class IpamResourceDiscoveryAssociationSet(
    RootModel[List[IpamResourceDiscoveryAssociation]]
):
    root: List[IpamResourceDiscoveryAssociation]


class IpamResourceDiscoverySet(RootModel[List[IpamResourceDiscovery]]):
    root: List[IpamResourceDiscovery]


class IpamResourceTag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class IpamResourceTagList(RootModel[List[IpamResourceTag]]):
    root: List[IpamResourceTag]


class IpamScope(BaseModel):
    Description: Optional[String] = None
    IpamArn: Optional[ResourceArn] = None
    IpamRegion: Optional[String] = None
    IpamScopeArn: Optional[ResourceArn] = None
    IpamScopeId_1: Optional[IpamScopeId] = Field(None, alias='IpamScopeId')
    IpamScopeType_1: Optional[IpamScopeType] = Field(None, alias='IpamScopeType')
    IsDefault: Optional[Boolean] = None
    OwnerId: Optional[String] = None
    PoolCount: Optional[Integer] = None
    State: Optional[IpamScopeState] = None
    Tags: Optional[TagList] = None


class IpamScopeSet(RootModel[List[IpamScope]]):
    root: List[IpamScope]


class Ipv4PrefixSpecification(BaseModel):
    Ipv4Prefix: Optional[String] = None


class Ipv4PrefixSpecificationRequest(BaseModel):
    Ipv4Prefix: Optional[String] = None


class Ipv4PrefixSpecificationResponse(BaseModel):
    Ipv4Prefix: Optional[String] = None


class Ipv4PrefixesList(RootModel[List[Ipv4PrefixSpecification]]):
    root: List[Ipv4PrefixSpecification]


class Ipv6AddressList(RootModel[List[String]]):
    root: List[String]


class Ipv6CidrAssociation(BaseModel):
    AssociatedResource: Optional[String] = None
    Ipv6Cidr: Optional[String] = None


class Ipv6CidrAssociationSet(RootModel[List[Ipv6CidrAssociation]]):
    root: List[Ipv6CidrAssociation]


class Ipv6CidrBlock(BaseModel):
    Ipv6CidrBlock: Optional[String] = None


class Ipv6CidrBlockSet(RootModel[List[Ipv6CidrBlock]]):
    root: List[Ipv6CidrBlock]


class Ipv6PrefixSpecification(BaseModel):
    Ipv6Prefix: Optional[String] = None


class Ipv6PrefixSpecificationRequest(BaseModel):
    Ipv6Prefix: Optional[String] = None


class Ipv6PrefixSpecificationResponse(BaseModel):
    Ipv6Prefix: Optional[String] = None


class Ipv6PrefixesList(RootModel[List[Ipv6PrefixSpecification]]):
    root: List[Ipv6PrefixSpecification]


class Ipv6Range(BaseModel):
    CidrIpv6: Optional[String] = None
    Description: Optional[String] = None


class Ipv6RangeList(RootModel[List[Ipv6Range]]):
    root: List[Ipv6Range]


class KeyNameStringList(RootModel[List[KeyPairName]]):
    root: List[KeyPairName]


class KeyPair(BaseModel):
    KeyFingerprint: Optional[String] = None
    KeyMaterial: Optional[SensitiveUserData] = None
    KeyName: Optional[String] = None
    KeyPairId: Optional[String] = None
    Tags: Optional[TagList] = None


class KeyPairInfo(BaseModel):
    CreateTime: Optional[MillisecondDateTime] = None
    KeyFingerprint: Optional[String] = None
    KeyName: Optional[String] = None
    KeyPairId: Optional[String] = None
    KeyType_1: Optional[KeyType] = Field(None, alias='KeyType')
    PublicKey: Optional[String] = None
    Tags: Optional[TagList] = None


class KeyPairList(RootModel[List[KeyPairInfo]]):
    root: List[KeyPairInfo]


class LastError(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class LaunchPermission(BaseModel):
    Group: Optional[PermissionGroup] = None
    OrganizationArn: Optional[String] = None
    OrganizationalUnitArn: Optional[String] = None
    UserId: Optional[String] = None


class LaunchPermissionList(RootModel[List[LaunchPermission]]):
    root: List[LaunchPermission]


class LaunchPermissionModifications(BaseModel):
    Add: Optional[LaunchPermissionList] = None
    Remove: Optional[LaunchPermissionList] = None


class LaunchTemplate(BaseModel):
    CreateTime: Optional[DateTime] = None
    CreatedBy: Optional[String] = None
    DefaultVersionNumber: Optional[Long] = None
    LatestVersionNumber: Optional[Long] = None
    LaunchTemplateId: Optional[String] = None
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    Tags: Optional[TagList] = None


class LaunchTemplateCapacityReservationSpecificationRequest(BaseModel):
    CapacityReservationPreference_1: Optional[CapacityReservationPreference] = Field(
        None, alias='CapacityReservationPreference'
    )
    CapacityReservationTarget_1: Optional[CapacityReservationTarget] = Field(
        None, alias='CapacityReservationTarget'
    )


class LaunchTemplateCapacityReservationSpecificationResponse(BaseModel):
    CapacityReservationPreference_1: Optional[CapacityReservationPreference] = Field(
        None, alias='CapacityReservationPreference'
    )
    CapacityReservationTarget: Optional[CapacityReservationTargetResponse] = None


class LaunchTemplateEbsBlockDevice(BaseModel):
    DeleteOnTermination: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    Iops: Optional[Integer] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    Throughput: Optional[Integer] = None
    VolumeSize: Optional[Integer] = None
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')


class LaunchTemplateEbsBlockDeviceRequest(BaseModel):
    DeleteOnTermination: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    Iops: Optional[Integer] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    Throughput: Optional[Integer] = None
    VolumeSize: Optional[Integer] = None
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')


class LaunchTemplateElasticInferenceAccelerator(BaseModel):
    Count: Optional[LaunchTemplateElasticInferenceAcceleratorCount] = None
    Type: String


class LaunchTemplateElasticInferenceAcceleratorList(
    RootModel[List[LaunchTemplateElasticInferenceAccelerator]]
):
    root: List[LaunchTemplateElasticInferenceAccelerator]


class LaunchTemplateElasticInferenceAcceleratorResponse(BaseModel):
    Count: Optional[Integer] = None
    Type: Optional[String] = None


class LaunchTemplateElasticInferenceAcceleratorResponseList(
    RootModel[List[LaunchTemplateElasticInferenceAcceleratorResponse]]
):
    root: List[LaunchTemplateElasticInferenceAcceleratorResponse]


class LaunchTemplateIamInstanceProfileSpecification(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None


class LaunchTemplateIamInstanceProfileSpecificationRequest(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None


class LaunchTemplateInstanceMetadataOptions(BaseModel):
    HttpEndpoint: Optional[LaunchTemplateInstanceMetadataEndpointState] = None
    HttpProtocolIpv6: Optional[LaunchTemplateInstanceMetadataProtocolIpv6] = None
    HttpPutResponseHopLimit: Optional[Integer] = None
    HttpTokens: Optional[LaunchTemplateHttpTokensState] = None
    InstanceMetadataTags: Optional[LaunchTemplateInstanceMetadataTagsState] = None
    State: Optional[LaunchTemplateInstanceMetadataOptionsState] = None


class LaunchTemplateInstanceMetadataOptionsRequest(BaseModel):
    HttpEndpoint: Optional[LaunchTemplateInstanceMetadataEndpointState] = None
    HttpProtocolIpv6: Optional[LaunchTemplateInstanceMetadataProtocolIpv6] = None
    HttpPutResponseHopLimit: Optional[Integer] = None
    HttpTokens: Optional[LaunchTemplateHttpTokensState] = None
    InstanceMetadataTags: Optional[LaunchTemplateInstanceMetadataTagsState] = None


class LaunchTemplateLicenseConfiguration(BaseModel):
    LicenseConfigurationArn: Optional[String] = None


class LaunchTemplateLicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: Optional[String] = None


class LaunchTemplateLicenseList(RootModel[List[LaunchTemplateLicenseConfiguration]]):
    root: List[LaunchTemplateLicenseConfiguration]


class LaunchTemplateLicenseSpecificationListRequest(
    RootModel[List[LaunchTemplateLicenseConfigurationRequest]]
):
    root: List[LaunchTemplateLicenseConfigurationRequest]


class LaunchTemplateOverrides(BaseModel):
    AvailabilityZone: Optional[String] = None
    InstanceRequirements_1: Optional[InstanceRequirements] = Field(
        None, alias='InstanceRequirements'
    )
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Priority: Optional[Double] = None
    SpotPrice: Optional[String] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    WeightedCapacity: Optional[Double] = None


class LaunchTemplateOverridesList(RootModel[List[LaunchTemplateOverrides]]):
    root: List[LaunchTemplateOverrides]


class LaunchTemplatePlacement(BaseModel):
    Affinity: Optional[String] = None
    AvailabilityZone: Optional[String] = None
    GroupId: Optional[PlacementGroupId] = None
    GroupName: Optional[String] = None
    HostId: Optional[String] = None
    HostResourceGroupArn: Optional[String] = None
    PartitionNumber: Optional[Integer] = None
    SpreadDomain: Optional[String] = None
    Tenancy_1: Optional[Tenancy] = Field(None, alias='Tenancy')


class LaunchTemplatePlacementRequest(BaseModel):
    Affinity: Optional[String] = None
    AvailabilityZone: Optional[String] = None
    GroupId: Optional[PlacementGroupId] = None
    GroupName: Optional[PlacementGroupName] = None
    HostId: Optional[DedicatedHostId] = None
    HostResourceGroupArn: Optional[String] = None
    PartitionNumber: Optional[Integer] = None
    SpreadDomain: Optional[String] = None
    Tenancy_1: Optional[Tenancy] = Field(None, alias='Tenancy')


class LaunchTemplateSet(RootModel[List[LaunchTemplate]]):
    root: List[LaunchTemplate]


class LaunchTemplateSpecification(BaseModel):
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName: Optional[String] = None
    Version: Optional[String] = None


class LaunchTemplateSpotMarketOptions(BaseModel):
    BlockDurationMinutes: Optional[Integer] = None
    InstanceInterruptionBehavior_1: Optional[InstanceInterruptionBehavior] = Field(
        None, alias='InstanceInterruptionBehavior'
    )
    MaxPrice: Optional[String] = None
    SpotInstanceType_1: Optional[SpotInstanceType] = Field(
        None, alias='SpotInstanceType'
    )
    ValidUntil: Optional[DateTime] = None


class LaunchTemplateSpotMarketOptionsRequest(BaseModel):
    BlockDurationMinutes: Optional[Integer] = None
    InstanceInterruptionBehavior_1: Optional[InstanceInterruptionBehavior] = Field(
        None, alias='InstanceInterruptionBehavior'
    )
    MaxPrice: Optional[String] = None
    SpotInstanceType_1: Optional[SpotInstanceType] = Field(
        None, alias='SpotInstanceType'
    )
    ValidUntil: Optional[DateTime] = None


class LaunchTemplateTagSpecification(BaseModel):
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    Tags: Optional[TagList] = None


class LaunchTemplateTagSpecificationList(
    RootModel[List[LaunchTemplateTagSpecification]]
):
    root: List[LaunchTemplateTagSpecification]


class LaunchTemplateTagSpecificationRequest(BaseModel):
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    Tags: Optional[TagList] = None


class LaunchTemplateTagSpecificationRequestList(
    RootModel[List[LaunchTemplateTagSpecificationRequest]]
):
    root: List[LaunchTemplateTagSpecificationRequest]


class LicenseConfiguration(BaseModel):
    LicenseConfigurationArn: Optional[String] = None


class LicenseConfigurationRequest(BaseModel):
    LicenseConfigurationArn: Optional[String] = None


class LicenseList(RootModel[List[LicenseConfiguration]]):
    root: List[LicenseConfiguration]


class LicenseSpecificationListRequest(RootModel[List[LicenseConfigurationRequest]]):
    root: List[LicenseConfigurationRequest]


class ListImagesInRecycleBinRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ImageIds: Optional[ImageIdStringList] = None
    MaxResults: Optional[ListImagesInRecycleBinMaxResults] = None
    NextToken: Optional[String] = None


class ListImagesInRecycleBinResult(BaseModel):
    Images: Optional[ImageRecycleBinInfoList] = None
    NextToken: Optional[String] = None


class ListSnapshotsInRecycleBinRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[ListSnapshotsInRecycleBinMaxResults] = None
    NextToken: Optional[String] = None
    SnapshotIds: Optional[SnapshotIdStringList] = None


class LoadBalancersConfig(BaseModel):
    ClassicLoadBalancersConfig_1: Optional[ClassicLoadBalancersConfig] = Field(
        None, alias='ClassicLoadBalancersConfig'
    )
    TargetGroupsConfig_1: Optional[TargetGroupsConfig] = Field(
        None, alias='TargetGroupsConfig'
    )


class LoadPermission(BaseModel):
    Group: Optional[PermissionGroup] = None
    UserId: Optional[String] = None


class LoadPermissionList(RootModel[List[LoadPermission]]):
    root: List[LoadPermission]


class LoadPermissionRequest(BaseModel):
    Group: Optional[PermissionGroup] = None
    UserId: Optional[String] = None


class LocalGateway(BaseModel):
    LocalGatewayId_1: Optional[LocalGatewayId] = Field(None, alias='LocalGatewayId')
    OutpostArn: Optional[String] = None
    OwnerId: Optional[String] = None
    State: Optional[String] = None
    Tags: Optional[TagList] = None


class LocalGatewayRoute(BaseModel):
    CoipPoolId_1: Optional[CoipPoolId] = Field(None, alias='CoipPoolId')
    DestinationCidrBlock: Optional[String] = None
    DestinationPrefixListId: Optional[PrefixListResourceId] = None
    LocalGatewayRouteTableArn: Optional[ResourceArn] = None
    LocalGatewayRouteTableId: Optional[LocalGatewayRoutetableId] = None
    LocalGatewayVirtualInterfaceGroupId_1: Optional[
        LocalGatewayVirtualInterfaceGroupId
    ] = Field(None, alias='LocalGatewayVirtualInterfaceGroupId')
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    OwnerId: Optional[String] = None
    State: Optional[LocalGatewayRouteState] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    Type: Optional[LocalGatewayRouteType] = None


class LocalGatewayRouteList(RootModel[List[LocalGatewayRoute]]):
    root: List[LocalGatewayRoute]


class LocalGatewayRouteTableIdSet(RootModel[List[LocalGatewayRoutetableId]]):
    root: List[LocalGatewayRoutetableId]


class LocalGatewayRouteTableVirtualInterfaceGroupAssociation(BaseModel):
    LocalGatewayId: Optional[String] = None
    LocalGatewayRouteTableArn: Optional[ResourceArn] = None
    LocalGatewayRouteTableId: Optional[LocalGatewayId] = None
    LocalGatewayRouteTableVirtualInterfaceGroupAssociationId_1: Optional[
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
    ] = Field(None, alias='LocalGatewayRouteTableVirtualInterfaceGroupAssociationId')
    LocalGatewayVirtualInterfaceGroupId_1: Optional[
        LocalGatewayVirtualInterfaceGroupId
    ] = Field(None, alias='LocalGatewayVirtualInterfaceGroupId')
    OwnerId: Optional[String] = None
    State: Optional[String] = None
    Tags: Optional[TagList] = None


class LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet(
    RootModel[List[LocalGatewayRouteTableVirtualInterfaceGroupAssociation]]
):
    root: List[LocalGatewayRouteTableVirtualInterfaceGroupAssociation]


class LocalGatewayRouteTableVpcAssociation(BaseModel):
    LocalGatewayId: Optional[String] = None
    LocalGatewayRouteTableArn: Optional[ResourceArn] = None
    LocalGatewayRouteTableId: Optional[String] = None
    LocalGatewayRouteTableVpcAssociationId_1: Optional[
        LocalGatewayRouteTableVpcAssociationId
    ] = Field(None, alias='LocalGatewayRouteTableVpcAssociationId')
    OwnerId: Optional[String] = None
    State: Optional[String] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class LocalGatewayRouteTableVpcAssociationSet(
    RootModel[List[LocalGatewayRouteTableVpcAssociation]]
):
    root: List[LocalGatewayRouteTableVpcAssociation]


class LocalGatewaySet(RootModel[List[LocalGateway]]):
    root: List[LocalGateway]


class LocalGatewayVirtualInterface(BaseModel):
    LocalAddress: Optional[String] = None
    LocalBgpAsn: Optional[Integer] = None
    LocalGatewayId: Optional[String] = None
    LocalGatewayVirtualInterfaceId_1: Optional[LocalGatewayVirtualInterfaceId] = Field(
        None, alias='LocalGatewayVirtualInterfaceId'
    )
    OwnerId: Optional[String] = None
    PeerAddress: Optional[String] = None
    PeerBgpAsn: Optional[Integer] = None
    Tags: Optional[TagList] = None
    Vlan: Optional[Integer] = None


class LocalGatewayVirtualInterfaceGroup(BaseModel):
    LocalGatewayId: Optional[String] = None
    LocalGatewayVirtualInterfaceGroupId_1: Optional[
        LocalGatewayVirtualInterfaceGroupId
    ] = Field(None, alias='LocalGatewayVirtualInterfaceGroupId')
    LocalGatewayVirtualInterfaceIds: Optional[LocalGatewayVirtualInterfaceIdSet] = None
    OwnerId: Optional[String] = None
    Tags: Optional[TagList] = None


class LocalGatewayVirtualInterfaceGroupSet(
    RootModel[List[LocalGatewayVirtualInterfaceGroup]]
):
    root: List[LocalGatewayVirtualInterfaceGroup]


class LocalGatewayVirtualInterfaceSet(RootModel[List[LocalGatewayVirtualInterface]]):
    root: List[LocalGatewayVirtualInterface]


class MaintenanceDetails(BaseModel):
    LastMaintenanceApplied: Optional[MillisecondDateTime] = None
    MaintenanceAutoAppliedAfter: Optional[MillisecondDateTime] = None
    PendingMaintenance: Optional[String] = None


class ManagedPrefixList(BaseModel):
    AddressFamily: Optional[String] = None
    MaxEntries: Optional[Integer] = None
    OwnerId: Optional[String] = None
    PrefixListArn: Optional[ResourceArn] = None
    PrefixListId: Optional[PrefixListResourceId] = None
    PrefixListName: Optional[String] = None
    State: Optional[PrefixListState] = None
    StateMessage: Optional[String] = None
    Tags: Optional[TagList] = None
    Version: Optional[Long] = None


class ManagedPrefixListSet(RootModel[List[ManagedPrefixList]]):
    root: List[ManagedPrefixList]


class MemoryInfo(BaseModel):
    SizeInMiB: Optional[MemorySize] = None


class MetricPoint(BaseModel):
    EndDate: Optional[MillisecondDateTime] = None
    StartDate: Optional[MillisecondDateTime] = None
    Status: Optional[String] = None
    Value: Optional[Float] = None


class MetricPoints(RootModel[List[MetricPoint]]):
    root: List[MetricPoint]


class ModifyAddressAttributeRequest(BaseModel):
    AllocationId_1: AllocationId = Field(..., alias='AllocationId')
    DomainName: Optional[String] = None
    DryRun: Optional[Boolean] = None


class ModifyAvailabilityZoneGroupRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupName: String
    OptInStatus: ModifyAvailabilityZoneOptInStatus


class ModifyCapacityReservationRequest(BaseModel):
    Accept: Optional[Boolean] = None
    AdditionalInfo: Optional[String] = None
    CapacityReservationId_1: CapacityReservationId = Field(
        ..., alias='CapacityReservationId'
    )
    DryRun: Optional[Boolean] = None
    EndDate: Optional[DateTime] = None
    EndDateType_1: Optional[EndDateType] = Field(None, alias='EndDateType')
    InstanceCount: Optional[Integer] = None


class ModifyClientVpnEndpointRequest(BaseModel):
    ClientConnectOptions_1: Optional[ClientConnectOptions] = Field(
        None, alias='ClientConnectOptions'
    )
    ClientLoginBannerOptions_1: Optional[ClientLoginBannerOptions] = Field(
        None, alias='ClientLoginBannerOptions'
    )
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    ConnectionLogOptions_1: Optional[ConnectionLogOptions] = Field(
        None, alias='ConnectionLogOptions'
    )
    Description: Optional[String] = None
    DnsServers: Optional[DnsServersOptionsModifyStructure] = None
    DryRun: Optional[Boolean] = None
    SecurityGroupIds: Optional[ClientVpnSecurityGroupIdSet] = None
    SelfServicePortal_1: Optional[SelfServicePortal] = Field(
        None, alias='SelfServicePortal'
    )
    ServerCertificateArn: Optional[String] = None
    SessionTimeoutHours: Optional[Integer] = None
    SplitTunnel: Optional[Boolean] = None
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')
    VpnPort: Optional[Integer] = None


class ModifyDefaultCreditSpecificationRequest(BaseModel):
    CpuCredits: String
    DryRun: Optional[Boolean] = None
    InstanceFamily: UnlimitedSupportedInstanceFamily


class ModifyDefaultCreditSpecificationResult(BaseModel):
    InstanceFamilyCreditSpecification_1: Optional[InstanceFamilyCreditSpecification] = (
        Field(None, alias='InstanceFamilyCreditSpecification')
    )


class ModifyEbsDefaultKmsKeyIdResult(BaseModel):
    KmsKeyId: Optional[String] = None


class ModifyHostsRequest(BaseModel):
    AutoPlacement_1: Optional[AutoPlacement] = Field(None, alias='AutoPlacement')
    HostIds: RequestHostIdList
    HostMaintenance_1: Optional[HostMaintenance] = Field(None, alias='HostMaintenance')
    HostRecovery_1: Optional[HostRecovery] = Field(None, alias='HostRecovery')
    InstanceFamily: Optional[String] = None
    InstanceType: Optional[String] = None


class ModifyIdFormatRequest(BaseModel):
    Resource: String
    UseLongIds: Boolean


class ModifyIdentityIdFormatRequest(BaseModel):
    PrincipalArn: String
    Resource: String
    UseLongIds: Boolean


class ModifyInstanceAttributeRequest(BaseModel):
    Attribute: Optional[InstanceAttributeName] = None
    BlockDeviceMappings: Optional[InstanceBlockDeviceMappingSpecificationList] = None
    DisableApiStop: Optional[AttributeBooleanValue] = None
    DisableApiTermination: Optional[AttributeBooleanValue] = None
    DryRun: Optional[Boolean] = None
    EbsOptimized: Optional[AttributeBooleanValue] = None
    EnaSupport: Optional[AttributeBooleanValue] = None
    Groups: Optional[GroupIdStringList] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    InstanceInitiatedShutdownBehavior: Optional[AttributeValue] = None
    InstanceType: Optional[AttributeValue] = None
    Kernel: Optional[AttributeValue] = None
    Ramdisk: Optional[AttributeValue] = None
    SourceDestCheck: Optional[AttributeBooleanValue] = None
    SriovNetSupport: Optional[AttributeValue] = None
    UserData: Optional[BlobAttributeValue] = None
    Value: Optional[String] = None


class ModifyInstanceEventStartTimeRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceEventId: String
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    NotBefore: DateTime


class ModifyInstanceEventStartTimeResult(BaseModel):
    Event: Optional[InstanceStatusEvent] = None


class ModifyInstanceEventWindowRequest(BaseModel):
    CronExpression: Optional[InstanceEventWindowCronExpression] = None
    DryRun: Optional[Boolean] = None
    InstanceEventWindowId_1: InstanceEventWindowId = Field(
        ..., alias='InstanceEventWindowId'
    )
    Name: Optional[String] = None
    TimeRanges: Optional[InstanceEventWindowTimeRangeRequestSet] = None


class ModifyInstanceMaintenanceOptionsResult(BaseModel):
    AutoRecovery: Optional[InstanceAutoRecoveryState] = None
    InstanceId: Optional[String] = None


class ModifyInstanceMetadataOptionsResult(BaseModel):
    InstanceId: Optional[String] = None
    InstanceMetadataOptions: Optional[InstanceMetadataOptionsResponse] = None


class ModifyInstancePlacementRequest(BaseModel):
    Affinity_1: Optional[Affinity] = Field(None, alias='Affinity')
    GroupId: Optional[PlacementGroupId] = None
    GroupName: Optional[PlacementGroupName] = None
    HostId: Optional[DedicatedHostId] = None
    HostResourceGroupArn: Optional[String] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    PartitionNumber: Optional[Integer] = None
    Tenancy: Optional[HostTenancy] = None


class ModifyIpamResourceCidrRequest(BaseModel):
    CurrentIpamScopeId: IpamScopeId
    DestinationIpamScopeId: Optional[IpamScopeId] = None
    DryRun: Optional[Boolean] = None
    Monitored: Boolean
    ResourceCidr: String
    ResourceId: String
    ResourceRegion: String


class ModifyIpamResourceDiscoveryResult(BaseModel):
    IpamResourceDiscovery_1: Optional[IpamResourceDiscovery] = Field(
        None, alias='IpamResourceDiscovery'
    )


class ModifyIpamScopeRequest(BaseModel):
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamScopeId_1: IpamScopeId = Field(..., alias='IpamScopeId')


class ModifyIpamScopeResult(BaseModel):
    IpamScope_1: Optional[IpamScope] = Field(None, alias='IpamScope')


class ModifyLaunchTemplateRequest(BaseModel):
    ClientToken: Optional[String] = None
    DefaultVersion: Optional[String] = None
    DryRun: Optional[Boolean] = None
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )


class ModifyLaunchTemplateResult(BaseModel):
    LaunchTemplate_1: Optional[LaunchTemplate] = Field(None, alias='LaunchTemplate')


class ModifyLocalGatewayRouteRequest(BaseModel):
    DestinationCidrBlock: Optional[String] = None
    DestinationPrefixListId: Optional[PrefixListResourceId] = None
    DryRun: Optional[Boolean] = None
    LocalGatewayRouteTableId: LocalGatewayRoutetableId
    LocalGatewayVirtualInterfaceGroupId_1: Optional[
        LocalGatewayVirtualInterfaceGroupId
    ] = Field(None, alias='LocalGatewayVirtualInterfaceGroupId')
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )


class ModifyLocalGatewayRouteResult(BaseModel):
    Route: Optional[LocalGatewayRoute] = None


class ModifyManagedPrefixListResult(BaseModel):
    PrefixList: Optional[ManagedPrefixList] = None


class ModifyReservedInstancesResult(BaseModel):
    ReservedInstancesModificationId: Optional[String] = None


class ModifySnapshotAttributeRequest(BaseModel):
    Attribute: Optional[SnapshotAttributeName] = None
    CreateVolumePermission: Optional[CreateVolumePermissionModifications] = None
    DryRun: Optional[Boolean] = None
    GroupNames: Optional[GroupNameStringList] = None
    OperationType_1: Optional[OperationType] = Field(None, alias='OperationType')
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')
    UserIds: Optional[UserIdStringList] = None


class ModifySnapshotTierRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')
    StorageTier: Optional[TargetStorageTier] = None


class ModifySnapshotTierResult(BaseModel):
    SnapshotId: Optional[String] = None
    TieringStartTime: Optional[MillisecondDateTime] = None


class ModifySubnetAttributeRequest(BaseModel):
    AssignIpv6AddressOnCreation: Optional[AttributeBooleanValue] = None
    CustomerOwnedIpv4Pool: Optional[CoipPoolId] = None
    DisableLniAtDeviceIndex: Optional[AttributeBooleanValue] = None
    EnableDns64: Optional[AttributeBooleanValue] = None
    EnableLniAtDeviceIndex: Optional[Integer] = None
    EnableResourceNameDnsAAAARecordOnLaunch: Optional[AttributeBooleanValue] = None
    EnableResourceNameDnsARecordOnLaunch: Optional[AttributeBooleanValue] = None
    MapCustomerOwnedIpOnLaunch: Optional[AttributeBooleanValue] = None
    MapPublicIpOnLaunch: Optional[AttributeBooleanValue] = None
    PrivateDnsHostnameTypeOnLaunch: Optional[HostnameType] = None
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')


class ModifyTrafficMirrorFilterNetworkServicesRequest(BaseModel):
    AddNetworkServices: Optional[TrafficMirrorNetworkServiceList] = None
    DryRun: Optional[Boolean] = None
    RemoveNetworkServices: Optional[TrafficMirrorNetworkServiceList] = None
    TrafficMirrorFilterId_1: TrafficMirrorFilterId = Field(
        ..., alias='TrafficMirrorFilterId'
    )


class ModifyTrafficMirrorFilterRuleRequest(BaseModel):
    Description: Optional[String] = None
    DestinationCidrBlock: Optional[String] = None
    DestinationPortRange: Optional[TrafficMirrorPortRangeRequest] = None
    DryRun: Optional[Boolean] = None
    Protocol: Optional[Integer] = None
    RemoveFields: Optional[TrafficMirrorFilterRuleFieldList] = None
    RuleAction: Optional[TrafficMirrorRuleAction] = None
    RuleNumber: Optional[Integer] = None
    SourceCidrBlock: Optional[String] = None
    SourcePortRange: Optional[TrafficMirrorPortRangeRequest] = None
    TrafficDirection_1: Optional[TrafficDirection] = Field(
        None, alias='TrafficDirection'
    )
    TrafficMirrorFilterRuleId: TrafficMirrorFilterRuleIdWithResolver


class ModifyTrafficMirrorSessionRequest(BaseModel):
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    PacketLength: Optional[Integer] = None
    RemoveFields: Optional[TrafficMirrorSessionFieldList] = None
    SessionNumber: Optional[Integer] = None
    TrafficMirrorFilterId_1: Optional[TrafficMirrorFilterId] = Field(
        None, alias='TrafficMirrorFilterId'
    )
    TrafficMirrorSessionId_1: TrafficMirrorSessionId = Field(
        ..., alias='TrafficMirrorSessionId'
    )
    TrafficMirrorTargetId_1: Optional[TrafficMirrorTargetId] = Field(
        None, alias='TrafficMirrorTargetId'
    )
    VirtualNetworkId: Optional[Integer] = None


class ModifyTrafficMirrorSessionResult(BaseModel):
    TrafficMirrorSession_1: Optional[TrafficMirrorSession] = Field(
        None, alias='TrafficMirrorSession'
    )


class ModifyTransitGatewayOptions(BaseModel):
    AddTransitGatewayCidrBlocks: Optional[TransitGatewayCidrBlockStringList] = None
    AmazonSideAsn: Optional[Long] = None
    AssociationDefaultRouteTableId: Optional[TransitGatewayRouteTableId] = None
    AutoAcceptSharedAttachments: Optional[AutoAcceptSharedAttachmentsValue] = None
    DefaultRouteTableAssociation: Optional[DefaultRouteTableAssociationValue] = None
    DefaultRouteTablePropagation: Optional[DefaultRouteTablePropagationValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    PropagationDefaultRouteTableId: Optional[TransitGatewayRouteTableId] = None
    RemoveTransitGatewayCidrBlocks: Optional[TransitGatewayCidrBlockStringList] = None
    VpnEcmpSupport: Optional[VpnEcmpSupportValue] = None


class ModifyTransitGatewayPrefixListReferenceRequest(BaseModel):
    Blackhole: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    PrefixListId: PrefixListResourceId
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class ModifyTransitGatewayRequest(BaseModel):
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Options: Optional[ModifyTransitGatewayOptions] = None
    TransitGatewayId_1: TransitGatewayId = Field(..., alias='TransitGatewayId')


class ModifyTransitGatewayVpcAttachmentRequest(BaseModel):
    AddSubnetIds: Optional[TransitGatewaySubnetIdList] = None
    DryRun: Optional[Boolean] = None
    Options: Optional[ModifyTransitGatewayVpcAttachmentRequestOptions] = None
    RemoveSubnetIds: Optional[TransitGatewaySubnetIdList] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class ModifyVerifiedAccessEndpointEniOptions(BaseModel):
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None


class ModifyVerifiedAccessEndpointPolicyRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    PolicyDocument: Optional[String] = None
    PolicyEnabled: Boolean
    VerifiedAccessEndpointId_1: VerifiedAccessEndpointId = Field(
        ..., alias='VerifiedAccessEndpointId'
    )


class ModifyVerifiedAccessEndpointPolicyResult(BaseModel):
    PolicyDocument: Optional[String] = None
    PolicyEnabled: Optional[Boolean] = None


class ModifyVerifiedAccessEndpointSubnetIdList(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class ModifyVerifiedAccessGroupPolicyRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    PolicyDocument: Optional[String] = None
    PolicyEnabled: Boolean
    VerifiedAccessGroupId_1: VerifiedAccessGroupId = Field(
        ..., alias='VerifiedAccessGroupId'
    )


class ModifyVerifiedAccessGroupPolicyResult(BaseModel):
    PolicyDocument: Optional[String] = None
    PolicyEnabled: Optional[Boolean] = None


class ModifyVerifiedAccessGroupRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessGroupId_1: VerifiedAccessGroupId = Field(
        ..., alias='VerifiedAccessGroupId'
    )
    VerifiedAccessInstanceId_1: Optional[VerifiedAccessInstanceId] = Field(
        None, alias='VerifiedAccessInstanceId'
    )


class ModifyVerifiedAccessGroupResult(BaseModel):
    VerifiedAccessGroup_1: Optional[VerifiedAccessGroup] = Field(
        None, alias='VerifiedAccessGroup'
    )


class ModifyVerifiedAccessInstanceRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessInstanceId_1: VerifiedAccessInstanceId = Field(
        ..., alias='VerifiedAccessInstanceId'
    )


class ModifyVerifiedAccessTrustProviderOidcOptions(BaseModel):
    Scope: Optional[String] = None


class ModifyVerifiedAccessTrustProviderRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    OidcOptions: Optional[ModifyVerifiedAccessTrustProviderOidcOptions] = None
    VerifiedAccessTrustProviderId_1: VerifiedAccessTrustProviderId = Field(
        ..., alias='VerifiedAccessTrustProviderId'
    )


class ModifyVolumeAttributeRequest(BaseModel):
    AutoEnableIO: Optional[AttributeBooleanValue] = None
    DryRun: Optional[Boolean] = None
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')


class ModifyVolumeRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Iops: Optional[Integer] = None
    MultiAttachEnabled: Optional[Boolean] = None
    Size: Optional[Integer] = None
    Throughput: Optional[Integer] = None
    VolumeId_1: VolumeId = Field(..., alias='VolumeId')
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')


class ModifyVpcAttributeRequest(BaseModel):
    EnableDnsHostnames: Optional[AttributeBooleanValue] = None
    EnableDnsSupport: Optional[AttributeBooleanValue] = None
    EnableNetworkAddressUsageMetrics: Optional[AttributeBooleanValue] = None
    VpcId_1: VpcId = Field(..., alias='VpcId')


class ModifyVpcEndpointConnectionNotificationRequest(BaseModel):
    ConnectionEvents: Optional[ValueStringList] = None
    ConnectionNotificationArn: Optional[String] = None
    ConnectionNotificationId_1: ConnectionNotificationId = Field(
        ..., alias='ConnectionNotificationId'
    )
    DryRun: Optional[Boolean] = None


class ModifyVpcEndpointRequest(BaseModel):
    AddRouteTableIds: Optional[VpcEndpointRouteTableIdList] = None
    AddSecurityGroupIds: Optional[VpcEndpointSecurityGroupIdList] = None
    AddSubnetIds: Optional[VpcEndpointSubnetIdList] = None
    DnsOptions: Optional[DnsOptionsSpecification] = None
    DryRun: Optional[Boolean] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    PolicyDocument: Optional[String] = None
    PrivateDnsEnabled: Optional[Boolean] = None
    RemoveRouteTableIds: Optional[VpcEndpointRouteTableIdList] = None
    RemoveSecurityGroupIds: Optional[VpcEndpointSecurityGroupIdList] = None
    RemoveSubnetIds: Optional[VpcEndpointSubnetIdList] = None
    ResetPolicy: Optional[Boolean] = None
    VpcEndpointId_1: VpcEndpointId = Field(..., alias='VpcEndpointId')


class ModifyVpcEndpointServiceConfigurationRequest(BaseModel):
    AcceptanceRequired: Optional[Boolean] = None
    AddGatewayLoadBalancerArns: Optional[ValueStringList] = None
    AddNetworkLoadBalancerArns: Optional[ValueStringList] = None
    AddSupportedIpAddressTypes: Optional[ValueStringList] = None
    DryRun: Optional[Boolean] = None
    PrivateDnsName: Optional[String] = None
    RemoveGatewayLoadBalancerArns: Optional[ValueStringList] = None
    RemoveNetworkLoadBalancerArns: Optional[ValueStringList] = None
    RemovePrivateDnsName: Optional[Boolean] = None
    RemoveSupportedIpAddressTypes: Optional[ValueStringList] = None
    ServiceId: VpcEndpointServiceId


class ModifyVpcEndpointServicePayerResponsibilityRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PayerResponsibility_1: PayerResponsibility = Field(..., alias='PayerResponsibility')
    ServiceId: VpcEndpointServiceId


class ModifyVpcEndpointServicePermissionsRequest(BaseModel):
    AddAllowedPrincipals: Optional[ValueStringList] = None
    DryRun: Optional[Boolean] = None
    RemoveAllowedPrincipals: Optional[ValueStringList] = None
    ServiceId: VpcEndpointServiceId


class ModifyVpcEndpointServicePermissionsResult(BaseModel):
    AddedPrincipals: Optional[AddedPrincipalSet] = None
    ReturnValue: Optional[Boolean] = None


class ModifyVpcPeeringConnectionOptionsRequest(BaseModel):
    AccepterPeeringConnectionOptions: Optional[PeeringConnectionOptionsRequest] = None
    DryRun: Optional[Boolean] = None
    RequesterPeeringConnectionOptions: Optional[PeeringConnectionOptionsRequest] = None
    VpcPeeringConnectionId_1: VpcPeeringConnectionId = Field(
        ..., alias='VpcPeeringConnectionId'
    )


class ModifyVpcPeeringConnectionOptionsResult(BaseModel):
    AccepterPeeringConnectionOptions: Optional[PeeringConnectionOptions] = None
    RequesterPeeringConnectionOptions: Optional[PeeringConnectionOptions] = None


class ModifyVpcTenancyRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceTenancy: VpcTenancy
    VpcId_1: VpcId = Field(..., alias='VpcId')


class ModifyVpnConnectionOptionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    LocalIpv4NetworkCidr: Optional[String] = None
    LocalIpv6NetworkCidr: Optional[String] = None
    RemoteIpv4NetworkCidr: Optional[String] = None
    RemoteIpv6NetworkCidr: Optional[String] = None
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')


class ModifyVpnConnectionRequest(BaseModel):
    CustomerGatewayId_1: Optional[CustomerGatewayId] = Field(
        None, alias='CustomerGatewayId'
    )
    DryRun: Optional[Boolean] = None
    TransitGatewayId_1: Optional[TransitGatewayId] = Field(
        None, alias='TransitGatewayId'
    )
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')
    VpnGatewayId_1: Optional[VpnGatewayId] = Field(None, alias='VpnGatewayId')


class ModifyVpnTunnelCertificateRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')
    VpnTunnelOutsideIpAddress: String


class Monitoring(BaseModel):
    State: Optional[MonitoringState] = None


class MoveAddressToVpcRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PublicIp: String


class MoveAddressToVpcResult(BaseModel):
    AllocationId: Optional[String] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class MoveByoipCidrToIpamRequest(BaseModel):
    Cidr: String
    DryRun: Optional[Boolean] = None
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')
    IpamPoolOwner: String


class MoveByoipCidrToIpamResult(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')


class MovingAddressStatus(BaseModel):
    MoveStatus_1: Optional[MoveStatus] = Field(None, alias='MoveStatus')
    PublicIp: Optional[String] = None


class MovingAddressStatusSet(RootModel[List[MovingAddressStatus]]):
    root: List[MovingAddressStatus]


class NatGatewayAddress(BaseModel):
    AllocationId: Optional[String] = None
    AssociationId: Optional[String] = None
    FailureMessage: Optional[String] = None
    IsPrimary: Optional[Boolean] = None
    NetworkInterfaceId: Optional[String] = None
    PrivateIp: Optional[String] = None
    PublicIp: Optional[String] = None
    Status: Optional[NatGatewayAddressStatus] = None


class NatGatewayAddressList(RootModel[List[NatGatewayAddress]]):
    root: List[NatGatewayAddress]


class NetworkAclAssociation(BaseModel):
    NetworkAclAssociationId: Optional[String] = None
    NetworkAclId: Optional[String] = None
    SubnetId: Optional[String] = None


class NetworkAclAssociationList(RootModel[List[NetworkAclAssociation]]):
    root: List[NetworkAclAssociation]


class NetworkAclEntry(BaseModel):
    CidrBlock: Optional[String] = None
    Egress: Optional[Boolean] = None
    IcmpTypeCode_1: Optional[IcmpTypeCode] = Field(None, alias='IcmpTypeCode')
    Ipv6CidrBlock: Optional[String] = None
    PortRange_1: Optional[PortRange] = Field(None, alias='PortRange')
    Protocol: Optional[String] = None
    RuleAction_1: Optional[RuleAction] = Field(None, alias='RuleAction')
    RuleNumber: Optional[Integer] = None


class NetworkAclEntryList(RootModel[List[NetworkAclEntry]]):
    root: List[NetworkAclEntry]


class NetworkCardInfo(BaseModel):
    MaximumNetworkInterfaces: Optional[MaxNetworkInterfaces] = None
    NetworkCardIndex_1: Optional[NetworkCardIndex] = Field(
        None, alias='NetworkCardIndex'
    )
    NetworkPerformance_1: Optional[NetworkPerformance] = Field(
        None, alias='NetworkPerformance'
    )


class NetworkCardInfoList(RootModel[List[NetworkCardInfo]]):
    root: List[NetworkCardInfo]


class NetworkInfo(BaseModel):
    DefaultNetworkCardIndex_1: Optional[DefaultNetworkCardIndex] = Field(
        None, alias='DefaultNetworkCardIndex'
    )
    EfaInfo_1: Optional[EfaInfo] = Field(None, alias='EfaInfo')
    EfaSupported: Optional[EfaSupportedFlag] = None
    EnaSrdSupported_1: Optional[EnaSrdSupported] = Field(None, alias='EnaSrdSupported')
    EnaSupport_1: Optional[EnaSupport] = Field(None, alias='EnaSupport')
    EncryptionInTransitSupported_1: Optional[EncryptionInTransitSupported] = Field(
        None, alias='EncryptionInTransitSupported'
    )
    Ipv4AddressesPerInterface: Optional[MaxIpv4AddrPerInterface] = None
    Ipv6AddressesPerInterface: Optional[MaxIpv6AddrPerInterface] = None
    Ipv6Supported: Optional[Ipv6Flag] = None
    MaximumNetworkCards_1: Optional[MaximumNetworkCards] = Field(
        None, alias='MaximumNetworkCards'
    )
    MaximumNetworkInterfaces: Optional[MaxNetworkInterfaces] = None
    NetworkCards: Optional[NetworkCardInfoList] = None
    NetworkPerformance_1: Optional[NetworkPerformance] = Field(
        None, alias='NetworkPerformance'
    )


class NetworkInsightsAccessScope(BaseModel):
    CreatedDate: Optional[MillisecondDateTime] = None
    NetworkInsightsAccessScopeArn: Optional[ResourceArn] = None
    NetworkInsightsAccessScopeId_1: Optional[NetworkInsightsAccessScopeId] = Field(
        None, alias='NetworkInsightsAccessScopeId'
    )
    Tags: Optional[TagList] = None
    UpdatedDate: Optional[MillisecondDateTime] = None


class NetworkInsightsAccessScopeAnalysis(BaseModel):
    AnalyzedEniCount: Optional[Integer] = None
    EndDate: Optional[MillisecondDateTime] = None
    FindingsFound_1: Optional[FindingsFound] = Field(None, alias='FindingsFound')
    NetworkInsightsAccessScopeAnalysisArn: Optional[ResourceArn] = None
    NetworkInsightsAccessScopeAnalysisId_1: Optional[
        NetworkInsightsAccessScopeAnalysisId
    ] = Field(None, alias='NetworkInsightsAccessScopeAnalysisId')
    NetworkInsightsAccessScopeId_1: Optional[NetworkInsightsAccessScopeId] = Field(
        None, alias='NetworkInsightsAccessScopeId'
    )
    StartDate: Optional[MillisecondDateTime] = None
    Status: Optional[AnalysisStatus] = None
    StatusMessage: Optional[String] = None
    Tags: Optional[TagList] = None
    WarningMessage: Optional[String] = None


class NetworkInsightsAccessScopeAnalysisList(
    RootModel[List[NetworkInsightsAccessScopeAnalysis]]
):
    root: List[NetworkInsightsAccessScopeAnalysis]


class NetworkInsightsAccessScopeList(RootModel[List[NetworkInsightsAccessScope]]):
    root: List[NetworkInsightsAccessScope]


class NetworkInterfaceAssociation(BaseModel):
    AllocationId: Optional[String] = None
    AssociationId: Optional[String] = None
    CarrierIp: Optional[String] = None
    CustomerOwnedIp: Optional[String] = None
    IpOwnerId: Optional[String] = None
    PublicDnsName: Optional[String] = None
    PublicIp: Optional[String] = None


class NetworkInterfaceAttachmentChanges(BaseModel):
    AttachmentId: Optional[NetworkInterfaceAttachmentId] = None
    DeleteOnTermination: Optional[Boolean] = None


class NetworkInterfaceIpv6Address(BaseModel):
    Ipv6Address: Optional[String] = None


class NetworkInterfaceIpv6AddressesList(RootModel[List[NetworkInterfaceIpv6Address]]):
    root: List[NetworkInterfaceIpv6Address]


class NetworkInterfacePermissionState(BaseModel):
    State: Optional[NetworkInterfacePermissionStateCode] = None
    StatusMessage: Optional[String] = None


class NetworkInterfacePrivateIpAddress(BaseModel):
    Association: Optional[NetworkInterfaceAssociation] = None
    Primary: Optional[Boolean] = None
    PrivateDnsName: Optional[String] = None
    PrivateIpAddress: Optional[String] = None


class NetworkInterfacePrivateIpAddressList(
    RootModel[List[NetworkInterfacePrivateIpAddress]]
):
    root: List[NetworkInterfacePrivateIpAddress]


class NewDhcpConfiguration(BaseModel):
    Key: Optional[String] = None
    Values: Optional[ValueStringList] = None


class NewDhcpConfigurationList(RootModel[List[NewDhcpConfiguration]]):
    root: List[NewDhcpConfiguration]


class OidcOptions(BaseModel):
    AuthorizationEndpoint: Optional[String] = None
    ClientId: Optional[String] = None
    ClientSecret: Optional[String] = None
    Issuer: Optional[String] = None
    Scope: Optional[String] = None
    TokenEndpoint: Optional[String] = None
    UserInfoEndpoint: Optional[String] = None


class OnDemandOptions(BaseModel):
    AllocationStrategy: Optional[FleetOnDemandAllocationStrategy] = None
    CapacityReservationOptions_1: Optional[CapacityReservationOptions] = Field(
        None, alias='CapacityReservationOptions'
    )
    MaxTotalPrice: Optional[String] = None
    MinTargetCapacity: Optional[Integer] = None
    SingleAvailabilityZone: Optional[Boolean] = None
    SingleInstanceType: Optional[Boolean] = None


class OnDemandOptionsRequest(BaseModel):
    AllocationStrategy: Optional[FleetOnDemandAllocationStrategy] = None
    CapacityReservationOptions: Optional[CapacityReservationOptionsRequest] = None
    MaxTotalPrice: Optional[String] = None
    MinTargetCapacity: Optional[Integer] = None
    SingleAvailabilityZone: Optional[Boolean] = None
    SingleInstanceType: Optional[Boolean] = None


class OrganizationArnStringList(RootModel[List[String]]):
    root: List[String]


class OrganizationalUnitArnStringList(RootModel[List[String]]):
    root: List[String]


class OwnerStringList(RootModel[List[String]]):
    root: List[String]


class PacketHeaderStatement(BaseModel):
    DestinationAddresses: Optional[ValueStringList] = None
    DestinationPorts: Optional[ValueStringList] = None
    DestinationPrefixLists: Optional[ValueStringList] = None
    Protocols: Optional[ProtocolList] = None
    SourceAddresses: Optional[ValueStringList] = None
    SourcePorts: Optional[ValueStringList] = None
    SourcePrefixLists: Optional[ValueStringList] = None


class PacketHeaderStatementRequest(BaseModel):
    DestinationAddresses: Optional[ValueStringList] = None
    DestinationPorts: Optional[ValueStringList] = None
    DestinationPrefixLists: Optional[ValueStringList] = None
    Protocols: Optional[ProtocolList] = None
    SourceAddresses: Optional[ValueStringList] = None
    SourcePorts: Optional[ValueStringList] = None
    SourcePrefixLists: Optional[ValueStringList] = None


class PathFilter(BaseModel):
    DestinationAddress: Optional[IpAddress] = None
    DestinationPortRange: Optional[FilterPortRange] = None
    SourceAddress: Optional[IpAddress] = None
    SourcePortRange: Optional[FilterPortRange] = None


class PathRequestFilter(BaseModel):
    DestinationAddress: Optional[IpAddress] = None
    DestinationPortRange: Optional[RequestFilterPortRange] = None
    SourceAddress: Optional[IpAddress] = None
    SourcePortRange: Optional[RequestFilterPortRange] = None


class PciId(BaseModel):
    DeviceId: Optional[String] = None
    SubsystemId: Optional[String] = None
    SubsystemVendorId: Optional[String] = None
    VendorId: Optional[String] = None


class PeeringAttachmentStatus(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class PeeringTgwInfo(BaseModel):
    CoreNetworkId: Optional[String] = None
    OwnerId: Optional[String] = None
    Region: Optional[String] = None
    TransitGatewayId: Optional[String] = None


class Phase1DHGroupNumbersList(RootModel[List[Phase1DHGroupNumbersListValue]]):
    root: List[Phase1DHGroupNumbersListValue]


class Phase1DHGroupNumbersRequestList(
    RootModel[List[Phase1DHGroupNumbersRequestListValue]]
):
    root: List[Phase1DHGroupNumbersRequestListValue]


class Phase1EncryptionAlgorithmsListValue(BaseModel):
    Value: Optional[String] = None


class Phase1EncryptionAlgorithmsRequestListValue(BaseModel):
    Value: Optional[String] = None


class Phase1IntegrityAlgorithmsListValue(BaseModel):
    Value: Optional[String] = None


class Phase1IntegrityAlgorithmsRequestListValue(BaseModel):
    Value: Optional[String] = None


class Phase2DHGroupNumbersList(RootModel[List[Phase2DHGroupNumbersListValue]]):
    root: List[Phase2DHGroupNumbersListValue]


class Phase2DHGroupNumbersRequestList(
    RootModel[List[Phase2DHGroupNumbersRequestListValue]]
):
    root: List[Phase2DHGroupNumbersRequestListValue]


class Phase2EncryptionAlgorithmsListValue(BaseModel):
    Value: Optional[String] = None


class Phase2EncryptionAlgorithmsRequestListValue(BaseModel):
    Value: Optional[String] = None


class Phase2IntegrityAlgorithmsListValue(BaseModel):
    Value: Optional[String] = None


class Phase2IntegrityAlgorithmsRequestListValue(BaseModel):
    Value: Optional[String] = None


class PlacementGroup(BaseModel):
    GroupArn: Optional[String] = None
    GroupId: Optional[String] = None
    GroupName: Optional[String] = None
    PartitionCount: Optional[Integer] = None
    SpreadLevel_1: Optional[SpreadLevel] = Field(None, alias='SpreadLevel')
    State: Optional[PlacementGroupState] = None
    Strategy: Optional[PlacementStrategy] = None
    Tags: Optional[TagList] = None


class PlacementGroupInfo(BaseModel):
    SupportedStrategies: Optional[PlacementGroupStrategyList] = None


class PlacementGroupList(RootModel[List[PlacementGroup]]):
    root: List[PlacementGroup]


class PoolCidrBlock(BaseModel):
    Cidr: Optional[String] = None


class PoolCidrBlocksSet(RootModel[List[PoolCidrBlock]]):
    root: List[PoolCidrBlock]


class PrefixList(BaseModel):
    Cidrs: Optional[ValueStringList] = None
    PrefixListId: Optional[String] = None
    PrefixListName: Optional[String] = None


class PrefixListAssociation(BaseModel):
    ResourceId: Optional[String] = None
    ResourceOwner: Optional[String] = None


class PrefixListAssociationSet(RootModel[List[PrefixListAssociation]]):
    root: List[PrefixListAssociation]


class PrefixListEntry(BaseModel):
    Cidr: Optional[String] = None
    Description: Optional[String] = None


class PrefixListEntrySet(RootModel[List[PrefixListEntry]]):
    root: List[PrefixListEntry]


class PrefixListId(BaseModel):
    Description: Optional[String] = None
    PrefixListId: Optional[String] = None


class PrefixListIdList(RootModel[List[PrefixListId]]):
    root: List[PrefixListId]


class PrefixListIdSet(RootModel[List[String]]):
    root: List[String]


class PrefixListSet(RootModel[List[PrefixList]]):
    root: List[PrefixList]


class PrincipalIdFormat(BaseModel):
    Arn: Optional[String] = None
    Statuses: Optional[IdFormatList] = None


class PrincipalIdFormatList(RootModel[List[PrincipalIdFormat]]):
    root: List[PrincipalIdFormat]


class PrivateDnsDetails(BaseModel):
    PrivateDnsName: Optional[String] = None


class PrivateDnsDetailsSet(RootModel[List[PrivateDnsDetails]]):
    root: List[PrivateDnsDetails]


class PrivateDnsNameConfiguration(BaseModel):
    Name: Optional[String] = None
    State: Optional[DnsNameState] = None
    Type: Optional[String] = None
    Value: Optional[String] = None


class PrivateIpAddressSpecification(BaseModel):
    Primary: Optional[Boolean] = None
    PrivateIpAddress: Optional[String] = None


class PrivateIpAddressSpecificationList(RootModel[List[PrivateIpAddressSpecification]]):
    root: List[PrivateIpAddressSpecification]


class PrivateIpAddressStringList(RootModel[List[String]]):
    root: List[String]


class ProcessorInfo(BaseModel):
    SupportedArchitectures: Optional[ArchitectureTypeList] = None
    SustainedClockSpeedInGhz: Optional[ProcessorSustainedClockSpeed] = None


class ProductCode(BaseModel):
    ProductCodeId: Optional[String] = None
    ProductCodeType: Optional[ProductCodeValues] = None


class ProductCodeList(RootModel[List[ProductCode]]):
    root: List[ProductCode]


class ProductCodeStringList(RootModel[List[String]]):
    root: List[String]


class ProductDescriptionList(RootModel[List[String]]):
    root: List[String]


class PropagatingVgw(BaseModel):
    GatewayId: Optional[String] = None


class PropagatingVgwList(RootModel[List[PropagatingVgw]]):
    root: List[PropagatingVgw]


class ProvisionByoipCidrRequest(BaseModel):
    Cidr: String
    CidrAuthorizationContext_1: Optional[CidrAuthorizationContext] = Field(
        None, alias='CidrAuthorizationContext'
    )
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    MultiRegion: Optional[Boolean] = None
    PoolTagSpecifications: Optional[TagSpecificationList] = None
    PubliclyAdvertisable: Optional[Boolean] = None


class ProvisionByoipCidrResult(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')


class ProvisionIpamPoolCidrRequest(BaseModel):
    Cidr: Optional[String] = None
    CidrAuthorizationContext: Optional[IpamCidrAuthorizationContext] = None
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')
    NetmaskLength: Optional[Integer] = None


class ProvisionedBandwidth(BaseModel):
    ProvisionTime: Optional[DateTime] = None
    Provisioned: Optional[String] = None
    RequestTime: Optional[DateTime] = None
    Requested: Optional[String] = None
    Status: Optional[String] = None


class PtrUpdateStatus(BaseModel):
    Reason: Optional[String] = None
    Status: Optional[String] = None
    Value: Optional[String] = None


class PublicIpStringList(RootModel[List[String]]):
    root: List[String]


class PublicIpv4PoolRange(BaseModel):
    AddressCount: Optional[Integer] = None
    AvailableAddressCount: Optional[Integer] = None
    FirstAddress: Optional[String] = None
    LastAddress: Optional[String] = None


class PublicIpv4PoolRangeSet(RootModel[List[PublicIpv4PoolRange]]):
    root: List[PublicIpv4PoolRange]


class PurchaseHostReservationRequest(BaseModel):
    ClientToken: Optional[String] = None
    CurrencyCode: Optional[CurrencyCodeValues] = None
    HostIdSet: RequestHostIdSet
    LimitPrice: Optional[String] = None
    OfferingId_1: OfferingId = Field(..., alias='OfferingId')
    TagSpecifications: Optional[TagSpecificationList] = None


class PurchaseRequest(BaseModel):
    InstanceCount: Integer
    PurchaseToken: String


class PurchaseRequestSet(RootModel[List[PurchaseRequest]]):
    root: List[PurchaseRequest] = Field(..., min_length=1)


class PurchaseReservedInstancesOfferingRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceCount: Integer
    LimitPrice: Optional[ReservedInstanceLimitPrice] = None
    PurchaseTime: Optional[DateTime] = None
    ReservedInstancesOfferingId_1: ReservedInstancesOfferingId = Field(
        ..., alias='ReservedInstancesOfferingId'
    )


class PurchaseReservedInstancesOfferingResult(BaseModel):
    ReservedInstancesId: Optional[String] = None


class PurchaseScheduledInstancesRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    PurchaseRequests: PurchaseRequestSet


class ReasonCodesList(RootModel[List[ReportInstanceReasonCodes]]):
    root: List[ReportInstanceReasonCodes]


class RecurringCharge(BaseModel):
    Amount: Optional[Double] = None
    Frequency: Optional[RecurringChargeFrequency] = None


class RecurringChargesList(RootModel[List[RecurringCharge]]):
    root: List[RecurringCharge]


class ReferencedSecurityGroup(BaseModel):
    GroupId: Optional[String] = None
    PeeringStatus: Optional[String] = None
    UserId: Optional[String] = None
    VpcId: Optional[String] = None
    VpcPeeringConnectionId: Optional[String] = None


class Region(BaseModel):
    Endpoint: Optional[String] = None
    OptInStatus: Optional[String] = None
    RegionName: Optional[String] = None


class RegionList(RootModel[List[Region]]):
    root: List[Region]


class RegionNameStringList(RootModel[List[String]]):
    root: List[String]


class RegionNames(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=10, min_length=0)


class RegisterImageResult(BaseModel):
    ImageId: Optional[String] = None


class RegisterInstanceEventNotificationAttributesResult(BaseModel):
    InstanceTagAttribute: Optional[InstanceTagNotificationAttribute] = None


class RegisterInstanceTagAttributeRequest(BaseModel):
    IncludeAllTagsOfInstance: Optional[Boolean] = None
    InstanceTagKeys: Optional[InstanceTagKeySet] = None


class RegisterTransitGatewayMulticastGroupMembersRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupIpAddress: Optional[String] = None
    NetworkInterfaceIds: TransitGatewayNetworkInterfaceIdList
    TransitGatewayMulticastDomainId_1: TransitGatewayMulticastDomainId = Field(
        ..., alias='TransitGatewayMulticastDomainId'
    )


class RegisterTransitGatewayMulticastGroupSourcesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupIpAddress: Optional[String] = None
    NetworkInterfaceIds: TransitGatewayNetworkInterfaceIdList
    TransitGatewayMulticastDomainId_1: TransitGatewayMulticastDomainId = Field(
        ..., alias='TransitGatewayMulticastDomainId'
    )


class RejectTransitGatewayMulticastDomainAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SubnetIds: Optional[ValueStringList] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayMulticastDomainId_1: Optional[TransitGatewayMulticastDomainId] = (
        Field(None, alias='TransitGatewayMulticastDomainId')
    )


class RejectTransitGatewayPeeringAttachmentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class RejectTransitGatewayVpcAttachmentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class RejectVpcEndpointConnectionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ServiceId: VpcEndpointServiceId
    VpcEndpointIds: VpcEndpointIdList


class RejectVpcPeeringConnectionRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    VpcPeeringConnectionId_1: VpcPeeringConnectionId = Field(
        ..., alias='VpcPeeringConnectionId'
    )


class ReleaseAddressRequest(BaseModel):
    AllocationId_1: Optional[AllocationId] = Field(None, alias='AllocationId')
    DryRun: Optional[Boolean] = None
    NetworkBorderGroup: Optional[String] = None
    PublicIp: Optional[String] = None


class ReleaseHostsRequest(BaseModel):
    HostIds: RequestHostIdList


class ReleaseIpamPoolAllocationRequest(BaseModel):
    Cidr: String
    DryRun: Optional[Boolean] = None
    IpamPoolAllocationId_1: IpamPoolAllocationId = Field(
        ..., alias='IpamPoolAllocationId'
    )
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')


class RemoveIpamOperatingRegion(BaseModel):
    RegionName: Optional[String] = None


class RemoveIpamOperatingRegionSet(RootModel[List[RemoveIpamOperatingRegion]]):
    root: List[RemoveIpamOperatingRegion] = Field(..., max_length=50, min_length=0)


class RemovePrefixListEntry(BaseModel):
    Cidr: String


class ReplaceIamInstanceProfileAssociationRequest(BaseModel):
    AssociationId: IamInstanceProfileAssociationId
    IamInstanceProfile: IamInstanceProfileSpecification


class ReplaceIamInstanceProfileAssociationResult(BaseModel):
    IamInstanceProfileAssociation_1: Optional[IamInstanceProfileAssociation] = Field(
        None, alias='IamInstanceProfileAssociation'
    )


class ReplaceNetworkAclAssociationResult(BaseModel):
    NewAssociationId: Optional[String] = None


class ReplaceNetworkAclEntryRequest(BaseModel):
    CidrBlock: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Egress: Boolean
    IcmpTypeCode_1: Optional[IcmpTypeCode] = Field(None, alias='IcmpTypeCode')
    Ipv6CidrBlock: Optional[String] = None
    NetworkAclId_1: NetworkAclId = Field(..., alias='NetworkAclId')
    PortRange_1: Optional[PortRange] = Field(None, alias='PortRange')
    Protocol: String
    RuleAction_1: RuleAction = Field(..., alias='RuleAction')
    RuleNumber: Integer


class ReplaceRootVolumeTask(BaseModel):
    CompleteTime: Optional[String] = None
    DeleteReplacedRootVolume: Optional[Boolean] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceId: Optional[String] = None
    ReplaceRootVolumeTaskId_1: Optional[ReplaceRootVolumeTaskId] = Field(
        None, alias='ReplaceRootVolumeTaskId'
    )
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    StartTime: Optional[String] = None
    Tags: Optional[TagList] = None
    TaskState: Optional[ReplaceRootVolumeTaskState] = None


class ReplaceRootVolumeTasks(RootModel[List[ReplaceRootVolumeTask]]):
    root: List[ReplaceRootVolumeTask]


class ReplaceRouteRequest(BaseModel):
    CarrierGatewayId_1: Optional[CarrierGatewayId] = Field(
        None, alias='CarrierGatewayId'
    )
    CoreNetworkArn_1: Optional[CoreNetworkArn] = Field(None, alias='CoreNetworkArn')
    DestinationCidrBlock: Optional[String] = None
    DestinationIpv6CidrBlock: Optional[String] = None
    DestinationPrefixListId: Optional[PrefixListResourceId] = None
    DryRun: Optional[Boolean] = None
    EgressOnlyInternetGatewayId_1: Optional[EgressOnlyInternetGatewayId] = Field(
        None, alias='EgressOnlyInternetGatewayId'
    )
    GatewayId: Optional[RouteGatewayId] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    LocalGatewayId_1: Optional[LocalGatewayId] = Field(None, alias='LocalGatewayId')
    LocalTarget: Optional[Boolean] = None
    NatGatewayId_1: Optional[NatGatewayId] = Field(None, alias='NatGatewayId')
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    RouteTableId_1: RouteTableId = Field(..., alias='RouteTableId')
    TransitGatewayId_1: Optional[TransitGatewayId] = Field(
        None, alias='TransitGatewayId'
    )
    VpcEndpointId_1: Optional[VpcEndpointId] = Field(None, alias='VpcEndpointId')
    VpcPeeringConnectionId_1: Optional[VpcPeeringConnectionId] = Field(
        None, alias='VpcPeeringConnectionId'
    )


class ReplaceRouteTableAssociationRequest(BaseModel):
    AssociationId: RouteTableAssociationId
    DryRun: Optional[Boolean] = None
    RouteTableId_1: RouteTableId = Field(..., alias='RouteTableId')


class ReplaceTransitGatewayRouteRequest(BaseModel):
    Blackhole: Optional[Boolean] = None
    DestinationCidrBlock: String
    DryRun: Optional[Boolean] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class ReplaceVpnTunnelRequest(BaseModel):
    ApplyPendingMaintenance: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')
    VpnTunnelOutsideIpAddress: String


class ReportInstanceStatusRequest(BaseModel):
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    EndTime: Optional[DateTime] = None
    Instances: InstanceIdStringList
    ReasonCodes: ReasonCodesList
    StartTime: Optional[DateTime] = None
    Status: ReportStatusType


class RequestIpamResourceTag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class RequestIpamResourceTagList(RootModel[List[RequestIpamResourceTag]]):
    root: List[RequestIpamResourceTag]


class RequestSpotFleetResponse(BaseModel):
    SpotFleetRequestId: Optional[String] = None


class RequestSpotLaunchSpecificationSecurityGroupIdList(
    RootModel[List[SecurityGroupId]]
):
    root: List[SecurityGroupId]


class RequestSpotLaunchSpecificationSecurityGroupList(RootModel[List[String]]):
    root: List[String]


class ReservationFleetInstanceSpecification(BaseModel):
    AvailabilityZone: Optional[String] = None
    AvailabilityZoneId: Optional[String] = None
    EbsOptimized: Optional[Boolean] = None
    InstancePlatform: Optional[CapacityReservationInstancePlatform] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Priority: Optional[IntegerWithConstraints] = None
    Weight: Optional[DoubleWithConstraints] = None


class ReservationFleetInstanceSpecificationList(
    RootModel[List[ReservationFleetInstanceSpecification]]
):
    root: List[ReservationFleetInstanceSpecification]


class ReservationValue(BaseModel):
    HourlyPrice: Optional[String] = None
    RemainingTotalValue: Optional[String] = None
    RemainingUpfrontValue: Optional[String] = None


class ReservedInstanceReservationValue(BaseModel):
    ReservationValue_1: Optional[ReservationValue] = Field(
        None, alias='ReservationValue'
    )
    ReservedInstanceId: Optional[String] = None


class ReservedInstanceReservationValueSet(
    RootModel[List[ReservedInstanceReservationValue]]
):
    root: List[ReservedInstanceReservationValue]


class ReservedInstances(BaseModel):
    AvailabilityZone: Optional[String] = None
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Duration: Optional[Long] = None
    End: Optional[DateTime] = None
    FixedPrice: Optional[Float] = None
    InstanceCount: Optional[Integer] = None
    InstanceTenancy: Optional[Tenancy] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    OfferingClass: Optional[OfferingClassType] = None
    OfferingType: Optional[OfferingTypeValues] = None
    ProductDescription: Optional[RIProductDescription] = None
    RecurringCharges: Optional[RecurringChargesList] = None
    ReservedInstancesId: Optional[String] = None
    Scope_1: Optional[Scope] = Field(None, alias='Scope')
    Start: Optional[DateTime] = None
    State: Optional[ReservedInstanceState] = None
    Tags: Optional[TagList] = None
    UsagePrice: Optional[Float] = None


class ReservedInstancesConfiguration(BaseModel):
    AvailabilityZone: Optional[String] = None
    InstanceCount: Optional[Integer] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Platform: Optional[String] = None
    Scope_1: Optional[Scope] = Field(None, alias='Scope')


class ReservedInstancesConfigurationList(
    RootModel[List[ReservedInstancesConfiguration]]
):
    root: List[ReservedInstancesConfiguration]


class ReservedInstancesId(BaseModel):
    ReservedInstancesId: Optional[String] = None


class ReservedInstancesList(RootModel[List[ReservedInstances]]):
    root: List[ReservedInstances]


class ReservedInstancesListing(BaseModel):
    ClientToken: Optional[String] = None
    CreateDate: Optional[DateTime] = None
    InstanceCounts: Optional[InstanceCountList] = None
    PriceSchedules: Optional[PriceScheduleList] = None
    ReservedInstancesId: Optional[String] = None
    ReservedInstancesListingId: Optional[String] = None
    Status: Optional[ListingStatus] = None
    StatusMessage: Optional[String] = None
    Tags: Optional[TagList] = None
    UpdateDate: Optional[DateTime] = None


class ReservedInstancesListingList(RootModel[List[ReservedInstancesListing]]):
    root: List[ReservedInstancesListing]


class ReservedInstancesModificationResult(BaseModel):
    ReservedInstancesId: Optional[String] = None
    TargetConfiguration: Optional[ReservedInstancesConfiguration] = None


class ReservedInstancesModificationResultList(
    RootModel[List[ReservedInstancesModificationResult]]
):
    root: List[ReservedInstancesModificationResult]


class ReservedInstancesOffering(BaseModel):
    AvailabilityZone: Optional[String] = None
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Duration: Optional[Long] = None
    FixedPrice: Optional[Float] = None
    InstanceTenancy: Optional[Tenancy] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Marketplace: Optional[Boolean] = None
    OfferingClass: Optional[OfferingClassType] = None
    OfferingType: Optional[OfferingTypeValues] = None
    PricingDetails: Optional[PricingDetailsList] = None
    ProductDescription: Optional[RIProductDescription] = None
    RecurringCharges: Optional[RecurringChargesList] = None
    ReservedInstancesOfferingId: Optional[String] = None
    Scope_1: Optional[Scope] = Field(None, alias='Scope')
    UsagePrice: Optional[Float] = None


class ReservedInstancesOfferingList(RootModel[List[ReservedInstancesOffering]]):
    root: List[ReservedInstancesOffering]


class ReservedIntancesIds(RootModel[List[ReservedInstancesId]]):
    root: List[ReservedInstancesId]


class ResetEbsDefaultKmsKeyIdResult(BaseModel):
    KmsKeyId: Optional[String] = None


class ResetNetworkInterfaceAttributeRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    SourceDestCheck: Optional[String] = None


class ResetSnapshotAttributeRequest(BaseModel):
    Attribute: SnapshotAttributeName
    DryRun: Optional[Boolean] = None
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class ResourceIdList(RootModel[List[TaggableResourceId]]):
    root: List[TaggableResourceId]


class ResourceList(RootModel[List[String]]):
    root: List[String]


class ResourceStatement(BaseModel):
    ResourceTypes: Optional[ValueStringList] = None
    Resources: Optional[ValueStringList] = None


class ResourceStatementRequest(BaseModel):
    ResourceTypes: Optional[ValueStringList] = None
    Resources: Optional[ValueStringList] = None


class ResponseError(BaseModel):
    Code: Optional[LaunchTemplateErrorCode] = None
    Message: Optional[String] = None


class ResponseHostIdList(RootModel[List[String]]):
    root: List[String]


class ResponseHostIdSet(RootModel[List[String]]):
    root: List[String]


class RestorableByStringList(RootModel[List[String]]):
    root: List[String]


class RestoreAddressToClassicRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PublicIp: String


class RestoreAddressToClassicResult(BaseModel):
    PublicIp: Optional[String] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class RestoreManagedPrefixListVersionResult(BaseModel):
    PrefixList: Optional[ManagedPrefixList] = None


class RestoreSnapshotFromRecycleBinRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')


class RestoreSnapshotFromRecycleBinResult(BaseModel):
    Description: Optional[String] = None
    Encrypted: Optional[Boolean] = None
    OutpostArn: Optional[String] = None
    OwnerId: Optional[String] = None
    Progress: Optional[String] = None
    SnapshotId: Optional[String] = None
    StartTime: Optional[MillisecondDateTime] = None
    State: Optional[SnapshotState] = None
    VolumeId: Optional[String] = None
    VolumeSize: Optional[Integer] = None


class RestoreSnapshotTierRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    PermanentRestore: Optional[Boolean] = None
    SnapshotId_1: SnapshotId = Field(..., alias='SnapshotId')
    TemporaryRestoreDays: Optional[RestoreSnapshotTierRequestTemporaryRestoreDays] = (
        None
    )


class RestoreSnapshotTierResult(BaseModel):
    IsPermanentRestore: Optional[Boolean] = None
    RestoreDuration: Optional[Integer] = None
    RestoreStartTime: Optional[MillisecondDateTime] = None
    SnapshotId: Optional[String] = None


class RevokeClientVpnIngressRequest(BaseModel):
    AccessGroupId: Optional[String] = None
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None
    RevokeAllGroups: Optional[Boolean] = None
    TargetNetworkCidr: String


class RevokeClientVpnIngressResult(BaseModel):
    Status: Optional[ClientVpnAuthorizationRuleStatus] = None


class Route(BaseModel):
    CarrierGatewayId_1: Optional[CarrierGatewayId] = Field(
        None, alias='CarrierGatewayId'
    )
    CoreNetworkArn_1: Optional[CoreNetworkArn] = Field(None, alias='CoreNetworkArn')
    DestinationCidrBlock: Optional[String] = None
    DestinationIpv6CidrBlock: Optional[String] = None
    DestinationPrefixListId: Optional[String] = None
    EgressOnlyInternetGatewayId: Optional[String] = None
    GatewayId: Optional[String] = None
    InstanceId: Optional[String] = None
    InstanceOwnerId: Optional[String] = None
    LocalGatewayId: Optional[String] = None
    NatGatewayId: Optional[String] = None
    NetworkInterfaceId: Optional[String] = None
    Origin: Optional[RouteOrigin] = None
    State: Optional[RouteState] = None
    TransitGatewayId: Optional[String] = None
    VpcPeeringConnectionId: Optional[String] = None


class RouteList(RootModel[List[Route]]):
    root: List[Route]


class RouteTableAssociationState(BaseModel):
    State: Optional[RouteTableAssociationStateCode] = None
    StatusMessage: Optional[String] = None


class RuleGroupTypePair(BaseModel):
    RuleGroupArn: Optional[ResourceArn] = None
    RuleGroupType: Optional[String] = None


class RuleGroupTypePairList(RootModel[List[RuleGroupTypePair]]):
    root: List[RuleGroupTypePair]


class RuleOption(BaseModel):
    Keyword: Optional[String] = None
    Settings: Optional[StringList] = None


class RuleOptionList(RootModel[List[RuleOption]]):
    root: List[RuleOption]


class S3ObjectTag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class S3ObjectTagList(RootModel[List[S3ObjectTag]]):
    root: List[S3ObjectTag]


class S3Storage(BaseModel):
    AWSAccessKeyId: Optional[String] = None
    Bucket: Optional[String] = None
    Prefix: Optional[String] = None
    UploadPolicy: Optional[Blob] = None
    UploadPolicySignature: Optional[String] = None


class ScheduledInstanceRecurrence(BaseModel):
    Frequency: Optional[String] = None
    Interval: Optional[Integer] = None
    OccurrenceDaySet_1: Optional[OccurrenceDaySet] = Field(
        None, alias='OccurrenceDaySet'
    )
    OccurrenceRelativeToEnd: Optional[Boolean] = None
    OccurrenceUnit: Optional[String] = None


class ScheduledInstanceRecurrenceRequest(BaseModel):
    Frequency: Optional[String] = None
    Interval: Optional[Integer] = None
    OccurrenceDays: Optional[OccurrenceDayRequestSet] = None
    OccurrenceRelativeToEnd: Optional[Boolean] = None
    OccurrenceUnit: Optional[String] = None


class ScheduledInstancesEbs(BaseModel):
    DeleteOnTermination: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    Iops: Optional[Integer] = None
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    VolumeSize: Optional[Integer] = None
    VolumeType: Optional[String] = None


class ScheduledInstancesIamInstanceProfile(BaseModel):
    Arn: Optional[String] = None
    Name: Optional[String] = None


class ScheduledInstancesPlacement(BaseModel):
    AvailabilityZone: Optional[String] = None
    GroupName: Optional[PlacementGroupName] = None


class ScheduledInstancesPrivateIpAddressConfig(BaseModel):
    Primary: Optional[Boolean] = None
    PrivateIpAddress: Optional[String] = None


class ScheduledInstancesSecurityGroupIdSet(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class SearchLocalGatewayRoutesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LocalGatewayRouteTableId: LocalGatewayRoutetableId
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None


class SearchLocalGatewayRoutesResult(BaseModel):
    NextToken: Optional[String] = None
    Routes: Optional[LocalGatewayRouteList] = None


class SearchTransitGatewayMulticastGroupsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayMulticastDomainId_1: TransitGatewayMulticastDomainId = Field(
        ..., alias='TransitGatewayMulticastDomainId'
    )


class SearchTransitGatewayMulticastGroupsResult(BaseModel):
    MulticastGroups: Optional[TransitGatewayMulticastGroupList] = None
    NextToken: Optional[String] = None


class SearchTransitGatewayRoutesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: FilterList
    MaxResults: Optional[TransitGatewayMaxResults] = None
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class SecurityGroupIdentifier(BaseModel):
    GroupId: Optional[String] = None
    GroupName: Optional[String] = None


class SecurityGroupReference(BaseModel):
    GroupId: Optional[String] = None
    ReferencingVpcId: Optional[String] = None
    VpcPeeringConnectionId: Optional[String] = None


class SecurityGroupReferences(RootModel[List[SecurityGroupReference]]):
    root: List[SecurityGroupReference]


class SecurityGroupRule(BaseModel):
    CidrIpv4: Optional[String] = None
    CidrIpv6: Optional[String] = None
    Description: Optional[String] = None
    FromPort: Optional[Integer] = None
    GroupId: Optional[SecurityGroupId] = None
    GroupOwnerId: Optional[String] = None
    IpProtocol: Optional[String] = None
    IsEgress: Optional[Boolean] = None
    PrefixListId: Optional[PrefixListResourceId] = None
    ReferencedGroupInfo: Optional[ReferencedSecurityGroup] = None
    SecurityGroupRuleId_1: Optional[SecurityGroupRuleId] = Field(
        None, alias='SecurityGroupRuleId'
    )
    Tags: Optional[TagList] = None
    ToPort: Optional[Integer] = None


class SecurityGroupRuleDescription(BaseModel):
    Description: Optional[String] = None
    SecurityGroupRuleId: Optional[String] = None


class SecurityGroupRuleDescriptionList(RootModel[List[SecurityGroupRuleDescription]]):
    root: List[SecurityGroupRuleDescription]


class SecurityGroupRuleIdList(RootModel[List[String]]):
    root: List[String]


class SecurityGroupRuleList(RootModel[List[SecurityGroupRule]]):
    root: List[SecurityGroupRule]


class SecurityGroupRuleRequest(BaseModel):
    CidrIpv4: Optional[String] = None
    CidrIpv6: Optional[String] = None
    Description: Optional[String] = None
    FromPort: Optional[Integer] = None
    IpProtocol: Optional[String] = None
    PrefixListId: Optional[PrefixListResourceId] = None
    ReferencedGroupId: Optional[SecurityGroupId] = None
    ToPort: Optional[Integer] = None


class SecurityGroupRuleUpdate(BaseModel):
    SecurityGroupRule: Optional[SecurityGroupRuleRequest] = None
    SecurityGroupRuleId_1: SecurityGroupRuleId = Field(..., alias='SecurityGroupRuleId')


class SecurityGroupRuleUpdateList(RootModel[List[SecurityGroupRuleUpdate]]):
    root: List[SecurityGroupRuleUpdate]


class ServiceConfiguration(BaseModel):
    AcceptanceRequired: Optional[Boolean] = None
    AvailabilityZones: Optional[ValueStringList] = None
    BaseEndpointDnsNames: Optional[ValueStringList] = None
    GatewayLoadBalancerArns: Optional[ValueStringList] = None
    ManagesVpcEndpoints: Optional[Boolean] = None
    NetworkLoadBalancerArns: Optional[ValueStringList] = None
    PayerResponsibility_1: Optional[PayerResponsibility] = Field(
        None, alias='PayerResponsibility'
    )
    PrivateDnsName: Optional[String] = None
    PrivateDnsNameConfiguration_1: Optional[PrivateDnsNameConfiguration] = Field(
        None, alias='PrivateDnsNameConfiguration'
    )
    ServiceId: Optional[String] = None
    ServiceName: Optional[String] = None
    ServiceState_1: Optional[ServiceState] = Field(None, alias='ServiceState')
    ServiceType: Optional[ServiceTypeDetailSet] = None
    SupportedIpAddressTypes_1: Optional[SupportedIpAddressTypes] = Field(
        None, alias='SupportedIpAddressTypes'
    )
    Tags: Optional[TagList] = None


class ServiceConfigurationSet(RootModel[List[ServiceConfiguration]]):
    root: List[ServiceConfiguration]


class ServiceDetail(BaseModel):
    AcceptanceRequired: Optional[Boolean] = None
    AvailabilityZones: Optional[ValueStringList] = None
    BaseEndpointDnsNames: Optional[ValueStringList] = None
    ManagesVpcEndpoints: Optional[Boolean] = None
    Owner: Optional[String] = None
    PayerResponsibility_1: Optional[PayerResponsibility] = Field(
        None, alias='PayerResponsibility'
    )
    PrivateDnsName: Optional[String] = None
    PrivateDnsNameVerificationState: Optional[DnsNameState] = None
    PrivateDnsNames: Optional[PrivateDnsDetailsSet] = None
    ServiceId: Optional[String] = None
    ServiceName: Optional[String] = None
    ServiceType: Optional[ServiceTypeDetailSet] = None
    SupportedIpAddressTypes_1: Optional[SupportedIpAddressTypes] = Field(
        None, alias='SupportedIpAddressTypes'
    )
    Tags: Optional[TagList] = None
    VpcEndpointPolicySupported: Optional[Boolean] = None


class ServiceDetailSet(RootModel[List[ServiceDetail]]):
    root: List[ServiceDetail]


class Snapshot(BaseModel):
    DataEncryptionKeyId: Optional[String] = None
    Description: Optional[String] = None
    Encrypted: Optional[Boolean] = None
    KmsKeyId: Optional[String] = None
    OutpostArn: Optional[String] = None
    OwnerAlias: Optional[String] = None
    OwnerId: Optional[String] = None
    Progress: Optional[String] = None
    RestoreExpiryTime: Optional[MillisecondDateTime] = None
    SnapshotId: Optional[String] = None
    StartTime: Optional[DateTime] = None
    State: Optional[SnapshotState] = None
    StateMessage: Optional[String] = None
    StorageTier_1: Optional[StorageTier] = Field(None, alias='StorageTier')
    Tags: Optional[TagList] = None
    VolumeId: Optional[String] = None
    VolumeSize: Optional[Integer] = None


class SnapshotDetail(BaseModel):
    Description: Optional[String] = None
    DeviceName: Optional[String] = None
    DiskImageSize: Optional[Double] = None
    Format: Optional[String] = None
    Progress: Optional[String] = None
    SnapshotId: Optional[String] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None
    Url: Optional[String] = None
    UserBucket: Optional[UserBucketDetails] = None


class SnapshotDetailList(RootModel[List[SnapshotDetail]]):
    root: List[SnapshotDetail]


class SnapshotDiskContainer(BaseModel):
    Description: Optional[String] = None
    Format: Optional[String] = None
    Url: Optional[String] = None
    UserBucket_1: Optional[UserBucket] = Field(None, alias='UserBucket')


class SnapshotInfo(BaseModel):
    Description: Optional[String] = None
    Encrypted: Optional[Boolean] = None
    OutpostArn: Optional[String] = None
    OwnerId: Optional[String] = None
    Progress: Optional[String] = None
    SnapshotId: Optional[String] = None
    StartTime: Optional[MillisecondDateTime] = None
    State: Optional[SnapshotState] = None
    Tags: Optional[TagList] = None
    VolumeId: Optional[String] = None
    VolumeSize: Optional[Integer] = None


class SnapshotList(RootModel[List[Snapshot]]):
    root: List[Snapshot]


class SnapshotRecycleBinInfo(BaseModel):
    Description: Optional[String] = None
    RecycleBinEnterTime: Optional[MillisecondDateTime] = None
    RecycleBinExitTime: Optional[MillisecondDateTime] = None
    SnapshotId: Optional[String] = None
    VolumeId: Optional[String] = None


class SnapshotRecycleBinInfoList(RootModel[List[SnapshotRecycleBinInfo]]):
    root: List[SnapshotRecycleBinInfo]


class SnapshotSet(RootModel[List[SnapshotInfo]]):
    root: List[SnapshotInfo]


class SnapshotTaskDetail(BaseModel):
    Description: Optional[String] = None
    DiskImageSize: Optional[Double] = None
    Encrypted: Optional[Boolean] = None
    Format: Optional[String] = None
    KmsKeyId: Optional[String] = None
    Progress: Optional[String] = None
    SnapshotId: Optional[String] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None
    Url: Optional[String] = None
    UserBucket: Optional[UserBucketDetails] = None


class SnapshotTierStatus(BaseModel):
    ArchivalCompleteTime: Optional[MillisecondDateTime] = None
    LastTieringOperationStatus: Optional[TieringOperationStatus] = None
    LastTieringOperationStatusDetail: Optional[String] = None
    LastTieringProgress: Optional[Integer] = None
    LastTieringStartTime: Optional[MillisecondDateTime] = None
    OwnerId: Optional[String] = None
    RestoreExpiryTime: Optional[MillisecondDateTime] = None
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    Status: Optional[SnapshotState] = None
    StorageTier_1: Optional[StorageTier] = Field(None, alias='StorageTier')
    Tags: Optional[TagList] = None
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')


class SpotFleetTagSpecification(BaseModel):
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    Tags: Optional[TagList] = None


class SpotFleetTagSpecificationList(RootModel[List[SpotFleetTagSpecification]]):
    root: List[SpotFleetTagSpecification]


class SpotInstanceStateFault(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class SpotInstanceStatus(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None
    UpdateTime: Optional[DateTime] = None


class SpotMarketOptions(BaseModel):
    BlockDurationMinutes: Optional[Integer] = None
    InstanceInterruptionBehavior_1: Optional[InstanceInterruptionBehavior] = Field(
        None, alias='InstanceInterruptionBehavior'
    )
    MaxPrice: Optional[String] = None
    SpotInstanceType_1: Optional[SpotInstanceType] = Field(
        None, alias='SpotInstanceType'
    )
    ValidUntil: Optional[DateTime] = None


class SpotOptions(BaseModel):
    AllocationStrategy: Optional[SpotAllocationStrategy] = None
    InstanceInterruptionBehavior: Optional[SpotInstanceInterruptionBehavior] = None
    InstancePoolsToUseCount: Optional[Integer] = None
    MaintenanceStrategies: Optional[FleetSpotMaintenanceStrategies] = None
    MaxTotalPrice: Optional[String] = None
    MinTargetCapacity: Optional[Integer] = None
    SingleAvailabilityZone: Optional[Boolean] = None
    SingleInstanceType: Optional[Boolean] = None


class SpotOptionsRequest(BaseModel):
    AllocationStrategy: Optional[SpotAllocationStrategy] = None
    InstanceInterruptionBehavior: Optional[SpotInstanceInterruptionBehavior] = None
    InstancePoolsToUseCount: Optional[Integer] = None
    MaintenanceStrategies: Optional[FleetSpotMaintenanceStrategiesRequest] = None
    MaxTotalPrice: Optional[String] = None
    MinTargetCapacity: Optional[Integer] = None
    SingleAvailabilityZone: Optional[Boolean] = None
    SingleInstanceType: Optional[Boolean] = None


class SpotPlacement(BaseModel):
    AvailabilityZone: Optional[String] = None
    GroupName: Optional[PlacementGroupName] = None
    Tenancy_1: Optional[Tenancy] = Field(None, alias='Tenancy')


class SpotPlacementScore(BaseModel):
    AvailabilityZoneId: Optional[String] = None
    Region: Optional[String] = None
    Score: Optional[Integer] = None


class SpotPlacementScores(RootModel[List[SpotPlacementScore]]):
    root: List[SpotPlacementScore]


class SpotPrice(BaseModel):
    AvailabilityZone: Optional[String] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    ProductDescription: Optional[RIProductDescription] = None
    SpotPrice: Optional[String] = None
    Timestamp: Optional[DateTime] = None


class SpotPriceHistoryList(RootModel[List[SpotPrice]]):
    root: List[SpotPrice]


class StaleIpPermission(BaseModel):
    FromPort: Optional[Integer] = None
    IpProtocol: Optional[String] = None
    IpRanges_1: Optional[IpRanges] = Field(None, alias='IpRanges')
    PrefixListIds: Optional[PrefixListIdSet] = None
    ToPort: Optional[Integer] = None
    UserIdGroupPairs: Optional[UserIdGroupPairSet] = None


class StaleIpPermissionSet(RootModel[List[StaleIpPermission]]):
    root: List[StaleIpPermission]


class StaleSecurityGroup(BaseModel):
    Description: Optional[String] = None
    GroupId: Optional[String] = None
    GroupName: Optional[String] = None
    StaleIpPermissions: Optional[StaleIpPermissionSet] = None
    StaleIpPermissionsEgress: Optional[StaleIpPermissionSet] = None
    VpcId: Optional[String] = None


class StaleSecurityGroupSet(RootModel[List[StaleSecurityGroup]]):
    root: List[StaleSecurityGroup]


class StartInstancesRequest(BaseModel):
    AdditionalInfo: Optional[String] = None
    DryRun: Optional[Boolean] = None
    InstanceIds: InstanceIdStringList


class StartInstancesResult(BaseModel):
    StartingInstances: Optional[InstanceStateChangeList] = None


class StartNetworkInsightsAccessScopeAnalysisRequest(BaseModel):
    ClientToken: String
    DryRun: Optional[Boolean] = None
    NetworkInsightsAccessScopeId_1: NetworkInsightsAccessScopeId = Field(
        ..., alias='NetworkInsightsAccessScopeId'
    )
    TagSpecifications: Optional[TagSpecificationList] = None


class StartNetworkInsightsAccessScopeAnalysisResult(BaseModel):
    NetworkInsightsAccessScopeAnalysis_1: Optional[
        NetworkInsightsAccessScopeAnalysis
    ] = Field(None, alias='NetworkInsightsAccessScopeAnalysis')


class StartNetworkInsightsAnalysisRequest(BaseModel):
    AdditionalAccounts: Optional[ValueStringList] = None
    ClientToken: String
    DryRun: Optional[Boolean] = None
    FilterInArns: Optional[ArnList] = None
    NetworkInsightsPathId_1: NetworkInsightsPathId = Field(
        ..., alias='NetworkInsightsPathId'
    )
    TagSpecifications: Optional[TagSpecificationList] = None


class StartVpcEndpointServicePrivateDnsVerificationRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ServiceId: VpcEndpointServiceId


class StateReason(BaseModel):
    Code: Optional[String] = None
    Message: Optional[String] = None


class StopInstancesResult(BaseModel):
    StoppingInstances: Optional[InstanceStateChangeList] = None


class Storage(BaseModel):
    S3: Optional[S3Storage] = None


class StorageLocation(BaseModel):
    Bucket: Optional[String] = None
    Key: Optional[String] = None


class StoreImageTaskResult(BaseModel):
    AmiId: Optional[String] = None
    Bucket: Optional[String] = None
    ProgressPercentage: Optional[Integer] = None
    S3objectKey: Optional[String] = None
    StoreTaskFailureReason: Optional[String] = None
    StoreTaskState: Optional[String] = None
    TaskStartTime: Optional[MillisecondDateTime] = None


class StoreImageTaskResultSet(RootModel[List[StoreImageTaskResult]]):
    root: List[StoreImageTaskResult]


class SubnetAssociation(BaseModel):
    State: Optional[TransitGatewayMulitcastDomainAssociationState] = None
    SubnetId: Optional[String] = None


class SubnetAssociationList(RootModel[List[SubnetAssociation]]):
    root: List[SubnetAssociation]


class SubnetCidrBlockState(BaseModel):
    State: Optional[SubnetCidrBlockStateCode] = None
    StatusMessage: Optional[String] = None


class SubnetCidrReservation(BaseModel):
    Cidr: Optional[String] = None
    Description: Optional[String] = None
    OwnerId: Optional[String] = None
    ReservationType: Optional[SubnetCidrReservationType] = None
    SubnetCidrReservationId_1: Optional[SubnetCidrReservationId] = Field(
        None, alias='SubnetCidrReservationId'
    )
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    Tags: Optional[TagList] = None


class SubnetCidrReservationList(RootModel[List[SubnetCidrReservation]]):
    root: List[SubnetCidrReservation]


class SubnetIpv6CidrBlockAssociation(BaseModel):
    AssociationId: Optional[SubnetCidrAssociationId] = None
    Ipv6CidrBlock: Optional[String] = None
    Ipv6CidrBlockState: Optional[SubnetCidrBlockState] = None


class SubnetIpv6CidrBlockAssociationSet(
    RootModel[List[SubnetIpv6CidrBlockAssociation]]
):
    root: List[SubnetIpv6CidrBlockAssociation]


class TargetCapacitySpecification(BaseModel):
    DefaultTargetCapacityType_1: Optional[DefaultTargetCapacityType] = Field(
        None, alias='DefaultTargetCapacityType'
    )
    OnDemandTargetCapacity: Optional[Integer] = None
    SpotTargetCapacity: Optional[Integer] = None
    TargetCapacityUnitType_1: Optional[TargetCapacityUnitType] = Field(
        None, alias='TargetCapacityUnitType'
    )
    TotalTargetCapacity: Optional[Integer] = None


class TargetCapacitySpecificationRequest(BaseModel):
    DefaultTargetCapacityType_1: Optional[DefaultTargetCapacityType] = Field(
        None, alias='DefaultTargetCapacityType'
    )
    OnDemandTargetCapacity: Optional[Integer] = None
    SpotTargetCapacity: Optional[Integer] = None
    TargetCapacityUnitType_1: Optional[TargetCapacityUnitType] = Field(
        None, alias='TargetCapacityUnitType'
    )
    TotalTargetCapacity: Integer


class TargetNetwork(BaseModel):
    AssociationId: Optional[String] = None
    ClientVpnEndpointId: Optional[String] = None
    SecurityGroups: Optional[ValueStringList] = None
    Status: Optional[AssociationStatus] = None
    TargetNetworkId: Optional[String] = None
    VpcId: Optional[String] = None


class TargetNetworkSet(RootModel[List[TargetNetwork]]):
    root: List[TargetNetwork]


class TargetReservationValue(BaseModel):
    ReservationValue_1: Optional[ReservationValue] = Field(
        None, alias='ReservationValue'
    )
    TargetConfiguration_1: Optional[TargetConfiguration] = Field(
        None, alias='TargetConfiguration'
    )


class TargetReservationValueSet(RootModel[List[TargetReservationValue]]):
    root: List[TargetReservationValue]


class TerminateClientVpnConnectionsRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    ConnectionId: Optional[VpnConnectionId] = None
    DryRun: Optional[Boolean] = None
    Username: Optional[String] = None


class TerminateConnectionStatus(BaseModel):
    ConnectionId: Optional[String] = None
    CurrentStatus: Optional[ClientVpnConnectionStatus] = None
    PreviousStatus: Optional[ClientVpnConnectionStatus] = None


class TerminateConnectionStatusSet(RootModel[List[TerminateConnectionStatus]]):
    root: List[TerminateConnectionStatus]


class TerminateInstancesResult(BaseModel):
    TerminatingInstances: Optional[InstanceStateChangeList] = None


class ThroughResourcesStatement(BaseModel):
    ResourceStatement_1: Optional[ResourceStatement] = Field(
        None, alias='ResourceStatement'
    )


class ThroughResourcesStatementList(RootModel[List[ThroughResourcesStatement]]):
    root: List[ThroughResourcesStatement]


class ThroughResourcesStatementRequest(BaseModel):
    ResourceStatement: Optional[ResourceStatementRequest] = None


class ThroughResourcesStatementRequestList(
    RootModel[List[ThroughResourcesStatementRequest]]
):
    root: List[ThroughResourcesStatementRequest]


class TrafficMirrorFilterRule(BaseModel):
    Description: Optional[String] = None
    DestinationCidrBlock: Optional[String] = None
    DestinationPortRange: Optional[TrafficMirrorPortRange] = None
    Protocol: Optional[Integer] = None
    RuleAction: Optional[TrafficMirrorRuleAction] = None
    RuleNumber: Optional[Integer] = None
    SourceCidrBlock: Optional[String] = None
    SourcePortRange: Optional[TrafficMirrorPortRange] = None
    TrafficDirection_1: Optional[TrafficDirection] = Field(
        None, alias='TrafficDirection'
    )
    TrafficMirrorFilterId: Optional[String] = None
    TrafficMirrorFilterRuleId: Optional[String] = None


class TrafficMirrorFilterRuleList(RootModel[List[TrafficMirrorFilterRule]]):
    root: List[TrafficMirrorFilterRule]


class TrafficMirrorTarget(BaseModel):
    Description: Optional[String] = None
    GatewayLoadBalancerEndpointId: Optional[String] = None
    NetworkInterfaceId: Optional[String] = None
    NetworkLoadBalancerArn: Optional[String] = None
    OwnerId: Optional[String] = None
    Tags: Optional[TagList] = None
    TrafficMirrorTargetId: Optional[String] = None
    Type: Optional[TrafficMirrorTargetType] = None


class TrafficMirrorTargetSet(RootModel[List[TrafficMirrorTarget]]):
    root: List[TrafficMirrorTarget]


class TransitGatewayAssociation(BaseModel):
    ResourceId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    State: Optional[TransitGatewayAssociationState] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableId_1: Optional[TransitGatewayRouteTableId] = Field(
        None, alias='TransitGatewayRouteTableId'
    )


class TransitGatewayAttachment(BaseModel):
    Association: Optional[TransitGatewayAttachmentAssociation] = None
    CreationTime: Optional[DateTime] = None
    ResourceId: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    State: Optional[TransitGatewayAttachmentState] = None
    Tags: Optional[TagList] = None
    TransitGatewayAttachmentId: Optional[String] = None
    TransitGatewayId: Optional[String] = None
    TransitGatewayOwnerId: Optional[String] = None


class TransitGatewayAttachmentList(RootModel[List[TransitGatewayAttachment]]):
    root: List[TransitGatewayAttachment]


class TransitGatewayAttachmentPropagation(BaseModel):
    State: Optional[TransitGatewayPropagationState] = None
    TransitGatewayRouteTableId: Optional[String] = None


class TransitGatewayAttachmentPropagationList(
    RootModel[List[TransitGatewayAttachmentPropagation]]
):
    root: List[TransitGatewayAttachmentPropagation]


class TransitGatewayConnect(BaseModel):
    CreationTime: Optional[DateTime] = None
    Options: Optional[TransitGatewayConnectOptions] = None
    State: Optional[TransitGatewayAttachmentState] = None
    Tags: Optional[TagList] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayId_1: Optional[TransitGatewayId] = Field(
        None, alias='TransitGatewayId'
    )
    TransportTransitGatewayAttachmentId: Optional[TransitGatewayAttachmentId] = None


class TransitGatewayConnectList(RootModel[List[TransitGatewayConnect]]):
    root: List[TransitGatewayConnect]


class TransitGatewayConnectPeerConfiguration(BaseModel):
    BgpConfigurations: Optional[TransitGatewayAttachmentBgpConfigurationList] = None
    InsideCidrBlocks: Optional[InsideCidrBlocksStringList] = None
    PeerAddress: Optional[String] = None
    Protocol: Optional[ProtocolValue] = None
    TransitGatewayAddress: Optional[String] = None


class TransitGatewayMulticastDeregisteredGroupMembers(BaseModel):
    DeregisteredNetworkInterfaceIds: Optional[ValueStringList] = None
    GroupIpAddress: Optional[String] = None
    TransitGatewayMulticastDomainId: Optional[String] = None


class TransitGatewayMulticastDeregisteredGroupSources(BaseModel):
    DeregisteredNetworkInterfaceIds: Optional[ValueStringList] = None
    GroupIpAddress: Optional[String] = None
    TransitGatewayMulticastDomainId: Optional[String] = None


class TransitGatewayMulticastDomain(BaseModel):
    CreationTime: Optional[DateTime] = None
    Options: Optional[TransitGatewayMulticastDomainOptions] = None
    OwnerId: Optional[String] = None
    State: Optional[TransitGatewayMulticastDomainState] = None
    Tags: Optional[TagList] = None
    TransitGatewayId: Optional[String] = None
    TransitGatewayMulticastDomainArn: Optional[String] = None
    TransitGatewayMulticastDomainId: Optional[String] = None


class TransitGatewayMulticastDomainAssociation(BaseModel):
    ResourceId: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    Subnet: Optional[SubnetAssociation] = None
    TransitGatewayAttachmentId: Optional[String] = None


class TransitGatewayMulticastDomainAssociationList(
    RootModel[List[TransitGatewayMulticastDomainAssociation]]
):
    root: List[TransitGatewayMulticastDomainAssociation]


class TransitGatewayMulticastDomainAssociations(BaseModel):
    ResourceId: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    Subnets: Optional[SubnetAssociationList] = None
    TransitGatewayAttachmentId: Optional[String] = None
    TransitGatewayMulticastDomainId: Optional[String] = None


class TransitGatewayMulticastDomainList(RootModel[List[TransitGatewayMulticastDomain]]):
    root: List[TransitGatewayMulticastDomain]


class TransitGatewayMulticastRegisteredGroupMembers(BaseModel):
    GroupIpAddress: Optional[String] = None
    RegisteredNetworkInterfaceIds: Optional[ValueStringList] = None
    TransitGatewayMulticastDomainId: Optional[String] = None


class TransitGatewayMulticastRegisteredGroupSources(BaseModel):
    GroupIpAddress: Optional[String] = None
    RegisteredNetworkInterfaceIds: Optional[ValueStringList] = None
    TransitGatewayMulticastDomainId: Optional[String] = None


class TransitGatewayOptions(BaseModel):
    AmazonSideAsn: Optional[Long] = None
    AssociationDefaultRouteTableId: Optional[String] = None
    AutoAcceptSharedAttachments: Optional[AutoAcceptSharedAttachmentsValue] = None
    DefaultRouteTableAssociation: Optional[DefaultRouteTableAssociationValue] = None
    DefaultRouteTablePropagation: Optional[DefaultRouteTablePropagationValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    MulticastSupport: Optional[MulticastSupportValue] = None
    PropagationDefaultRouteTableId: Optional[String] = None
    TransitGatewayCidrBlocks: Optional[ValueStringList] = None
    VpnEcmpSupport: Optional[VpnEcmpSupportValue] = None


class TransitGatewayPeeringAttachment(BaseModel):
    AccepterTgwInfo: Optional[PeeringTgwInfo] = None
    AccepterTransitGatewayAttachmentId: Optional[String] = None
    CreationTime: Optional[DateTime] = None
    Options: Optional[TransitGatewayPeeringAttachmentOptions] = None
    RequesterTgwInfo: Optional[PeeringTgwInfo] = None
    State: Optional[TransitGatewayAttachmentState] = None
    Status: Optional[PeeringAttachmentStatus] = None
    Tags: Optional[TagList] = None
    TransitGatewayAttachmentId: Optional[String] = None


class TransitGatewayPeeringAttachmentList(
    RootModel[List[TransitGatewayPeeringAttachment]]
):
    root: List[TransitGatewayPeeringAttachment]


class TransitGatewayPolicyRule(BaseModel):
    DestinationCidrBlock: Optional[String] = None
    DestinationPortRange: Optional[String] = None
    MetaData: Optional[TransitGatewayPolicyRuleMetaData] = None
    Protocol: Optional[String] = None
    SourceCidrBlock: Optional[String] = None
    SourcePortRange: Optional[String] = None


class TransitGatewayPolicyTable(BaseModel):
    CreationTime: Optional[DateTime] = None
    State: Optional[TransitGatewayPolicyTableState] = None
    Tags: Optional[TagList] = None
    TransitGatewayId_1: Optional[TransitGatewayId] = Field(
        None, alias='TransitGatewayId'
    )
    TransitGatewayPolicyTableId_1: Optional[TransitGatewayPolicyTableId] = Field(
        None, alias='TransitGatewayPolicyTableId'
    )


class TransitGatewayPolicyTableAssociation(BaseModel):
    ResourceId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    State: Optional[TransitGatewayAssociationState] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayPolicyTableId_1: Optional[TransitGatewayPolicyTableId] = Field(
        None, alias='TransitGatewayPolicyTableId'
    )


class TransitGatewayPolicyTableAssociationList(
    RootModel[List[TransitGatewayPolicyTableAssociation]]
):
    root: List[TransitGatewayPolicyTableAssociation]


class TransitGatewayPolicyTableEntry(BaseModel):
    PolicyRule: Optional[TransitGatewayPolicyRule] = None
    PolicyRuleNumber: Optional[String] = None
    TargetRouteTableId: Optional[TransitGatewayRouteTableId] = None


class TransitGatewayPolicyTableEntryList(
    RootModel[List[TransitGatewayPolicyTableEntry]]
):
    root: List[TransitGatewayPolicyTableEntry]


class TransitGatewayPolicyTableList(RootModel[List[TransitGatewayPolicyTable]]):
    root: List[TransitGatewayPolicyTable]


class TransitGatewayPrefixListReference(BaseModel):
    Blackhole: Optional[Boolean] = None
    PrefixListId: Optional[PrefixListResourceId] = None
    PrefixListOwnerId: Optional[String] = None
    State: Optional[TransitGatewayPrefixListReferenceState] = None
    TransitGatewayAttachment: Optional[TransitGatewayPrefixListAttachment] = None
    TransitGatewayRouteTableId_1: Optional[TransitGatewayRouteTableId] = Field(
        None, alias='TransitGatewayRouteTableId'
    )


class TransitGatewayPrefixListReferenceSet(
    RootModel[List[TransitGatewayPrefixListReference]]
):
    root: List[TransitGatewayPrefixListReference]


class TransitGatewayPropagation(BaseModel):
    ResourceId: Optional[String] = None
    ResourceType: Optional[TransitGatewayAttachmentResourceType] = None
    State: Optional[TransitGatewayPropagationState] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayRouteTableAnnouncementId_1: Optional[
        TransitGatewayRouteTableAnnouncementId
    ] = Field(None, alias='TransitGatewayRouteTableAnnouncementId')
    TransitGatewayRouteTableId: Optional[String] = None


class TransitGatewayRequestOptions(BaseModel):
    AmazonSideAsn: Optional[Long] = None
    AutoAcceptSharedAttachments: Optional[AutoAcceptSharedAttachmentsValue] = None
    DefaultRouteTableAssociation: Optional[DefaultRouteTableAssociationValue] = None
    DefaultRouteTablePropagation: Optional[DefaultRouteTablePropagationValue] = None
    DnsSupport: Optional[DnsSupportValue] = None
    MulticastSupport: Optional[MulticastSupportValue] = None
    TransitGatewayCidrBlocks: Optional[TransitGatewayCidrBlockStringList] = None
    VpnEcmpSupport: Optional[VpnEcmpSupportValue] = None


class TransitGatewayRoute(BaseModel):
    DestinationCidrBlock: Optional[String] = None
    PrefixListId: Optional[PrefixListResourceId] = None
    State: Optional[TransitGatewayRouteState] = None
    TransitGatewayAttachments: Optional[TransitGatewayRouteAttachmentList] = None
    TransitGatewayRouteTableAnnouncementId_1: Optional[
        TransitGatewayRouteTableAnnouncementId
    ] = Field(None, alias='TransitGatewayRouteTableAnnouncementId')
    Type: Optional[TransitGatewayRouteType] = None


class TransitGatewayRouteList(RootModel[List[TransitGatewayRoute]]):
    root: List[TransitGatewayRoute]


class TransitGatewayRouteTable(BaseModel):
    CreationTime: Optional[DateTime] = None
    DefaultAssociationRouteTable: Optional[Boolean] = None
    DefaultPropagationRouteTable: Optional[Boolean] = None
    State: Optional[TransitGatewayRouteTableState] = None
    Tags: Optional[TagList] = None
    TransitGatewayId: Optional[String] = None
    TransitGatewayRouteTableId: Optional[String] = None


class TransitGatewayRouteTableAnnouncement(BaseModel):
    AnnouncementDirection: Optional[TransitGatewayRouteTableAnnouncementDirection] = (
        None
    )
    CoreNetworkId: Optional[String] = None
    CreationTime: Optional[DateTime] = None
    PeerCoreNetworkId: Optional[String] = None
    PeerTransitGatewayId: Optional[TransitGatewayId] = None
    PeeringAttachmentId: Optional[TransitGatewayAttachmentId] = None
    State: Optional[TransitGatewayRouteTableAnnouncementState] = None
    Tags: Optional[TagList] = None
    TransitGatewayId_1: Optional[TransitGatewayId] = Field(
        None, alias='TransitGatewayId'
    )
    TransitGatewayRouteTableAnnouncementId_1: Optional[
        TransitGatewayRouteTableAnnouncementId
    ] = Field(None, alias='TransitGatewayRouteTableAnnouncementId')
    TransitGatewayRouteTableId_1: Optional[TransitGatewayRouteTableId] = Field(
        None, alias='TransitGatewayRouteTableId'
    )


class TransitGatewayRouteTableAnnouncementList(
    RootModel[List[TransitGatewayRouteTableAnnouncement]]
):
    root: List[TransitGatewayRouteTableAnnouncement]


class TransitGatewayRouteTableList(RootModel[List[TransitGatewayRouteTable]]):
    root: List[TransitGatewayRouteTable]


class TransitGatewayVpcAttachment(BaseModel):
    CreationTime: Optional[DateTime] = None
    Options: Optional[TransitGatewayVpcAttachmentOptions] = None
    State: Optional[TransitGatewayAttachmentState] = None
    SubnetIds: Optional[ValueStringList] = None
    Tags: Optional[TagList] = None
    TransitGatewayAttachmentId: Optional[String] = None
    TransitGatewayId: Optional[String] = None
    VpcId: Optional[String] = None
    VpcOwnerId: Optional[String] = None


class TransitGatewayVpcAttachmentList(RootModel[List[TransitGatewayVpcAttachment]]):
    root: List[TransitGatewayVpcAttachment]


class TrunkInterfaceAssociation(BaseModel):
    AssociationId: Optional[TrunkInterfaceAssociationId] = None
    BranchInterfaceId: Optional[String] = None
    GreKey: Optional[Integer] = None
    InterfaceProtocol: Optional[InterfaceProtocolType] = None
    Tags: Optional[TagList] = None
    TrunkInterfaceId: Optional[String] = None
    VlanId: Optional[Integer] = None


class TrunkInterfaceAssociationList(RootModel[List[TrunkInterfaceAssociation]]):
    root: List[TrunkInterfaceAssociation]


class UnassignIpv6AddressesRequest(BaseModel):
    Ipv6Addresses: Optional[Ipv6AddressList] = None
    Ipv6Prefixes: Optional[IpPrefixList] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')


class UnassignIpv6AddressesResult(BaseModel):
    NetworkInterfaceId: Optional[String] = None
    UnassignedIpv6Addresses: Optional[Ipv6AddressList] = None
    UnassignedIpv6Prefixes: Optional[IpPrefixList] = None


class UnassignPrivateIpAddressesRequest(BaseModel):
    Ipv4Prefixes: Optional[IpPrefixList] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    PrivateIpAddresses: Optional[PrivateIpAddressStringList] = None


class UnassignPrivateNatGatewayAddressRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxDrainDurationSeconds: Optional[DrainSeconds] = None
    NatGatewayId_1: NatGatewayId = Field(..., alias='NatGatewayId')
    PrivateIpAddresses: IpList


class UnassignPrivateNatGatewayAddressResult(BaseModel):
    NatGatewayAddresses: Optional[NatGatewayAddressList] = None
    NatGatewayId_1: Optional[NatGatewayId] = Field(None, alias='NatGatewayId')


class UnsuccessfulInstanceCreditSpecificationItem(BaseModel):
    Error: Optional[UnsuccessfulInstanceCreditSpecificationItemError] = None
    InstanceId: Optional[String] = None


class UnsuccessfulInstanceCreditSpecificationSet(
    RootModel[List[UnsuccessfulInstanceCreditSpecificationItem]]
):
    root: List[UnsuccessfulInstanceCreditSpecificationItem]


class UnsuccessfulItem(BaseModel):
    Error: Optional[UnsuccessfulItemError] = None
    ResourceId: Optional[String] = None


class UnsuccessfulItemList(RootModel[List[UnsuccessfulItem]]):
    root: List[UnsuccessfulItem]


class UnsuccessfulItemSet(RootModel[List[UnsuccessfulItem]]):
    root: List[UnsuccessfulItem]


class ValidationWarning(BaseModel):
    Errors: Optional[ErrorSet] = None


class VerifiedAccessEndpointEniOptions(BaseModel):
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None


class VerifiedAccessEndpointLoadBalancerOptions(BaseModel):
    LoadBalancerArn: Optional[String] = None
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None
    SubnetIds: Optional[VerifiedAccessEndpointSubnetIdList] = None


class VerifiedAccessEndpointStatus(BaseModel):
    Code: Optional[VerifiedAccessEndpointStatusCode] = None
    Message: Optional[String] = None


class VerifiedAccessInstance(BaseModel):
    CreationTime: Optional[String] = None
    Description: Optional[String] = None
    LastUpdatedTime: Optional[String] = None
    Tags: Optional[TagList] = None
    VerifiedAccessInstanceId: Optional[String] = None
    VerifiedAccessTrustProviders: Optional[VerifiedAccessTrustProviderCondensedList] = (
        None
    )


class VerifiedAccessInstanceList(RootModel[List[VerifiedAccessInstance]]):
    root: List[VerifiedAccessInstance]


class VerifiedAccessLogDeliveryStatus(BaseModel):
    Code: Optional[VerifiedAccessLogDeliveryStatusCode] = None
    Message: Optional[String] = None


class VerifiedAccessLogKinesisDataFirehoseDestination(BaseModel):
    DeliveryStatus: Optional[VerifiedAccessLogDeliveryStatus] = None
    DeliveryStream: Optional[String] = None
    Enabled: Optional[Boolean] = None


class VerifiedAccessLogOptions(BaseModel):
    CloudWatchLogs: Optional[VerifiedAccessLogCloudWatchLogsDestinationOptions] = None
    KinesisDataFirehose: Optional[
        VerifiedAccessLogKinesisDataFirehoseDestinationOptions
    ] = None
    S3: Optional[VerifiedAccessLogS3DestinationOptions] = None


class VerifiedAccessLogS3Destination(BaseModel):
    BucketName: Optional[String] = None
    BucketOwner: Optional[String] = None
    DeliveryStatus: Optional[VerifiedAccessLogDeliveryStatus] = None
    Enabled: Optional[Boolean] = None
    Prefix: Optional[String] = None


class VerifiedAccessTrustProvider(BaseModel):
    CreationTime: Optional[String] = None
    Description: Optional[String] = None
    DeviceOptions_1: Optional[DeviceOptions] = Field(None, alias='DeviceOptions')
    DeviceTrustProviderType_1: Optional[DeviceTrustProviderType] = Field(
        None, alias='DeviceTrustProviderType'
    )
    LastUpdatedTime: Optional[String] = None
    OidcOptions_1: Optional[OidcOptions] = Field(None, alias='OidcOptions')
    PolicyReferenceName: Optional[String] = None
    Tags: Optional[TagList] = None
    TrustProviderType_1: Optional[TrustProviderType] = Field(
        None, alias='TrustProviderType'
    )
    UserTrustProviderType_1: Optional[UserTrustProviderType] = Field(
        None, alias='UserTrustProviderType'
    )
    VerifiedAccessTrustProviderId: Optional[String] = None


class VerifiedAccessTrustProviderList(RootModel[List[VerifiedAccessTrustProvider]]):
    root: List[VerifiedAccessTrustProvider]


class VolumeAttachment(BaseModel):
    AttachTime: Optional[DateTime] = None
    DeleteOnTermination: Optional[Boolean] = None
    Device: Optional[String] = None
    InstanceId: Optional[String] = None
    State: Optional[VolumeAttachmentState] = None
    VolumeId: Optional[String] = None


class VolumeAttachmentList(RootModel[List[VolumeAttachment]]):
    root: List[VolumeAttachment]


class VolumeModification(BaseModel):
    EndTime: Optional[DateTime] = None
    ModificationState: Optional[VolumeModificationState] = None
    OriginalIops: Optional[Integer] = None
    OriginalMultiAttachEnabled: Optional[Boolean] = None
    OriginalSize: Optional[Integer] = None
    OriginalThroughput: Optional[Integer] = None
    OriginalVolumeType: Optional[VolumeType] = None
    Progress: Optional[Long] = None
    StartTime: Optional[DateTime] = None
    StatusMessage: Optional[String] = None
    TargetIops: Optional[Integer] = None
    TargetMultiAttachEnabled: Optional[Boolean] = None
    TargetSize: Optional[Integer] = None
    TargetThroughput: Optional[Integer] = None
    TargetVolumeType: Optional[VolumeType] = None
    VolumeId: Optional[String] = None


class VolumeModificationList(RootModel[List[VolumeModification]]):
    root: List[VolumeModification]


class VolumeStatusDetails(BaseModel):
    Name: Optional[VolumeStatusName] = None
    Status: Optional[String] = None


class VolumeStatusDetailsList(RootModel[List[VolumeStatusDetails]]):
    root: List[VolumeStatusDetails]


class VolumeStatusInfo(BaseModel):
    Details: Optional[VolumeStatusDetailsList] = None
    Status: Optional[VolumeStatusInfoStatus] = None


class VolumeStatusItem(BaseModel):
    Actions: Optional[VolumeStatusActionsList] = None
    AttachmentStatuses: Optional[VolumeStatusAttachmentStatusList] = None
    AvailabilityZone: Optional[String] = None
    Events: Optional[VolumeStatusEventsList] = None
    OutpostArn: Optional[String] = None
    VolumeId: Optional[String] = None
    VolumeStatus: Optional[VolumeStatusInfo] = None


class VolumeStatusList(RootModel[List[VolumeStatusItem]]):
    root: List[VolumeStatusItem]


class VpcCidrBlockState(BaseModel):
    State: Optional[VpcCidrBlockStateCode] = None
    StatusMessage: Optional[String] = None


class VpcClassicLinkIdList(RootModel[List[VpcId]]):
    root: List[VpcId]


class VpcEndpointConnection(BaseModel):
    CreationTimestamp: Optional[MillisecondDateTime] = None
    DnsEntries: Optional[DnsEntrySet] = None
    GatewayLoadBalancerArns: Optional[ValueStringList] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    NetworkLoadBalancerArns: Optional[ValueStringList] = None
    ServiceId: Optional[String] = None
    Tags: Optional[TagList] = None
    VpcEndpointConnectionId: Optional[String] = None
    VpcEndpointId: Optional[String] = None
    VpcEndpointOwner: Optional[String] = None
    VpcEndpointState: Optional[State] = None


class VpcEndpointConnectionSet(RootModel[List[VpcEndpointConnection]]):
    root: List[VpcEndpointConnection]


class VpcIpv6CidrBlockAssociation(BaseModel):
    AssociationId: Optional[String] = None
    Ipv6CidrBlock: Optional[String] = None
    Ipv6CidrBlockState: Optional[VpcCidrBlockState] = None
    Ipv6Pool: Optional[String] = None
    NetworkBorderGroup: Optional[String] = None


class VpcIpv6CidrBlockAssociationSet(RootModel[List[VpcIpv6CidrBlockAssociation]]):
    root: List[VpcIpv6CidrBlockAssociation]


class VpcPeeringConnectionStateReason(BaseModel):
    Code: Optional[VpcPeeringConnectionStateReasonCode] = None
    Message: Optional[String] = None


class VpcPeeringConnectionVpcInfo(BaseModel):
    CidrBlock: Optional[String] = None
    CidrBlockSet_1: Optional[CidrBlockSet] = Field(None, alias='CidrBlockSet')
    Ipv6CidrBlockSet_1: Optional[Ipv6CidrBlockSet] = Field(
        None, alias='Ipv6CidrBlockSet'
    )
    OwnerId: Optional[String] = None
    PeeringOptions: Optional[VpcPeeringConnectionOptionsDescription] = None
    Region: Optional[String] = None
    VpcId: Optional[String] = None


class VpnGateway(BaseModel):
    AmazonSideAsn: Optional[Long] = None
    AvailabilityZone: Optional[String] = None
    State: Optional[VpnState] = None
    Tags: Optional[TagList] = None
    Type: Optional[GatewayType] = None
    VpcAttachments: Optional[VpcAttachmentList] = None
    VpnGatewayId: Optional[String] = None


class VpnGatewayList(RootModel[List[VpnGateway]]):
    root: List[VpnGateway]


class VpnStaticRoute(BaseModel):
    DestinationCidrBlock: Optional[String] = None
    Source: Optional[VpnStaticRouteSource] = None
    State: Optional[VpnState] = None


class VpnStaticRouteList(RootModel[List[VpnStaticRoute]]):
    root: List[VpnStaticRoute]


class VpnTunnelLogOptions(BaseModel):
    CloudWatchLogOptions_1: Optional[CloudWatchLogOptions] = Field(
        None, alias='CloudWatchLogOptions'
    )


class VpnTunnelLogOptionsSpecification(BaseModel):
    CloudWatchLogOptions: Optional[CloudWatchLogOptionsSpecification] = None


class WithdrawByoipCidrResult(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')


class SnapshotTierStatusSet(RootModel[List[SnapshotTierStatus]]):
    root: List[SnapshotTierStatus]


class InstanceTypeSpecification(RootModel[List[ReservationFleetInstanceSpecification]]):
    root: List[ReservationFleetInstanceSpecification]


class DhcpConfiguration1(RootModel[List[NewDhcpConfiguration]]):
    root: List[NewDhcpConfiguration]


class SpotOptions1(BaseModel):
    AllocationStrategy: Optional[SpotAllocationStrategy] = None
    InstanceInterruptionBehavior: Optional[SpotInstanceInterruptionBehavior] = None
    InstancePoolsToUseCount: Optional[Integer] = None
    MaintenanceStrategies: Optional[FleetSpotMaintenanceStrategiesRequest] = None
    MaxTotalPrice: Optional[String] = None
    MinTargetCapacity: Optional[Integer] = None
    SingleAvailabilityZone: Optional[Boolean] = None
    SingleInstanceType: Optional[Boolean] = None


class OnDemandOptions1(BaseModel):
    AllocationStrategy: Optional[FleetOnDemandAllocationStrategy] = None
    CapacityReservationOptions: Optional[CapacityReservationOptionsRequest] = None
    MaxTotalPrice: Optional[String] = None
    MinTargetCapacity: Optional[Integer] = None
    SingleAvailabilityZone: Optional[Boolean] = None
    SingleInstanceType: Optional[Boolean] = None


class TimeRange(RootModel[List[InstanceEventWindowTimeRangeRequest]]):
    root: List[InstanceEventWindowTimeRangeRequest]


class OperatingRegion(RootModel[List[AddIpamOperatingRegion]]):
    root: List[AddIpamOperatingRegion] = Field(..., max_length=50, min_length=0)


class AllocationResourceTag(RootModel[List[RequestIpamResourceTag]]):
    root: List[RequestIpamResourceTag]


class Entry(RootModel[List[AddPrefixListEntry]]):
    root: List[AddPrefixListEntry] = Field(..., max_length=100, min_length=0)


class Ipv6Addresses1(RootModel[List[InstanceIpv6Address]]):
    root: List[InstanceIpv6Address]


class PrivateIpAddresses(RootModel[List[PrivateIpAddressSpecification]]):
    root: List[PrivateIpAddressSpecification]


class Ipv4Prefix1(RootModel[List[Ipv4PrefixSpecificationRequest]]):
    root: List[Ipv4PrefixSpecificationRequest]


class Ipv6Prefix1(RootModel[List[Ipv6PrefixSpecificationRequest]]):
    root: List[Ipv6PrefixSpecificationRequest]


class S3ObjectTag1(RootModel[List[S3ObjectTag]]):
    root: List[S3ObjectTag]


class LoadBalancerOptions(BaseModel):
    LoadBalancerArn_1: Optional[LoadBalancerArn] = Field(None, alias='LoadBalancerArn')
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None
    SubnetIds: Optional[CreateVerifiedAccessEndpointSubnetIdList] = None


class InstanceTagAttribute(BaseModel):
    IncludeAllTagsOfInstance: Optional[Boolean] = None
    InstanceTagKeys: Optional[InstanceTagKeySet] = None


class Filter1(RootModel[List[Filter]]):
    root: List[Filter]


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class DataQuery1(RootModel[List[DataQuery]]):
    root: List[DataQuery]


class IntegrateService(BaseModel):
    AthenaIntegrations: Optional[AthenaIntegrationsSet] = None


class InstanceRequirements1(BaseModel):
    AcceleratorCount: Optional[AcceleratorCountRequest] = None
    AcceleratorManufacturers: Optional[AcceleratorManufacturerSet] = None
    AcceleratorNames: Optional[AcceleratorNameSet] = None
    AcceleratorTotalMemoryMiB: Optional[AcceleratorTotalMemoryMiBRequest] = None
    AcceleratorTypes: Optional[AcceleratorTypeSet] = None
    AllowedInstanceTypes: Optional[AllowedInstanceTypeSet] = None
    BareMetal_1: Optional[BareMetal] = Field(None, alias='BareMetal')
    BaselineEbsBandwidthMbps: Optional[BaselineEbsBandwidthMbpsRequest] = None
    BurstablePerformance_1: Optional[BurstablePerformance] = Field(
        None, alias='BurstablePerformance'
    )
    CpuManufacturers: Optional[CpuManufacturerSet] = None
    ExcludedInstanceTypes: Optional[ExcludedInstanceTypeSet] = None
    InstanceGenerations: Optional[InstanceGenerationSet] = None
    LocalStorage_1: Optional[LocalStorage] = Field(None, alias='LocalStorage')
    LocalStorageTypes: Optional[LocalStorageTypeSet] = None
    MemoryGiBPerVCpu: Optional[MemoryGiBPerVCpuRequest] = None
    MemoryMiB: MemoryMiBRequest
    NetworkBandwidthGbps: Optional[NetworkBandwidthGbpsRequest] = None
    NetworkInterfaceCount: Optional[NetworkInterfaceCountRequest] = None
    OnDemandMaxPricePercentageOverLowestPrice: Optional[Integer] = None
    RequireHibernateSupport: Optional[Boolean] = None
    SpotMaxPricePercentageOverLowestPrice: Optional[Integer] = None
    TotalLocalStorageGB: Optional[TotalLocalStorageGBRequest] = None
    VCpuCount: VCpuCountRangeRequest


class InstanceRequirementsWithMetadata(BaseModel):
    ArchitectureTypes: Optional[ArchitectureTypeSet] = None
    InstanceRequirements: Optional[InstanceRequirementsRequest] = None
    VirtualizationTypes: Optional[VirtualizationTypeSet] = None


class DiskContainer(RootModel[List[ImageDiskContainer]]):
    root: List[ImageDiskContainer]


class LicenseSpecifications(RootModel[List[ImportImageLicenseConfigurationRequest]]):
    root: List[ImportImageLicenseConfigurationRequest]


class LaunchSpecification1(BaseModel):
    AdditionalInfo: Optional[String] = None
    Architecture: Optional[ArchitectureValues] = None
    GroupIds: Optional[SecurityGroupIdStringList] = None
    GroupNames: Optional[SecurityGroupStringList] = None
    InstanceInitiatedShutdownBehavior: Optional[ShutdownBehavior] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Monitoring: Optional[Boolean] = None
    Placement_1: Optional[Placement] = Field(None, alias='Placement')
    PrivateIpAddress: Optional[String] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    UserData_1: Optional[UserData] = Field(None, alias='UserData')


class LaunchPermission1(BaseModel):
    Add: Optional[LaunchPermissionList] = None
    Remove: Optional[LaunchPermissionList] = None


class BlockDeviceMapping2(RootModel[List[InstanceBlockDeviceMappingSpecification]]):
    root: List[InstanceBlockDeviceMappingSpecification]


class CapacityReservationSpecification(BaseModel):
    CapacityReservationPreference_1: Optional[CapacityReservationPreference] = Field(
        None, alias='CapacityReservationPreference'
    )
    CapacityReservationTarget_1: Optional[CapacityReservationTarget] = Field(
        None, alias='CapacityReservationTarget'
    )


class InstanceCreditSpecification1(RootModel[List[InstanceCreditSpecificationRequest]]):
    root: List[InstanceCreditSpecificationRequest]


class AddOperatingRegion(RootModel[List[AddIpamOperatingRegion]]):
    root: List[AddIpamOperatingRegion] = Field(..., max_length=50, min_length=0)


class RemoveOperatingRegion(RootModel[List[RemoveIpamOperatingRegion]]):
    root: List[RemoveIpamOperatingRegion] = Field(..., max_length=50, min_length=0)


class AddAllocationResourceTag(RootModel[List[RequestIpamResourceTag]]):
    root: List[RequestIpamResourceTag]


class RemoveAllocationResourceTag(RootModel[List[RequestIpamResourceTag]]):
    root: List[RequestIpamResourceTag]


class AddEntry(RootModel[List[AddPrefixListEntry]]):
    root: List[AddPrefixListEntry] = Field(..., max_length=100, min_length=0)


class RemoveEntry(RootModel[List[RemovePrefixListEntry]]):
    root: List[RemovePrefixListEntry] = Field(..., max_length=100, min_length=0)


class ReservedInstancesConfigurationSetItemType(
    RootModel[List[ReservedInstancesConfiguration]]
):
    root: List[ReservedInstancesConfiguration]


class SecurityGroupRule1(RootModel[List[SecurityGroupRuleUpdate]]):
    root: List[SecurityGroupRuleUpdate]


class CreateVolumePermission1(BaseModel):
    Add: Optional[CreateVolumePermissionList] = None
    Remove: Optional[CreateVolumePermissionList] = None


class LoadBalancerOptions2(BaseModel):
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None
    SubnetIds: Optional[ModifyVerifiedAccessEndpointSubnetIdList] = None


class PurchaseRequest1(RootModel[List[PurchaseRequest]]):
    root: List[PurchaseRequest] = Field(..., min_length=1)


class InstanceMarketOptions(BaseModel):
    MarketType_1: Optional[MarketType] = Field(None, alias='MarketType')
    SpotOptions: Optional[SpotMarketOptions] = None


class Ipv6Address1(RootModel[List[InstanceIpv6Address]]):
    root: List[InstanceIpv6Address]


class ElasticGpuSpecification1(RootModel[List[ElasticGpuSpecification]]):
    root: List[ElasticGpuSpecification]


class ElasticInferenceAccelerator1(RootModel[List[ElasticInferenceAccelerator]]):
    root: List[ElasticInferenceAccelerator]


class LicenseSpecification(RootModel[List[LicenseConfigurationRequest]]):
    root: List[LicenseConfigurationRequest]


class SecurityGroupRuleDescription1(RootModel[List[SecurityGroupRuleDescription]]):
    root: List[SecurityGroupRuleDescription]


class AcceptAddressTransferResult(BaseModel):
    AddressTransfer_1: Optional[AddressTransfer] = Field(None, alias='AddressTransfer')


class AcceptTransitGatewayMulticastDomainAssociationsResult(BaseModel):
    Associations: Optional[TransitGatewayMulticastDomainAssociations] = None


class AcceptTransitGatewayPeeringAttachmentResult(BaseModel):
    TransitGatewayPeeringAttachment_1: Optional[TransitGatewayPeeringAttachment] = (
        Field(None, alias='TransitGatewayPeeringAttachment')
    )


class AcceptTransitGatewayVpcAttachmentResult(BaseModel):
    TransitGatewayVpcAttachment_1: Optional[TransitGatewayVpcAttachment] = Field(
        None, alias='TransitGatewayVpcAttachment'
    )


class AcceptVpcEndpointConnectionsResult(BaseModel):
    Unsuccessful: Optional[UnsuccessfulItemSet] = None


class AccountAttribute(BaseModel):
    AttributeName: Optional[String] = None
    AttributeValues: Optional[AccountAttributeValueList] = None


class AccountAttributeList(RootModel[List[AccountAttribute]]):
    root: List[AccountAttribute]


class AddPrefixListEntries(RootModel[List[AddPrefixListEntry]]):
    root: List[AddPrefixListEntry] = Field(..., max_length=100, min_length=0)


class AddressAttribute(BaseModel):
    AllocationId_1: Optional[AllocationId] = Field(None, alias='AllocationId')
    PtrRecord: Optional[String] = None
    PtrRecordUpdate: Optional[PtrUpdateStatus] = None
    PublicIp: Optional[PublicIpAddress] = None


class AddressSet(RootModel[List[AddressAttribute]]):
    root: List[AddressAttribute]


class AdvertiseByoipCidrResult(BaseModel):
    ByoipCidr_1: Optional[ByoipCidr] = Field(None, alias='ByoipCidr')


class AllocateHostsResult(BaseModel):
    HostIds: Optional[ResponseHostIdList] = None


class AllocateIpamPoolCidrRequest(BaseModel):
    Cidr: Optional[String] = None
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DisallowedCidrs: Optional[IpamPoolAllocationDisallowedCidrs] = None
    DryRun: Optional[Boolean] = None
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')
    NetmaskLength: Optional[Integer] = None
    PreviewNextCidr: Optional[Boolean] = None


class AllocateIpamPoolCidrResult(BaseModel):
    IpamPoolAllocation_1: Optional[IpamPoolAllocation] = Field(
        None, alias='IpamPoolAllocation'
    )


class ApplySecurityGroupsToClientVpnTargetNetworkRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None
    SecurityGroupIds: ClientVpnSecurityGroupIdSet
    VpcId_1: VpcId = Field(..., alias='VpcId')


class ApplySecurityGroupsToClientVpnTargetNetworkResult(BaseModel):
    SecurityGroupIds: Optional[ClientVpnSecurityGroupIdSet] = None


class AssignIpv6AddressesRequest(BaseModel):
    Ipv6AddressCount: Optional[Integer] = None
    Ipv6Addresses: Optional[Ipv6AddressList] = None
    Ipv6PrefixCount: Optional[Integer] = None
    Ipv6Prefixes: Optional[IpPrefixList] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')


class AssignIpv6AddressesResult(BaseModel):
    AssignedIpv6Addresses: Optional[Ipv6AddressList] = None
    AssignedIpv6Prefixes: Optional[IpPrefixList] = None
    NetworkInterfaceId: Optional[String] = None


class AssignPrivateIpAddressesRequest(BaseModel):
    AllowReassignment: Optional[Boolean] = None
    Ipv4PrefixCount: Optional[Integer] = None
    Ipv4Prefixes: Optional[IpPrefixList] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    PrivateIpAddresses: Optional[PrivateIpAddressStringList] = None
    SecondaryPrivateIpAddressCount: Optional[Integer] = None


class AssignPrivateIpAddressesResult(BaseModel):
    AssignedIpv4Prefixes: Optional[Ipv4PrefixesList] = None
    AssignedPrivateIpAddresses: Optional[AssignedPrivateIpAddressList] = None
    NetworkInterfaceId: Optional[String] = None


class AssignPrivateNatGatewayAddressRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    NatGatewayId_1: NatGatewayId = Field(..., alias='NatGatewayId')
    PrivateIpAddressCount_1: Optional[PrivateIpAddressCount] = Field(
        None, alias='PrivateIpAddressCount'
    )
    PrivateIpAddresses: Optional[IpList] = None


class AssignPrivateNatGatewayAddressResult(BaseModel):
    NatGatewayAddresses: Optional[NatGatewayAddressList] = None
    NatGatewayId_1: Optional[NatGatewayId] = Field(None, alias='NatGatewayId')


class AssociateClientVpnTargetNetworkResult(BaseModel):
    AssociationId: Optional[String] = None
    Status: Optional[AssociationStatus] = None


class AssociateIamInstanceProfileRequest(BaseModel):
    IamInstanceProfile: IamInstanceProfileSpecification
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class AssociateIamInstanceProfileResult(BaseModel):
    IamInstanceProfileAssociation_1: Optional[IamInstanceProfileAssociation] = Field(
        None, alias='IamInstanceProfileAssociation'
    )


class AssociateInstanceEventWindowRequest(BaseModel):
    AssociationTarget: InstanceEventWindowAssociationRequest
    DryRun: Optional[Boolean] = None
    InstanceEventWindowId_1: InstanceEventWindowId = Field(
        ..., alias='InstanceEventWindowId'
    )


class AssociateIpamResourceDiscoveryResult(BaseModel):
    IpamResourceDiscoveryAssociation_1: Optional[IpamResourceDiscoveryAssociation] = (
        Field(None, alias='IpamResourceDiscoveryAssociation')
    )


class AssociateNatGatewayAddressRequest(BaseModel):
    AllocationIds: AllocationIdList
    DryRun: Optional[Boolean] = None
    NatGatewayId_1: NatGatewayId = Field(..., alias='NatGatewayId')
    PrivateIpAddresses: Optional[IpList] = None


class AssociateNatGatewayAddressResult(BaseModel):
    NatGatewayAddresses: Optional[NatGatewayAddressList] = None
    NatGatewayId_1: Optional[NatGatewayId] = Field(None, alias='NatGatewayId')


class AssociateRouteTableResult(BaseModel):
    AssociationId: Optional[String] = None
    AssociationState: Optional[RouteTableAssociationState] = None


class AssociateSubnetCidrBlockResult(BaseModel):
    Ipv6CidrBlockAssociation: Optional[SubnetIpv6CidrBlockAssociation] = None
    SubnetId: Optional[String] = None


class AssociateTransitGatewayMulticastDomainResult(BaseModel):
    Associations: Optional[TransitGatewayMulticastDomainAssociations] = None


class AssociateTransitGatewayPolicyTableResult(BaseModel):
    Association: Optional[TransitGatewayPolicyTableAssociation] = None


class AssociateTransitGatewayRouteTableResult(BaseModel):
    Association: Optional[TransitGatewayAssociation] = None


class AssociateTrunkInterfaceResult(BaseModel):
    ClientToken: Optional[String] = None
    InterfaceAssociation: Optional[TrunkInterfaceAssociation] = None


class AttachClassicLinkVpcRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Groups: GroupIdStringList
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class AttachNetworkInterfaceRequest(BaseModel):
    DeviceIndex: Integer
    DryRun: Optional[Boolean] = None
    EnaSrdSpecification_1: Optional[EnaSrdSpecification] = Field(
        None, alias='EnaSrdSpecification'
    )
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    NetworkCardIndex: Optional[Integer] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')


class AttachVerifiedAccessTrustProviderResult(BaseModel):
    VerifiedAccessInstance_1: Optional[VerifiedAccessInstance] = Field(
        None, alias='VerifiedAccessInstance'
    )
    VerifiedAccessTrustProvider_1: Optional[VerifiedAccessTrustProvider] = Field(
        None, alias='VerifiedAccessTrustProvider'
    )


class AttachmentEnaSrdSpecification(BaseModel):
    EnaSrdEnabled: Optional[Boolean] = None
    EnaSrdUdpSpecification: Optional[AttachmentEnaSrdUdpSpecification] = None


class AuthorizationRule(BaseModel):
    AccessAll: Optional[Boolean] = None
    ClientVpnEndpointId: Optional[String] = None
    Description: Optional[String] = None
    DestinationCidr: Optional[String] = None
    GroupId: Optional[String] = None
    Status: Optional[ClientVpnAuthorizationRuleStatus] = None


class AuthorizationRuleSet(RootModel[List[AuthorizationRule]]):
    root: List[AuthorizationRule]


class AuthorizeClientVpnIngressResult(BaseModel):
    Status: Optional[ClientVpnAuthorizationRuleStatus] = None


class AuthorizeSecurityGroupEgressResult(BaseModel):
    Return: Optional[Boolean] = None
    SecurityGroupRules: Optional[SecurityGroupRuleList] = None


class AuthorizeSecurityGroupIngressResult(BaseModel):
    Return: Optional[Boolean] = None
    SecurityGroupRules: Optional[SecurityGroupRuleList] = None


class AvailabilityZone(BaseModel):
    GroupName: Optional[String] = None
    Messages: Optional[AvailabilityZoneMessageList] = None
    NetworkBorderGroup: Optional[String] = None
    OptInStatus: Optional[AvailabilityZoneOptInStatus] = None
    ParentZoneId: Optional[String] = None
    ParentZoneName: Optional[String] = None
    RegionName: Optional[String] = None
    State: Optional[AvailabilityZoneState] = None
    ZoneId: Optional[String] = None
    ZoneName: Optional[String] = None
    ZoneType: Optional[String] = None


class AvailabilityZoneList(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone]


class AvailableInstanceCapacityList(RootModel[List[InstanceCapacity]]):
    root: List[InstanceCapacity]


class BlockDeviceMapping(BaseModel):
    DeviceName: Optional[String] = None
    Ebs: Optional[EbsBlockDevice] = None
    NoDevice: Optional[String] = None
    VirtualName: Optional[String] = None


class BlockDeviceMappingList(RootModel[List[BlockDeviceMapping]]):
    root: List[BlockDeviceMapping]


class BlockDeviceMappingRequestList(RootModel[List[BlockDeviceMapping]]):
    root: List[BlockDeviceMapping]


class BundleInstanceRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    Storage_1: Storage = Field(..., alias='Storage')


class BundleTask(BaseModel):
    BundleId: Optional[String] = None
    BundleTaskError_1: Optional[BundleTaskError] = Field(None, alias='BundleTaskError')
    InstanceId: Optional[String] = None
    Progress: Optional[String] = None
    StartTime: Optional[DateTime] = None
    State: Optional[BundleTaskState] = None
    Storage_1: Optional[Storage] = Field(None, alias='Storage')
    UpdateTime: Optional[DateTime] = None


class BundleTaskList(RootModel[List[BundleTask]]):
    root: List[BundleTask]


class CancelBundleTaskResult(BaseModel):
    BundleTask_1: Optional[BundleTask] = Field(None, alias='BundleTask')


class CancelCapacityReservationFleetsResult(BaseModel):
    FailedFleetCancellations: Optional[
        FailedCapacityReservationFleetCancellationResultSet
    ] = None
    SuccessfulFleetCancellations: Optional[
        CapacityReservationFleetCancellationStateSet
    ] = None


class CancelReservedInstancesListingResult(BaseModel):
    ReservedInstancesListings: Optional[ReservedInstancesListingList] = None


class CancelSpotFleetRequestsResponse(BaseModel):
    SuccessfulFleetRequests: Optional[CancelSpotFleetRequestsSuccessSet] = None
    UnsuccessfulFleetRequests: Optional[CancelSpotFleetRequestsErrorSet] = None


class CancelSpotInstanceRequestsResult(BaseModel):
    CancelledSpotInstanceRequests: Optional[CancelledSpotInstanceRequestList] = None


class CapacityReservationFleet(BaseModel):
    AllocationStrategy: Optional[String] = None
    CapacityReservationFleetArn: Optional[String] = None
    CapacityReservationFleetId_1: Optional[CapacityReservationFleetId] = Field(
        None, alias='CapacityReservationFleetId'
    )
    CreateTime: Optional[MillisecondDateTime] = None
    EndDate: Optional[MillisecondDateTime] = None
    InstanceMatchCriteria: Optional[FleetInstanceMatchCriteria] = None
    InstanceTypeSpecifications: Optional[FleetCapacityReservationSet] = None
    State: Optional[CapacityReservationFleetState] = None
    Tags: Optional[TagList] = None
    Tenancy: Optional[FleetCapacityReservationTenancy] = None
    TotalFulfilledCapacity: Optional[Double] = None
    TotalTargetCapacity: Optional[Integer] = None


class CapacityReservationFleetSet(RootModel[List[CapacityReservationFleet]]):
    root: List[CapacityReservationFleet]


class CapacityReservationSpecificationResponse(BaseModel):
    CapacityReservationPreference_1: Optional[CapacityReservationPreference] = Field(
        None, alias='CapacityReservationPreference'
    )
    CapacityReservationTarget: Optional[CapacityReservationTargetResponse] = None


class ClassicLinkInstance(BaseModel):
    Groups: Optional[GroupIdentifierList] = None
    InstanceId: Optional[String] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class ClassicLinkInstanceList(RootModel[List[ClassicLinkInstance]]):
    root: List[ClassicLinkInstance]


class ClientConnectResponseOptions(BaseModel):
    Enabled: Optional[Boolean] = None
    LambdaFunctionArn: Optional[String] = None
    Status: Optional[ClientVpnEndpointAttributeStatus] = None


class ClientVpnAuthentication(BaseModel):
    ActiveDirectory: Optional[DirectoryServiceAuthentication] = None
    FederatedAuthentication_1: Optional[FederatedAuthentication] = Field(
        None, alias='FederatedAuthentication'
    )
    MutualAuthentication: Optional[CertificateAuthentication] = None
    Type: Optional[ClientVpnAuthenticationType] = None


class ClientVpnAuthenticationList(RootModel[List[ClientVpnAuthentication]]):
    root: List[ClientVpnAuthentication]


class ClientVpnAuthenticationRequest(BaseModel):
    ActiveDirectory: Optional[DirectoryServiceAuthenticationRequest] = None
    FederatedAuthentication: Optional[FederatedAuthenticationRequest] = None
    MutualAuthentication: Optional[CertificateAuthenticationRequest] = None
    Type: Optional[ClientVpnAuthenticationType] = None


class ClientVpnAuthenticationRequestList(
    RootModel[List[ClientVpnAuthenticationRequest]]
):
    root: List[ClientVpnAuthenticationRequest]


class ClientVpnConnection(BaseModel):
    ClientIp: Optional[String] = None
    ClientVpnEndpointId: Optional[String] = None
    CommonName: Optional[String] = None
    ConnectionEndTime: Optional[String] = None
    ConnectionEstablishedTime: Optional[String] = None
    ConnectionId: Optional[String] = None
    EgressBytes: Optional[String] = None
    EgressPackets: Optional[String] = None
    IngressBytes: Optional[String] = None
    IngressPackets: Optional[String] = None
    PostureComplianceStatuses: Optional[ValueStringList] = None
    Status: Optional[ClientVpnConnectionStatus] = None
    Timestamp: Optional[String] = None
    Username: Optional[String] = None


class ClientVpnConnectionSet(RootModel[List[ClientVpnConnection]]):
    root: List[ClientVpnConnection]


class ClientVpnEndpoint(BaseModel):
    AssociatedTargetNetworks: Optional[AssociatedTargetNetworkSet] = None
    AuthenticationOptions: Optional[ClientVpnAuthenticationList] = None
    ClientCidrBlock: Optional[String] = None
    ClientConnectOptions: Optional[ClientConnectResponseOptions] = None
    ClientLoginBannerOptions: Optional[ClientLoginBannerResponseOptions] = None
    ClientVpnEndpointId: Optional[String] = None
    ConnectionLogOptions: Optional[ConnectionLogResponseOptions] = None
    CreationTime: Optional[String] = None
    DeletionTime: Optional[String] = None
    Description: Optional[String] = None
    DnsName: Optional[String] = None
    DnsServers: Optional[ValueStringList] = None
    SecurityGroupIds: Optional[ClientVpnSecurityGroupIdSet] = None
    SelfServicePortalUrl: Optional[String] = None
    ServerCertificateArn: Optional[String] = None
    SessionTimeoutHours: Optional[Integer] = None
    SplitTunnel: Optional[Boolean] = None
    Status: Optional[ClientVpnEndpointStatus] = None
    Tags: Optional[TagList] = None
    TransportProtocol_1: Optional[TransportProtocol] = Field(
        None, alias='TransportProtocol'
    )
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')
    VpnPort: Optional[Integer] = None
    VpnProtocol_1: Optional[VpnProtocol] = Field(None, alias='VpnProtocol')


class ClientVpnRoute(BaseModel):
    ClientVpnEndpointId: Optional[String] = None
    Description: Optional[String] = None
    DestinationCidr: Optional[String] = None
    Origin: Optional[String] = None
    Status: Optional[ClientVpnRouteStatus] = None
    TargetSubnet: Optional[String] = None
    Type: Optional[String] = None


class ClientVpnRouteSet(RootModel[List[ClientVpnRoute]]):
    root: List[ClientVpnRoute]


class CreateCapacityReservationFleetRequest(BaseModel):
    AllocationStrategy: Optional[String] = None
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    EndDate: Optional[MillisecondDateTime] = None
    InstanceMatchCriteria: Optional[FleetInstanceMatchCriteria] = None
    InstanceTypeSpecifications: ReservationFleetInstanceSpecificationList
    TagSpecifications: Optional[TagSpecificationList] = None
    Tenancy: Optional[FleetCapacityReservationTenancy] = None
    TotalTargetCapacity: Integer


class CreateCapacityReservationFleetResult(BaseModel):
    AllocationStrategy: Optional[String] = None
    CapacityReservationFleetId_1: Optional[CapacityReservationFleetId] = Field(
        None, alias='CapacityReservationFleetId'
    )
    CreateTime: Optional[MillisecondDateTime] = None
    EndDate: Optional[MillisecondDateTime] = None
    FleetCapacityReservations: Optional[FleetCapacityReservationSet] = None
    InstanceMatchCriteria: Optional[FleetInstanceMatchCriteria] = None
    State: Optional[CapacityReservationFleetState] = None
    Tags: Optional[TagList] = None
    Tenancy: Optional[FleetCapacityReservationTenancy] = None
    TotalFulfilledCapacity: Optional[Double] = None
    TotalTargetCapacity: Optional[Integer] = None


class CreateClientVpnEndpointRequest(BaseModel):
    AuthenticationOptions: ClientVpnAuthenticationRequestList
    ClientCidrBlock: String
    ClientConnectOptions_1: Optional[ClientConnectOptions] = Field(
        None, alias='ClientConnectOptions'
    )
    ClientLoginBannerOptions_1: Optional[ClientLoginBannerOptions] = Field(
        None, alias='ClientLoginBannerOptions'
    )
    ClientToken: Optional[String] = None
    ConnectionLogOptions_1: ConnectionLogOptions = Field(
        ..., alias='ConnectionLogOptions'
    )
    Description: Optional[String] = None
    DnsServers: Optional[ValueStringList] = None
    DryRun: Optional[Boolean] = None
    SecurityGroupIds: Optional[ClientVpnSecurityGroupIdSet] = None
    SelfServicePortal_1: Optional[SelfServicePortal] = Field(
        None, alias='SelfServicePortal'
    )
    ServerCertificateArn: String
    SessionTimeoutHours: Optional[Integer] = None
    SplitTunnel: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TransportProtocol_1: Optional[TransportProtocol] = Field(
        None, alias='TransportProtocol'
    )
    VpcId_1: Optional[VpcId] = Field(None, alias='VpcId')
    VpnPort: Optional[Integer] = None


class CreateCustomerGatewayResult(BaseModel):
    CustomerGateway_1: Optional[CustomerGateway] = Field(None, alias='CustomerGateway')


class CreateDhcpOptionsRequest(BaseModel):
    DhcpConfigurations: NewDhcpConfigurationList
    DryRun: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateFlowLogsResult(BaseModel):
    ClientToken: Optional[String] = None
    FlowLogIds: Optional[ValueStringList] = None
    Unsuccessful: Optional[UnsuccessfulItemSet] = None


class CreateFpgaImageRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    InputStorageLocation: StorageLocation
    LogsStorageLocation: Optional[StorageLocation] = None
    Name: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateImageRequest(BaseModel):
    BlockDeviceMappings: Optional[BlockDeviceMappingRequestList] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    Name: String
    NoReboot: Optional[Boolean] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateInstanceEventWindowRequest(BaseModel):
    CronExpression: Optional[InstanceEventWindowCronExpression] = None
    DryRun: Optional[Boolean] = None
    Name: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TimeRanges: Optional[InstanceEventWindowTimeRangeRequestSet] = None


class CreateInstanceExportTaskRequest(BaseModel):
    Description: Optional[String] = None
    ExportToS3Task: ExportToS3TaskSpecification
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    TagSpecifications: Optional[TagSpecificationList] = None
    TargetEnvironment: ExportEnvironment


class CreateIpamPoolRequest(BaseModel):
    AddressFamily_1: AddressFamily = Field(..., alias='AddressFamily')
    AllocationDefaultNetmaskLength: Optional[IpamNetmaskLength] = None
    AllocationMaxNetmaskLength: Optional[IpamNetmaskLength] = None
    AllocationMinNetmaskLength: Optional[IpamNetmaskLength] = None
    AllocationResourceTags: Optional[RequestIpamResourceTagList] = None
    AutoImport: Optional[Boolean] = None
    AwsService: Optional[IpamPoolAwsService] = None
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamScopeId_1: IpamScopeId = Field(..., alias='IpamScopeId')
    Locale: Optional[String] = None
    PublicIpSource: Optional[IpamPoolPublicIpSource] = None
    PubliclyAdvertisable: Optional[Boolean] = None
    SourceIpamPoolId: Optional[IpamPoolId] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateIpamResourceDiscoveryResult(BaseModel):
    IpamResourceDiscovery_1: Optional[IpamResourceDiscovery] = Field(
        None, alias='IpamResourceDiscovery'
    )


class CreateIpamScopeResult(BaseModel):
    IpamScope_1: Optional[IpamScope] = Field(None, alias='IpamScope')


class CreateLaunchTemplateResult(BaseModel):
    LaunchTemplate_1: Optional[LaunchTemplate] = Field(None, alias='LaunchTemplate')
    Warning: Optional[ValidationWarning] = None


class CreateLocalGatewayRouteResult(BaseModel):
    Route: Optional[LocalGatewayRoute] = None


class CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(BaseModel):
    LocalGatewayRouteTableVirtualInterfaceGroupAssociation_1: Optional[
        LocalGatewayRouteTableVirtualInterfaceGroupAssociation
    ] = Field(None, alias='LocalGatewayRouteTableVirtualInterfaceGroupAssociation')


class CreateLocalGatewayRouteTableVpcAssociationResult(BaseModel):
    LocalGatewayRouteTableVpcAssociation_1: Optional[
        LocalGatewayRouteTableVpcAssociation
    ] = Field(None, alias='LocalGatewayRouteTableVpcAssociation')


class CreateManagedPrefixListRequest(BaseModel):
    AddressFamily: String
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Entries: Optional[AddPrefixListEntries] = None
    MaxEntries: Integer
    PrefixListName: String
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateManagedPrefixListResult(BaseModel):
    PrefixList: Optional[ManagedPrefixList] = None


class CreateNatGatewayRequest(BaseModel):
    AllocationId_1: Optional[AllocationId] = Field(None, alias='AllocationId')
    ClientToken: Optional[String] = None
    ConnectivityType_1: Optional[ConnectivityType] = Field(
        None, alias='ConnectivityType'
    )
    DryRun: Optional[Boolean] = None
    PrivateIpAddress: Optional[String] = None
    SecondaryAllocationIds: Optional[AllocationIdList] = None
    SecondaryPrivateIpAddressCount: Optional[PrivateIpAddressCount] = None
    SecondaryPrivateIpAddresses: Optional[IpList] = None
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateNetworkAclEntryRequest(BaseModel):
    CidrBlock: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Egress: Boolean
    IcmpTypeCode_1: Optional[IcmpTypeCode] = Field(None, alias='IcmpTypeCode')
    Ipv6CidrBlock: Optional[String] = None
    NetworkAclId_1: NetworkAclId = Field(..., alias='NetworkAclId')
    PortRange_1: Optional[PortRange] = Field(None, alias='PortRange')
    Protocol: String
    RuleAction_1: RuleAction = Field(..., alias='RuleAction')
    RuleNumber: Integer


class CreateNetworkInsightsPathRequest(BaseModel):
    ClientToken: String
    Destination: Optional[NetworkInsightsResourceId] = None
    DestinationIp: Optional[IpAddress] = None
    DestinationPort: Optional[Port] = None
    DryRun: Optional[Boolean] = None
    FilterAtDestination: Optional[PathRequestFilter] = None
    FilterAtSource: Optional[PathRequestFilter] = None
    Protocol_1: Protocol = Field(..., alias='Protocol')
    Source: NetworkInsightsResourceId
    SourceIp: Optional[IpAddress] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreatePlacementGroupResult(BaseModel):
    PlacementGroup_1: Optional[PlacementGroup] = Field(None, alias='PlacementGroup')


class CreateReplaceRootVolumeTaskResult(BaseModel):
    ReplaceRootVolumeTask_1: Optional[ReplaceRootVolumeTask] = Field(
        None, alias='ReplaceRootVolumeTask'
    )


class CreateReservedInstancesListingResult(BaseModel):
    ReservedInstancesListings: Optional[ReservedInstancesListingList] = None


class CreateSnapshotsRequest(BaseModel):
    CopyTagsFromSource_1: Optional[CopyTagsFromSource] = Field(
        None, alias='CopyTagsFromSource'
    )
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    InstanceSpecification_1: InstanceSpecification = Field(
        ..., alias='InstanceSpecification'
    )
    OutpostArn: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateSnapshotsResult(BaseModel):
    Snapshots: Optional[SnapshotSet] = None


class CreateStoreImageTaskRequest(BaseModel):
    Bucket: String
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')
    S3ObjectTags: Optional[S3ObjectTagList] = None


class CreateSubnetCidrReservationResult(BaseModel):
    SubnetCidrReservation_1: Optional[SubnetCidrReservation] = Field(
        None, alias='SubnetCidrReservation'
    )


class CreateTagsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Resources: ResourceIdList
    Tags: TagList


class CreateTrafficMirrorFilterRuleResult(BaseModel):
    ClientToken: Optional[String] = None
    TrafficMirrorFilterRule_1: Optional[TrafficMirrorFilterRule] = Field(
        None, alias='TrafficMirrorFilterRule'
    )


class CreateTrafficMirrorTargetResult(BaseModel):
    ClientToken: Optional[String] = None
    TrafficMirrorTarget_1: Optional[TrafficMirrorTarget] = Field(
        None, alias='TrafficMirrorTarget'
    )


class CreateTransitGatewayConnectPeerRequest(BaseModel):
    BgpOptions: Optional[TransitGatewayConnectRequestBgpOptions] = None
    DryRun: Optional[Boolean] = None
    InsideCidrBlocks: InsideCidrBlocksStringList
    PeerAddress: String
    TagSpecifications: Optional[TagSpecificationList] = None
    TransitGatewayAddress: Optional[String] = None
    TransitGatewayAttachmentId_1: TransitGatewayAttachmentId = Field(
        ..., alias='TransitGatewayAttachmentId'
    )


class CreateTransitGatewayConnectRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Options: CreateTransitGatewayConnectRequestOptions
    TagSpecifications: Optional[TagSpecificationList] = None
    TransportTransitGatewayAttachmentId: TransitGatewayAttachmentId


class CreateTransitGatewayConnectResult(BaseModel):
    TransitGatewayConnect_1: Optional[TransitGatewayConnect] = Field(
        None, alias='TransitGatewayConnect'
    )


class CreateTransitGatewayMulticastDomainRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Options: Optional[CreateTransitGatewayMulticastDomainRequestOptions] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TransitGatewayId_1: TransitGatewayId = Field(..., alias='TransitGatewayId')


class CreateTransitGatewayMulticastDomainResult(BaseModel):
    TransitGatewayMulticastDomain_1: Optional[TransitGatewayMulticastDomain] = Field(
        None, alias='TransitGatewayMulticastDomain'
    )


class CreateTransitGatewayPeeringAttachmentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Options: Optional[CreateTransitGatewayPeeringAttachmentRequestOptions] = None
    PeerAccountId: String
    PeerRegion: String
    PeerTransitGatewayId: TransitAssociationGatewayId
    TagSpecifications: Optional[TagSpecificationList] = None
    TransitGatewayId_1: TransitGatewayId = Field(..., alias='TransitGatewayId')


class CreateTransitGatewayPeeringAttachmentResult(BaseModel):
    TransitGatewayPeeringAttachment_1: Optional[TransitGatewayPeeringAttachment] = (
        Field(None, alias='TransitGatewayPeeringAttachment')
    )


class CreateTransitGatewayPolicyTableResult(BaseModel):
    TransitGatewayPolicyTable_1: Optional[TransitGatewayPolicyTable] = Field(
        None, alias='TransitGatewayPolicyTable'
    )


class CreateTransitGatewayPrefixListReferenceResult(BaseModel):
    TransitGatewayPrefixListReference_1: Optional[TransitGatewayPrefixListReference] = (
        Field(None, alias='TransitGatewayPrefixListReference')
    )


class CreateTransitGatewayRequest(BaseModel):
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Options: Optional[TransitGatewayRequestOptions] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateTransitGatewayRouteResult(BaseModel):
    Route: Optional[TransitGatewayRoute] = None


class CreateTransitGatewayRouteTableAnnouncementResult(BaseModel):
    TransitGatewayRouteTableAnnouncement_1: Optional[
        TransitGatewayRouteTableAnnouncement
    ] = Field(None, alias='TransitGatewayRouteTableAnnouncement')


class CreateTransitGatewayRouteTableResult(BaseModel):
    TransitGatewayRouteTable_1: Optional[TransitGatewayRouteTable] = Field(
        None, alias='TransitGatewayRouteTable'
    )


class CreateTransitGatewayVpcAttachmentRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Options: Optional[CreateTransitGatewayVpcAttachmentRequestOptions] = None
    SubnetIds: TransitGatewaySubnetIdList
    TagSpecifications: Optional[TagSpecificationList] = None
    TransitGatewayId_1: TransitGatewayId = Field(..., alias='TransitGatewayId')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateTransitGatewayVpcAttachmentResult(BaseModel):
    TransitGatewayVpcAttachment_1: Optional[TransitGatewayVpcAttachment] = Field(
        None, alias='TransitGatewayVpcAttachment'
    )


class CreateVerifiedAccessEndpointLoadBalancerOptions(BaseModel):
    LoadBalancerArn_1: Optional[LoadBalancerArn] = Field(None, alias='LoadBalancerArn')
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None
    SubnetIds: Optional[CreateVerifiedAccessEndpointSubnetIdList] = None


class CreateVerifiedAccessEndpointRequest(BaseModel):
    ApplicationDomain: String
    AttachmentType: VerifiedAccessEndpointAttachmentType
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DomainCertificateArn: CertificateArn
    DryRun: Optional[Boolean] = None
    EndpointDomainPrefix: String
    EndpointType: VerifiedAccessEndpointType
    LoadBalancerOptions: Optional[CreateVerifiedAccessEndpointLoadBalancerOptions] = (
        None
    )
    NetworkInterfaceOptions: Optional[CreateVerifiedAccessEndpointEniOptions] = None
    PolicyDocument: Optional[String] = None
    SecurityGroupIds: Optional[SecurityGroupIdList] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VerifiedAccessGroupId_1: VerifiedAccessGroupId = Field(
        ..., alias='VerifiedAccessGroupId'
    )


class CreateVerifiedAccessInstanceResult(BaseModel):
    VerifiedAccessInstance_1: Optional[VerifiedAccessInstance] = Field(
        None, alias='VerifiedAccessInstance'
    )


class CreateVerifiedAccessTrustProviderResult(BaseModel):
    VerifiedAccessTrustProvider_1: Optional[VerifiedAccessTrustProvider] = Field(
        None, alias='VerifiedAccessTrustProvider'
    )


class CreateVpcEndpointRequest(BaseModel):
    ClientToken: Optional[String] = None
    DnsOptions: Optional[DnsOptionsSpecification] = None
    DryRun: Optional[Boolean] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    PolicyDocument: Optional[String] = None
    PrivateDnsEnabled: Optional[Boolean] = None
    RouteTableIds: Optional[VpcEndpointRouteTableIdList] = None
    SecurityGroupIds: Optional[VpcEndpointSecurityGroupIdList] = None
    ServiceName: String
    SubnetIds: Optional[VpcEndpointSubnetIdList] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    VpcEndpointType_1: Optional[VpcEndpointType] = Field(None, alias='VpcEndpointType')
    VpcId_1: VpcId = Field(..., alias='VpcId')


class CreateVpcEndpointServiceConfigurationResult(BaseModel):
    ClientToken: Optional[String] = None
    ServiceConfiguration_1: Optional[ServiceConfiguration] = Field(
        None, alias='ServiceConfiguration'
    )


class CreateVpnGatewayResult(BaseModel):
    VpnGateway_1: Optional[VpnGateway] = Field(None, alias='VpnGateway')


class DataQueries(RootModel[List[DataQuery]]):
    root: List[DataQuery]


class DataResponse(BaseModel):
    Destination: Optional[String] = None
    Id: Optional[String] = None
    Metric: Optional[MetricType] = None
    MetricPoints_1: Optional[MetricPoints] = Field(None, alias='MetricPoints')
    Period: Optional[PeriodType] = None
    Source: Optional[String] = None
    Statistic: Optional[StatisticType] = None


class DataResponses(RootModel[List[DataResponse]]):
    root: List[DataResponse]


class DeleteFlowLogsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    FlowLogIds: FlowLogIdList


class DeleteFlowLogsResult(BaseModel):
    Unsuccessful: Optional[UnsuccessfulItemSet] = None


class DeleteIpamResourceDiscoveryResult(BaseModel):
    IpamResourceDiscovery_1: Optional[IpamResourceDiscovery] = Field(
        None, alias='IpamResourceDiscovery'
    )


class DeleteIpamScopeResult(BaseModel):
    IpamScope_1: Optional[IpamScope] = Field(None, alias='IpamScope')


class DeleteLaunchTemplateResult(BaseModel):
    LaunchTemplate_1: Optional[LaunchTemplate] = Field(None, alias='LaunchTemplate')


class DeleteLaunchTemplateVersionsResponseErrorItem(BaseModel):
    LaunchTemplateId: Optional[String] = None
    LaunchTemplateName: Optional[String] = None
    ResponseError_1: Optional[ResponseError] = Field(None, alias='ResponseError')
    VersionNumber: Optional[Long] = None


class DeleteLaunchTemplateVersionsResponseErrorSet(
    RootModel[List[DeleteLaunchTemplateVersionsResponseErrorItem]]
):
    root: List[DeleteLaunchTemplateVersionsResponseErrorItem]


class DeleteLaunchTemplateVersionsResult(BaseModel):
    SuccessfullyDeletedLaunchTemplateVersions: Optional[
        DeleteLaunchTemplateVersionsResponseSuccessSet
    ] = None
    UnsuccessfullyDeletedLaunchTemplateVersions: Optional[
        DeleteLaunchTemplateVersionsResponseErrorSet
    ] = None


class DeleteLocalGatewayRouteResult(BaseModel):
    Route: Optional[LocalGatewayRoute] = None


class DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(BaseModel):
    LocalGatewayRouteTableVirtualInterfaceGroupAssociation_1: Optional[
        LocalGatewayRouteTableVirtualInterfaceGroupAssociation
    ] = Field(None, alias='LocalGatewayRouteTableVirtualInterfaceGroupAssociation')


class DeleteLocalGatewayRouteTableVpcAssociationResult(BaseModel):
    LocalGatewayRouteTableVpcAssociation_1: Optional[
        LocalGatewayRouteTableVpcAssociation
    ] = Field(None, alias='LocalGatewayRouteTableVpcAssociation')


class DeleteManagedPrefixListResult(BaseModel):
    PrefixList: Optional[ManagedPrefixList] = None


class DeleteQueuedReservedInstancesResult(BaseModel):
    FailedQueuedPurchaseDeletions: Optional[FailedQueuedPurchaseDeletionSet] = None
    SuccessfulQueuedPurchaseDeletions: Optional[SuccessfulQueuedPurchaseDeletionSet] = (
        None
    )


class DeleteSubnetCidrReservationResult(BaseModel):
    DeletedSubnetCidrReservation: Optional[SubnetCidrReservation] = None


class DeleteTagsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Resources: ResourceIdList
    Tags: Optional[TagList] = None


class DeleteTransitGatewayConnectResult(BaseModel):
    TransitGatewayConnect_1: Optional[TransitGatewayConnect] = Field(
        None, alias='TransitGatewayConnect'
    )


class DeleteTransitGatewayMulticastDomainResult(BaseModel):
    TransitGatewayMulticastDomain_1: Optional[TransitGatewayMulticastDomain] = Field(
        None, alias='TransitGatewayMulticastDomain'
    )


class DeleteTransitGatewayPeeringAttachmentResult(BaseModel):
    TransitGatewayPeeringAttachment_1: Optional[TransitGatewayPeeringAttachment] = (
        Field(None, alias='TransitGatewayPeeringAttachment')
    )


class DeleteTransitGatewayPolicyTableResult(BaseModel):
    TransitGatewayPolicyTable_1: Optional[TransitGatewayPolicyTable] = Field(
        None, alias='TransitGatewayPolicyTable'
    )


class DeleteTransitGatewayPrefixListReferenceResult(BaseModel):
    TransitGatewayPrefixListReference_1: Optional[TransitGatewayPrefixListReference] = (
        Field(None, alias='TransitGatewayPrefixListReference')
    )


class DeleteTransitGatewayRouteResult(BaseModel):
    Route: Optional[TransitGatewayRoute] = None


class DeleteTransitGatewayRouteTableAnnouncementResult(BaseModel):
    TransitGatewayRouteTableAnnouncement_1: Optional[
        TransitGatewayRouteTableAnnouncement
    ] = Field(None, alias='TransitGatewayRouteTableAnnouncement')


class DeleteTransitGatewayRouteTableResult(BaseModel):
    TransitGatewayRouteTable_1: Optional[TransitGatewayRouteTable] = Field(
        None, alias='TransitGatewayRouteTable'
    )


class DeleteTransitGatewayVpcAttachmentResult(BaseModel):
    TransitGatewayVpcAttachment_1: Optional[TransitGatewayVpcAttachment] = Field(
        None, alias='TransitGatewayVpcAttachment'
    )


class DeleteVerifiedAccessInstanceResult(BaseModel):
    VerifiedAccessInstance_1: Optional[VerifiedAccessInstance] = Field(
        None, alias='VerifiedAccessInstance'
    )


class DeleteVerifiedAccessTrustProviderResult(BaseModel):
    VerifiedAccessTrustProvider_1: Optional[VerifiedAccessTrustProvider] = Field(
        None, alias='VerifiedAccessTrustProvider'
    )


class DeleteVpcEndpointConnectionNotificationsResult(BaseModel):
    Unsuccessful: Optional[UnsuccessfulItemSet] = None


class DeleteVpcEndpointServiceConfigurationsResult(BaseModel):
    Unsuccessful: Optional[UnsuccessfulItemSet] = None


class DeleteVpcEndpointsResult(BaseModel):
    Unsuccessful: Optional[UnsuccessfulItemSet] = None


class DeprovisionPublicIpv4PoolCidrResult(BaseModel):
    DeprovisionedAddresses: Optional[DeprovisionedAddressSet] = None
    PoolId: Optional[Ipv4PoolEc2Id] = None


class DeregisterInstanceEventNotificationAttributesResult(BaseModel):
    InstanceTagAttribute: Optional[InstanceTagNotificationAttribute] = None


class DeregisterInstanceTagAttributeRequest(BaseModel):
    IncludeAllTagsOfInstance: Optional[Boolean] = None
    InstanceTagKeys: Optional[InstanceTagKeySet] = None


class DeregisterTransitGatewayMulticastGroupMembersResult(BaseModel):
    DeregisteredMulticastGroupMembers: Optional[
        TransitGatewayMulticastDeregisteredGroupMembers
    ] = None


class DeregisterTransitGatewayMulticastGroupSourcesResult(BaseModel):
    DeregisteredMulticastGroupSources: Optional[
        TransitGatewayMulticastDeregisteredGroupSources
    ] = None


class DescribeAccountAttributesResult(BaseModel):
    AccountAttributes: Optional[AccountAttributeList] = None


class DescribeAddressesAttributeResult(BaseModel):
    Addresses: Optional[AddressSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeAddressesRequest(BaseModel):
    AllocationIds: Optional[AllocationIdList] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    PublicIps: Optional[PublicIpStringList] = None


class DescribeAggregateIdFormatResult(BaseModel):
    Statuses: Optional[IdFormatList] = None
    UseLongIdsAggregated: Optional[Boolean] = None


class DescribeAvailabilityZonesRequest(BaseModel):
    AllAvailabilityZones: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    ZoneIds: Optional[ZoneIdStringList] = None
    ZoneNames: Optional[ZoneNameStringList] = None


class DescribeAvailabilityZonesResult(BaseModel):
    AvailabilityZones: Optional[AvailabilityZoneList] = None


class DescribeAwsNetworkPerformanceMetricSubscriptionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[MaxResultsParam] = None
    NextToken: Optional[String] = None


class DescribeBundleTasksRequest(BaseModel):
    BundleIds: Optional[BundleIdStringList] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None


class DescribeBundleTasksResult(BaseModel):
    BundleTasks: Optional[BundleTaskList] = None


class DescribeCapacityReservationFleetsRequest(BaseModel):
    CapacityReservationFleetIds: Optional[CapacityReservationFleetIdSet] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeCapacityReservationFleetsMaxResults] = None
    NextToken: Optional[String] = None


class DescribeCapacityReservationFleetsResult(BaseModel):
    CapacityReservationFleets: Optional[CapacityReservationFleetSet] = None
    NextToken: Optional[String] = None


class DescribeCapacityReservationsRequest(BaseModel):
    CapacityReservationIds: Optional[CapacityReservationIdSet] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeCapacityReservationsMaxResults] = None
    NextToken: Optional[String] = None


class DescribeCarrierGatewaysRequest(BaseModel):
    CarrierGatewayIds: Optional[CarrierGatewayIdSet] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[CarrierGatewayMaxResults] = None
    NextToken: Optional[String] = None


class DescribeClassicLinkInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    InstanceIds: Optional[InstanceIdStringList] = None
    MaxResults: Optional[DescribeClassicLinkInstancesMaxResults] = None
    NextToken: Optional[String] = None


class DescribeClassicLinkInstancesResult(BaseModel):
    Instances: Optional[ClassicLinkInstanceList] = None
    NextToken: Optional[String] = None


class DescribeClientVpnAuthorizationRulesRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeClientVpnAuthorizationRulesMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClientVpnAuthorizationRulesResult(BaseModel):
    AuthorizationRules: Optional[AuthorizationRuleSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClientVpnConnectionsRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeClientVpnConnectionsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClientVpnConnectionsResult(BaseModel):
    Connections: Optional[ClientVpnConnectionSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClientVpnEndpointsRequest(BaseModel):
    ClientVpnEndpointIds: Optional[ClientVpnEndpointIdList] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeClientVpnEndpointMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClientVpnRoutesRequest(BaseModel):
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeClientVpnRoutesMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClientVpnRoutesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Routes: Optional[ClientVpnRouteSet] = None


class DescribeClientVpnTargetNetworksRequest(BaseModel):
    AssociationIds: Optional[ValueStringList] = None
    ClientVpnEndpointId_1: ClientVpnEndpointId = Field(..., alias='ClientVpnEndpointId')
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeClientVpnTargetNetworksMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeClientVpnTargetNetworksResult(BaseModel):
    ClientVpnTargetNetworks: Optional[TargetNetworkSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeCoipPoolsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[CoipPoolMaxResults] = None
    NextToken: Optional[String] = None
    PoolIds: Optional[CoipPoolIdSet] = None


class DescribeCustomerGatewaysRequest(BaseModel):
    CustomerGatewayIds: Optional[CustomerGatewayIdStringList] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None


class DescribeDhcpOptionsRequest(BaseModel):
    DhcpOptionsIds: Optional[DhcpOptionsIdStringList] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeDhcpOptionsMaxResults] = None
    NextToken: Optional[String] = None


class DescribeEgressOnlyInternetGatewaysRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    EgressOnlyInternetGatewayIds: Optional[EgressOnlyInternetGatewayIdList] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeEgressOnlyInternetGatewaysMaxResults] = None
    NextToken: Optional[String] = None


class DescribeElasticGpusRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ElasticGpuIds: Optional[ElasticGpuIdSet] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeElasticGpusMaxResults] = None
    NextToken: Optional[String] = None


class DescribeExportImageTasksRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ExportImageTaskIds: Optional[ExportImageTaskIdList] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeExportImageTasksMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeExportTasksRequest(BaseModel):
    ExportTaskIds: Optional[ExportTaskIdStringList] = None
    Filters: Optional[FilterList] = None


class DescribeFastLaunchImagesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    ImageIds: Optional[FastLaunchImageIdList] = None
    MaxResults: Optional[DescribeFastLaunchImagesRequestMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFastLaunchImagesSuccessItem(BaseModel):
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    LaunchTemplate: Optional[FastLaunchLaunchTemplateSpecificationResponse] = None
    MaxParallelLaunches: Optional[Integer] = None
    OwnerId: Optional[String] = None
    ResourceType: Optional[FastLaunchResourceType] = None
    SnapshotConfiguration: Optional[FastLaunchSnapshotConfigurationResponse] = None
    State: Optional[FastLaunchStateCode] = None
    StateTransitionReason: Optional[String] = None
    StateTransitionTime: Optional[MillisecondDateTime] = None


class DescribeFastLaunchImagesSuccessSet(
    RootModel[List[DescribeFastLaunchImagesSuccessItem]]
):
    root: List[DescribeFastLaunchImagesSuccessItem]


class DescribeFastSnapshotRestoresRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeFastSnapshotRestoresMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFleetHistoryResult(BaseModel):
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    HistoryRecords: Optional[HistoryRecordSet] = None
    LastEvaluatedTime: Optional[DateTime] = None
    NextToken: Optional[String] = None
    StartTime: Optional[DateTime] = None


class DescribeFleetInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    FleetId_1: FleetId = Field(..., alias='FleetId')
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeFleetsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    FleetIds: Optional[FleetIdSet] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeFlowLogsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filter: Optional[FilterList] = None
    FlowLogIds: Optional[FlowLogIdList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeFlowLogsResult(BaseModel):
    FlowLogs: Optional[FlowLogSet] = None
    NextToken: Optional[String] = None


class DescribeFpgaImagesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    FpgaImageIds: Optional[FpgaImageIdList] = None
    MaxResults: Optional[DescribeFpgaImagesMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Owners: Optional[OwnerStringList] = None


class DescribeHostReservationOfferingsRequest(BaseModel):
    Filter: Optional[FilterList] = None
    MaxDuration: Optional[Integer] = None
    MaxResults: Optional[DescribeHostReservationsMaxResults] = None
    MinDuration: Optional[Integer] = None
    NextToken: Optional[String] = None
    OfferingId_1: Optional[OfferingId] = Field(None, alias='OfferingId')


class DescribeHostReservationOfferingsResult(BaseModel):
    NextToken: Optional[String] = None
    OfferingSet: Optional[HostOfferingSet] = None


class DescribeHostReservationsRequest(BaseModel):
    Filter: Optional[FilterList] = None
    HostReservationIdSet_1: Optional[HostReservationIdSet] = Field(
        None, alias='HostReservationIdSet'
    )
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeHostsRequest(BaseModel):
    Filter: Optional[FilterList] = None
    HostIds: Optional[RequestHostIdList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeIamInstanceProfileAssociationsRequest(BaseModel):
    AssociationIds: Optional[AssociationIdList] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeIamInstanceProfileAssociationsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIamInstanceProfileAssociationsResult(BaseModel):
    IamInstanceProfileAssociations: Optional[IamInstanceProfileAssociationSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIdFormatResult(BaseModel):
    Statuses: Optional[IdFormatList] = None


class DescribeIdentityIdFormatResult(BaseModel):
    Statuses: Optional[IdFormatList] = None


class DescribeImagesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ExecutableUsers: Optional[ExecutableByStringList] = None
    Filters: Optional[FilterList] = None
    ImageIds: Optional[ImageIdStringList] = None
    IncludeDeprecated: Optional[Boolean] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    Owners: Optional[OwnerStringList] = None


class DescribeImportImageTasksRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    ImportTaskIds: Optional[ImportTaskIdList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeImportSnapshotTasksRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    ImportTaskIds: Optional[ImportSnapshotTaskIdList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeInstanceCreditSpecificationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    InstanceIds: Optional[InstanceIdStringList] = None
    MaxResults: Optional[DescribeInstanceCreditSpecificationsMaxResults] = None
    NextToken: Optional[String] = None


class DescribeInstanceCreditSpecificationsResult(BaseModel):
    InstanceCreditSpecifications: Optional[InstanceCreditSpecificationList] = None
    NextToken: Optional[String] = None


class DescribeInstanceEventNotificationAttributesResult(BaseModel):
    InstanceTagAttribute: Optional[InstanceTagNotificationAttribute] = None


class DescribeInstanceEventWindowsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    InstanceEventWindowIds: Optional[InstanceEventWindowIdSet] = None
    MaxResults: Optional[ResultRange] = None
    NextToken: Optional[String] = None


class DescribeInstanceStatusRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IncludeAllInstances: Optional[Boolean] = None
    InstanceIds: Optional[InstanceIdStringList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeInstanceTypeOfferingsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LocationType_1: Optional[LocationType] = Field(None, alias='LocationType')
    MaxResults: Optional[DITOMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstanceTypeOfferingsResult(BaseModel):
    InstanceTypeOfferings: Optional[InstanceTypeOfferingsList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstanceTypesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    InstanceTypes: Optional[RequestInstanceTypeList] = None
    MaxResults: Optional[DITMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    InstanceIds: Optional[InstanceIdStringList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeInternetGatewaysRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    InternetGatewayIds: Optional[InternetGatewayIdList] = None
    MaxResults: Optional[DescribeInternetGatewaysMaxResults] = None
    NextToken: Optional[String] = None


class DescribeIpamPoolsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamPoolIds: Optional[ValueStringList] = None
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpamResourceDiscoveriesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamResourceDiscoveryIds: Optional[ValueStringList] = None
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpamResourceDiscoveriesResult(BaseModel):
    IpamResourceDiscoveries: Optional[IpamResourceDiscoverySet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpamResourceDiscoveryAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamResourceDiscoveryAssociationIds: Optional[ValueStringList] = None
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpamResourceDiscoveryAssociationsResult(BaseModel):
    IpamResourceDiscoveryAssociations: Optional[IpamResourceDiscoveryAssociationSet] = (
        None
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpamScopesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamScopeIds: Optional[ValueStringList] = None
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpamScopesResult(BaseModel):
    IpamScopes: Optional[IpamScopeSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpamsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamIds: Optional[ValueStringList] = None
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpv6PoolsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Ipv6PoolMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PoolIds: Optional[Ipv6PoolIdList] = None


class DescribeKeyPairsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IncludePublicKey: Optional[Boolean] = None
    KeyNames: Optional[KeyNameStringList] = None
    KeyPairIds: Optional[KeyPairIdStringList] = None


class DescribeKeyPairsResult(BaseModel):
    KeyPairs: Optional[KeyPairList] = None


class DescribeLaunchTemplateVersionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    MaxResults: Optional[Integer] = None
    MaxVersion: Optional[String] = None
    MinVersion: Optional[String] = None
    NextToken: Optional[String] = None
    ResolveAlias: Optional[Boolean] = None
    Versions: Optional[VersionStringList] = None


class DescribeLaunchTemplatesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LaunchTemplateIds: Optional[LaunchTemplateIdStringList] = None
    LaunchTemplateNames: Optional[LaunchTemplateNameStringList] = None
    MaxResults: Optional[DescribeLaunchTemplatesMaxResults] = None
    NextToken: Optional[String] = None


class DescribeLaunchTemplatesResult(BaseModel):
    LaunchTemplates: Optional[LaunchTemplateSet] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: Optional[
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet
    ] = None
    MaxResults: Optional[LocalGatewayMaxResults] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(BaseModel):
    LocalGatewayRouteTableVirtualInterfaceGroupAssociations: Optional[
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet
    ] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayRouteTableVpcAssociationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LocalGatewayRouteTableVpcAssociationIds: Optional[
        LocalGatewayRouteTableVpcAssociationIdSet
    ] = None
    MaxResults: Optional[LocalGatewayMaxResults] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayRouteTableVpcAssociationsResult(BaseModel):
    LocalGatewayRouteTableVpcAssociations: Optional[
        LocalGatewayRouteTableVpcAssociationSet
    ] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayRouteTablesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LocalGatewayRouteTableIds: Optional[LocalGatewayRouteTableIdSet] = None
    MaxResults: Optional[LocalGatewayMaxResults] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayVirtualInterfaceGroupsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LocalGatewayVirtualInterfaceGroupIds: Optional[
        LocalGatewayVirtualInterfaceGroupIdSet
    ] = None
    MaxResults: Optional[LocalGatewayMaxResults] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayVirtualInterfaceGroupsResult(BaseModel):
    LocalGatewayVirtualInterfaceGroups: Optional[
        LocalGatewayVirtualInterfaceGroupSet
    ] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayVirtualInterfacesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LocalGatewayVirtualInterfaceIds: Optional[LocalGatewayVirtualInterfaceIdSet] = None
    MaxResults: Optional[LocalGatewayMaxResults] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewayVirtualInterfacesResult(BaseModel):
    LocalGatewayVirtualInterfaces: Optional[LocalGatewayVirtualInterfaceSet] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewaysRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    LocalGatewayIds: Optional[LocalGatewayIdSet] = None
    MaxResults: Optional[LocalGatewayMaxResults] = None
    NextToken: Optional[String] = None


class DescribeLocalGatewaysResult(BaseModel):
    LocalGateways: Optional[LocalGatewaySet] = None
    NextToken: Optional[String] = None


class DescribeManagedPrefixListsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[PrefixListMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PrefixListIds: Optional[ValueStringList] = None


class DescribeManagedPrefixListsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PrefixLists: Optional[ManagedPrefixListSet] = None


class DescribeMovingAddressesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeMovingAddressesMaxResults] = None
    NextToken: Optional[String] = None
    PublicIps: Optional[ValueStringList] = None


class DescribeMovingAddressesResult(BaseModel):
    MovingAddressStatuses: Optional[MovingAddressStatusSet] = None
    NextToken: Optional[String] = None


class DescribeNatGatewaysRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filter: Optional[FilterList] = None
    MaxResults: Optional[DescribeNatGatewaysMaxResults] = None
    NatGatewayIds: Optional[NatGatewayIdStringList] = None
    NextToken: Optional[String] = None


class DescribeNetworkAclsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeNetworkAclsMaxResults] = None
    NetworkAclIds: Optional[NetworkAclIdStringList] = None
    NextToken: Optional[String] = None


class DescribeNetworkInsightsAccessScopeAnalysesRequest(BaseModel):
    AnalysisStartTimeBegin: Optional[MillisecondDateTime] = None
    AnalysisStartTimeEnd: Optional[MillisecondDateTime] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[NetworkInsightsMaxResults] = None
    NetworkInsightsAccessScopeAnalysisIds: Optional[
        NetworkInsightsAccessScopeAnalysisIdList
    ] = None
    NetworkInsightsAccessScopeId_1: Optional[NetworkInsightsAccessScopeId] = Field(
        None, alias='NetworkInsightsAccessScopeId'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeNetworkInsightsAccessScopeAnalysesResult(BaseModel):
    NetworkInsightsAccessScopeAnalyses: Optional[
        NetworkInsightsAccessScopeAnalysisList
    ] = None
    NextToken: Optional[String] = None


class DescribeNetworkInsightsAccessScopesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[NetworkInsightsMaxResults] = None
    NetworkInsightsAccessScopeIds: Optional[NetworkInsightsAccessScopeIdList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeNetworkInsightsAccessScopesResult(BaseModel):
    NetworkInsightsAccessScopes: Optional[NetworkInsightsAccessScopeList] = None
    NextToken: Optional[String] = None


class DescribeNetworkInsightsAnalysesRequest(BaseModel):
    AnalysisEndTime: Optional[MillisecondDateTime] = None
    AnalysisStartTime: Optional[MillisecondDateTime] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[NetworkInsightsMaxResults] = None
    NetworkInsightsAnalysisIds: Optional[NetworkInsightsAnalysisIdList] = None
    NetworkInsightsPathId_1: Optional[NetworkInsightsPathId] = Field(
        None, alias='NetworkInsightsPathId'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeNetworkInsightsPathsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[NetworkInsightsMaxResults] = None
    NetworkInsightsPathIds: Optional[NetworkInsightsPathIdList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeNetworkInterfacePermissionsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeNetworkInterfacePermissionsMaxResults] = None
    NetworkInterfacePermissionIds: Optional[NetworkInterfacePermissionIdList] = None
    NextToken: Optional[String] = None


class DescribeNetworkInterfacesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeNetworkInterfacesMaxResults] = None
    NetworkInterfaceIds: Optional[NetworkInterfaceIdList] = None
    NextToken: Optional[String] = None


class DescribePlacementGroupsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    GroupIds: Optional[PlacementGroupIdStringList] = None
    GroupNames: Optional[PlacementGroupStringList] = None


class DescribePlacementGroupsResult(BaseModel):
    PlacementGroups: Optional[PlacementGroupList] = None


class DescribePrefixListsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    PrefixListIds: Optional[PrefixListResourceIdStringList] = None


class DescribePrefixListsResult(BaseModel):
    NextToken: Optional[String] = None
    PrefixLists: Optional[PrefixListSet] = None


class DescribePrincipalIdFormatRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    MaxResults: Optional[DescribePrincipalIdFormatMaxResults] = None
    NextToken: Optional[String] = None
    Resources: Optional[ResourceList] = None


class DescribePrincipalIdFormatResult(BaseModel):
    NextToken: Optional[String] = None
    Principals: Optional[PrincipalIdFormatList] = None


class DescribePublicIpv4PoolsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults: Optional[PoolMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PoolIds: Optional[PublicIpv4PoolIdStringList] = None


class DescribeRegionsRequest(BaseModel):
    AllRegions: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    RegionNames: Optional[RegionNameStringList] = None


class DescribeRegionsResult(BaseModel):
    Regions: Optional[RegionList] = None


class DescribeReplaceRootVolumeTasksRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeReplaceRootVolumeTasksMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ReplaceRootVolumeTaskIds_1: Optional[ReplaceRootVolumeTaskIds] = Field(
        None, alias='ReplaceRootVolumeTaskIds'
    )


class DescribeReplaceRootVolumeTasksResult(BaseModel):
    NextToken: Optional[String] = None
    ReplaceRootVolumeTasks_1: Optional[ReplaceRootVolumeTasks] = Field(
        None, alias='ReplaceRootVolumeTasks'
    )


class DescribeReservedInstancesListingsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    ReservedInstancesId: Optional[ReservationId] = None
    ReservedInstancesListingId_1: Optional[ReservedInstancesListingId] = Field(
        None, alias='ReservedInstancesListingId'
    )


class DescribeReservedInstancesListingsResult(BaseModel):
    ReservedInstancesListings: Optional[ReservedInstancesListingList] = None


class DescribeReservedInstancesModificationsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    NextToken: Optional[String] = None
    ReservedInstancesModificationIds: Optional[
        ReservedInstancesModificationIdStringList
    ] = None


class DescribeReservedInstancesOfferingsRequest(BaseModel):
    AvailabilityZone: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IncludeMarketplace: Optional[Boolean] = None
    InstanceTenancy: Optional[Tenancy] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    MaxDuration: Optional[Long] = None
    MaxInstanceCount: Optional[Integer] = None
    MaxResults: Optional[Integer] = None
    MinDuration: Optional[Long] = None
    NextToken: Optional[String] = None
    OfferingClass: Optional[OfferingClassType] = None
    OfferingType: Optional[OfferingTypeValues] = None
    ProductDescription: Optional[RIProductDescription] = None
    ReservedInstancesOfferingIds: Optional[ReservedInstancesOfferingIdStringList] = None


class DescribeReservedInstancesOfferingsResult(BaseModel):
    NextToken: Optional[String] = None
    ReservedInstancesOfferings: Optional[ReservedInstancesOfferingList] = None


class DescribeReservedInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    OfferingClass: Optional[OfferingClassType] = None
    OfferingType: Optional[OfferingTypeValues] = None
    ReservedInstancesIds: Optional[ReservedInstancesIdStringList] = None


class DescribeReservedInstancesResult(BaseModel):
    ReservedInstances: Optional[ReservedInstancesList] = None


class DescribeRouteTablesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeRouteTablesMaxResults] = None
    NextToken: Optional[String] = None
    RouteTableIds: Optional[RouteTableIdStringList] = None


class DescribeScheduledInstanceAvailabilityRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    FirstSlotStartTimeRange: SlotDateTimeRangeRequest
    MaxResults: Optional[DescribeScheduledInstanceAvailabilityMaxResults] = None
    MaxSlotDurationInHours: Optional[Integer] = None
    MinSlotDurationInHours: Optional[Integer] = None
    NextToken: Optional[String] = None
    Recurrence: ScheduledInstanceRecurrenceRequest


class DescribeScheduledInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    ScheduledInstanceIds: Optional[ScheduledInstanceIdRequestSet] = None
    SlotStartTimeRange: Optional[SlotStartTimeRangeRequest] = None


class DescribeSecurityGroupReferencesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupId: GroupIds


class DescribeSecurityGroupReferencesResult(BaseModel):
    SecurityGroupReferenceSet: Optional[SecurityGroupReferences] = None


class DescribeSecurityGroupRulesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeSecurityGroupRulesMaxResults] = None
    NextToken: Optional[String] = None
    SecurityGroupRuleIds: Optional[SecurityGroupRuleIdList] = None


class DescribeSecurityGroupRulesResult(BaseModel):
    NextToken: Optional[String] = None
    SecurityGroupRules: Optional[SecurityGroupRuleList] = None


class DescribeSecurityGroupsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    GroupIds: Optional[GroupIdStringList] = None
    GroupNames: Optional[GroupNameStringList] = None
    MaxResults: Optional[DescribeSecurityGroupsMaxResults] = None
    NextToken: Optional[String] = None


class DescribeSnapshotAttributeResult(BaseModel):
    CreateVolumePermissions: Optional[CreateVolumePermissionList] = None
    ProductCodes: Optional[ProductCodeList] = None
    SnapshotId: Optional[String] = None


class DescribeSnapshotTierStatusRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeSnapshotTierStatusMaxResults] = None
    NextToken: Optional[String] = None


class DescribeSnapshotTierStatusResult(BaseModel):
    NextToken: Optional[String] = None
    SnapshotTierStatuses: Optional[SnapshotTierStatusSet] = None


class DescribeSnapshotsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    OwnerIds: Optional[OwnerStringList] = None
    RestorableByUserIds: Optional[RestorableByStringList] = None
    SnapshotIds: Optional[SnapshotIdStringList] = None


class DescribeSnapshotsResult(BaseModel):
    NextToken: Optional[String] = None
    Snapshots: Optional[SnapshotList] = None


class DescribeSpotFleetRequestHistoryResponse(BaseModel):
    HistoryRecords_1: Optional[HistoryRecords] = Field(None, alias='HistoryRecords')
    LastEvaluatedTime: Optional[DateTime] = None
    NextToken: Optional[String] = None
    SpotFleetRequestId: Optional[String] = None
    StartTime: Optional[DateTime] = None


class DescribeSpotInstanceRequestsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    SpotInstanceRequestIds: Optional[SpotInstanceRequestIdList] = None


class DescribeSpotPriceHistoryRequest(BaseModel):
    AvailabilityZone: Optional[String] = None
    DryRun: Optional[Boolean] = None
    EndTime: Optional[DateTime] = None
    Filters: Optional[FilterList] = None
    InstanceTypes: Optional[InstanceTypeList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    ProductDescriptions: Optional[ProductDescriptionList] = None
    StartTime: Optional[DateTime] = None


class DescribeSpotPriceHistoryResult(BaseModel):
    NextToken: Optional[String] = None
    SpotPriceHistory: Optional[SpotPriceHistoryList] = None


class DescribeStaleSecurityGroupsResult(BaseModel):
    NextToken: Optional[String] = None
    StaleSecurityGroupSet_1: Optional[StaleSecurityGroupSet] = Field(
        None, alias='StaleSecurityGroupSet'
    )


class DescribeStoreImageTasksRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    ImageIds: Optional[ImageIdList] = None
    MaxResults: Optional[DescribeStoreImageTasksRequestMaxResults] = None
    NextToken: Optional[String] = None


class DescribeStoreImageTasksResult(BaseModel):
    NextToken: Optional[String] = None
    StoreImageTaskResults: Optional[StoreImageTaskResultSet] = None


class DescribeSubnetsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeSubnetsMaxResults] = None
    NextToken: Optional[String] = None
    SubnetIds: Optional[SubnetIdStringList] = None


class DescribeTagsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeTrafficMirrorFiltersRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TrafficMirroringMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TrafficMirrorFilterIds: Optional[TrafficMirrorFilterIdList] = None


class DescribeTrafficMirrorSessionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TrafficMirroringMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TrafficMirrorSessionIds: Optional[TrafficMirrorSessionIdList] = None


class DescribeTrafficMirrorTargetsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TrafficMirroringMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TrafficMirrorTargetIds: Optional[TrafficMirrorTargetIdList] = None


class DescribeTrafficMirrorTargetsResult(BaseModel):
    NextToken: Optional[String] = None
    TrafficMirrorTargets: Optional[TrafficMirrorTargetSet] = None


class DescribeTransitGatewayAttachmentsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayAttachmentIds: Optional[TransitGatewayAttachmentIdStringList] = None


class DescribeTransitGatewayAttachmentsResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayAttachments: Optional[TransitGatewayAttachmentList] = None


class DescribeTransitGatewayConnectPeersRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayConnectPeerIds: Optional[TransitGatewayConnectPeerIdStringList] = None


class DescribeTransitGatewayConnectsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayAttachmentIds: Optional[TransitGatewayAttachmentIdStringList] = None


class DescribeTransitGatewayConnectsResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayConnects: Optional[TransitGatewayConnectList] = None


class DescribeTransitGatewayMulticastDomainsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayMulticastDomainIds: Optional[
        TransitGatewayMulticastDomainIdStringList
    ] = None


class DescribeTransitGatewayMulticastDomainsResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayMulticastDomains: Optional[TransitGatewayMulticastDomainList] = None


class DescribeTransitGatewayPeeringAttachmentsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayAttachmentIds: Optional[TransitGatewayAttachmentIdStringList] = None


class DescribeTransitGatewayPeeringAttachmentsResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayPeeringAttachments: Optional[TransitGatewayPeeringAttachmentList] = (
        None
    )


class DescribeTransitGatewayPolicyTablesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayPolicyTableIds: Optional[TransitGatewayPolicyTableIdStringList] = None


class DescribeTransitGatewayPolicyTablesResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayPolicyTables: Optional[TransitGatewayPolicyTableList] = None


class DescribeTransitGatewayRouteTableAnnouncementsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayRouteTableAnnouncementIds: Optional[
        TransitGatewayRouteTableAnnouncementIdStringList
    ] = None


class DescribeTransitGatewayRouteTableAnnouncementsResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayRouteTableAnnouncements: Optional[
        TransitGatewayRouteTableAnnouncementList
    ] = None


class DescribeTransitGatewayRouteTablesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayRouteTableIds: Optional[TransitGatewayRouteTableIdStringList] = None


class DescribeTransitGatewayRouteTablesResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayRouteTables: Optional[TransitGatewayRouteTableList] = None


class DescribeTransitGatewayVpcAttachmentsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayAttachmentIds: Optional[TransitGatewayAttachmentIdStringList] = None


class DescribeTransitGatewayVpcAttachmentsResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayVpcAttachments: Optional[TransitGatewayVpcAttachmentList] = None


class DescribeTransitGatewaysRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[TransitGatewayMaxResults] = None
    NextToken: Optional[String] = None
    TransitGatewayIds: Optional[TransitGatewayIdStringList] = None


class DescribeTrunkInterfaceAssociationsRequest(BaseModel):
    AssociationIds: Optional[TrunkInterfaceAssociationIdList] = None
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeTrunkInterfaceAssociationsMaxResults] = None
    NextToken: Optional[String] = None


class DescribeTrunkInterfaceAssociationsResult(BaseModel):
    InterfaceAssociations: Optional[TrunkInterfaceAssociationList] = None
    NextToken: Optional[String] = None


class DescribeVerifiedAccessEndpointsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeVerifiedAccessEndpointsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessEndpointIds: Optional[VerifiedAccessEndpointIdList] = None
    VerifiedAccessGroupId_1: Optional[VerifiedAccessGroupId] = Field(
        None, alias='VerifiedAccessGroupId'
    )
    VerifiedAccessInstanceId_1: Optional[VerifiedAccessInstanceId] = Field(
        None, alias='VerifiedAccessInstanceId'
    )


class DescribeVerifiedAccessGroupsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeVerifiedAccessGroupMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessGroupIds: Optional[VerifiedAccessGroupIdList] = None
    VerifiedAccessInstanceId_1: Optional[VerifiedAccessInstanceId] = Field(
        None, alias='VerifiedAccessInstanceId'
    )


class DescribeVerifiedAccessInstanceLoggingConfigurationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[
        DescribeVerifiedAccessInstanceLoggingConfigurationsMaxResults
    ] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessInstanceIds: Optional[VerifiedAccessInstanceIdList] = None


class DescribeVerifiedAccessInstancesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeVerifiedAccessInstancesMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessInstanceIds: Optional[VerifiedAccessInstanceIdList] = None


class DescribeVerifiedAccessInstancesResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessInstances: Optional[VerifiedAccessInstanceList] = None


class DescribeVerifiedAccessTrustProvidersRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeVerifiedAccessTrustProvidersMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessTrustProviderIds: Optional[VerifiedAccessTrustProviderIdList] = None


class DescribeVerifiedAccessTrustProvidersResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessTrustProviders: Optional[VerifiedAccessTrustProviderList] = None


class DescribeVolumeAttributeResult(BaseModel):
    AutoEnableIO: Optional[AttributeBooleanValue] = None
    ProductCodes: Optional[ProductCodeList] = None
    VolumeId: Optional[String] = None


class DescribeVolumeStatusRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    VolumeIds: Optional[VolumeIdStringList] = None


class DescribeVolumeStatusResult(BaseModel):
    NextToken: Optional[String] = None
    VolumeStatuses: Optional[VolumeStatusList] = None


class DescribeVolumesModificationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    VolumeIds: Optional[VolumeIdStringList] = None


class DescribeVolumesModificationsResult(BaseModel):
    NextToken: Optional[String] = None
    VolumesModifications: Optional[VolumeModificationList] = None


class DescribeVolumesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    VolumeIds: Optional[VolumeIdStringList] = None


class DescribeVpcClassicLinkDnsSupportRequest(BaseModel):
    MaxResults: Optional[DescribeVpcClassicLinkDnsSupportMaxResults] = None
    NextToken: Optional[DescribeVpcClassicLinkDnsSupportNextToken] = None
    VpcIds: Optional[VpcClassicLinkIdList] = None


class DescribeVpcClassicLinkRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    VpcIds: Optional[VpcClassicLinkIdList] = None


class DescribeVpcEndpointConnectionNotificationsRequest(BaseModel):
    ConnectionNotificationId_1: Optional[ConnectionNotificationId] = Field(
        None, alias='ConnectionNotificationId'
    )
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeVpcEndpointConnectionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeVpcEndpointConnectionsResult(BaseModel):
    NextToken: Optional[String] = None
    VpcEndpointConnections: Optional[VpcEndpointConnectionSet] = None


class DescribeVpcEndpointServiceConfigurationsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    ServiceIds: Optional[VpcEndpointServiceIdList] = None


class DescribeVpcEndpointServiceConfigurationsResult(BaseModel):
    NextToken: Optional[String] = None
    ServiceConfigurations: Optional[ServiceConfigurationSet] = None


class DescribeVpcEndpointServicePermissionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    ServiceId: VpcEndpointServiceId


class DescribeVpcEndpointServicesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    ServiceNames: Optional[ValueStringList] = None


class DescribeVpcEndpointServicesResult(BaseModel):
    NextToken: Optional[String] = None
    ServiceDetails: Optional[ServiceDetailSet] = None
    ServiceNames: Optional[ValueStringList] = None


class DescribeVpcEndpointsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    VpcEndpointIds: Optional[VpcEndpointIdList] = None


class DescribeVpcPeeringConnectionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeVpcPeeringConnectionsMaxResults] = None
    NextToken: Optional[String] = None
    VpcPeeringConnectionIds: Optional[VpcPeeringConnectionIdList] = None


class DescribeVpcsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    MaxResults: Optional[DescribeVpcsMaxResults] = None
    NextToken: Optional[String] = None
    VpcIds: Optional[VpcIdStringList] = None


class DescribeVpnConnectionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    VpnConnectionIds: Optional[VpnConnectionIdStringList] = None


class DescribeVpnGatewaysRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    VpnGatewayIds: Optional[VpnGatewayIdStringList] = None


class DescribeVpnGatewaysResult(BaseModel):
    VpnGateways: Optional[VpnGatewayList] = None


class DetachVerifiedAccessTrustProviderResult(BaseModel):
    VerifiedAccessInstance_1: Optional[VerifiedAccessInstance] = Field(
        None, alias='VerifiedAccessInstance'
    )
    VerifiedAccessTrustProvider_1: Optional[VerifiedAccessTrustProvider] = Field(
        None, alias='VerifiedAccessTrustProvider'
    )


class DhcpConfiguration(BaseModel):
    Key: Optional[String] = None
    Values: Optional[DhcpConfigurationValueList] = None


class DhcpConfigurationList(RootModel[List[DhcpConfiguration]]):
    root: List[DhcpConfiguration]


class DhcpOptions(BaseModel):
    DhcpConfigurations: Optional[DhcpConfigurationList] = None
    DhcpOptionsId: Optional[String] = None
    OwnerId: Optional[String] = None
    Tags: Optional[TagList] = None


class DhcpOptionsList(RootModel[List[DhcpOptions]]):
    root: List[DhcpOptions]


class DisableFastLaunchResult(BaseModel):
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    LaunchTemplate: Optional[FastLaunchLaunchTemplateSpecificationResponse] = None
    MaxParallelLaunches: Optional[Integer] = None
    OwnerId: Optional[String] = None
    ResourceType: Optional[FastLaunchResourceType] = None
    SnapshotConfiguration: Optional[FastLaunchSnapshotConfigurationResponse] = None
    State: Optional[FastLaunchStateCode] = None
    StateTransitionReason: Optional[String] = None
    StateTransitionTime: Optional[MillisecondDateTime] = None


class DisableFastSnapshotRestoreErrorItem(BaseModel):
    FastSnapshotRestoreStateErrors: Optional[
        DisableFastSnapshotRestoreStateErrorSet
    ] = None
    SnapshotId: Optional[String] = None


class DisableFastSnapshotRestoreErrorSet(
    RootModel[List[DisableFastSnapshotRestoreErrorItem]]
):
    root: List[DisableFastSnapshotRestoreErrorItem]


class DisableFastSnapshotRestoresResult(BaseModel):
    Successful: Optional[DisableFastSnapshotRestoreSuccessSet] = None
    Unsuccessful: Optional[DisableFastSnapshotRestoreErrorSet] = None


class DisableTransitGatewayRouteTablePropagationResult(BaseModel):
    Propagation: Optional[TransitGatewayPropagation] = None


class DisassociateIamInstanceProfileResult(BaseModel):
    IamInstanceProfileAssociation_1: Optional[IamInstanceProfileAssociation] = Field(
        None, alias='IamInstanceProfileAssociation'
    )


class DisassociateInstanceEventWindowRequest(BaseModel):
    AssociationTarget: InstanceEventWindowDisassociationRequest
    DryRun: Optional[Boolean] = None
    InstanceEventWindowId_1: InstanceEventWindowId = Field(
        ..., alias='InstanceEventWindowId'
    )


class DisassociateIpamResourceDiscoveryResult(BaseModel):
    IpamResourceDiscoveryAssociation_1: Optional[IpamResourceDiscoveryAssociation] = (
        Field(None, alias='IpamResourceDiscoveryAssociation')
    )


class DisassociateNatGatewayAddressRequest(BaseModel):
    AssociationIds: EipAssociationIdList
    DryRun: Optional[Boolean] = None
    MaxDrainDurationSeconds: Optional[DrainSeconds] = None
    NatGatewayId_1: NatGatewayId = Field(..., alias='NatGatewayId')


class DisassociateNatGatewayAddressResult(BaseModel):
    NatGatewayAddresses: Optional[NatGatewayAddressList] = None
    NatGatewayId_1: Optional[NatGatewayId] = Field(None, alias='NatGatewayId')


class DisassociateSubnetCidrBlockResult(BaseModel):
    Ipv6CidrBlockAssociation: Optional[SubnetIpv6CidrBlockAssociation] = None
    SubnetId: Optional[String] = None


class DisassociateTransitGatewayMulticastDomainResult(BaseModel):
    Associations: Optional[TransitGatewayMulticastDomainAssociations] = None


class DisassociateTransitGatewayPolicyTableResult(BaseModel):
    Association: Optional[TransitGatewayPolicyTableAssociation] = None


class DisassociateTransitGatewayRouteTableResult(BaseModel):
    Association: Optional[TransitGatewayAssociation] = None


class DiskImage(BaseModel):
    Description: Optional[String] = None
    Image: Optional[DiskImageDetail] = None
    Volume: Optional[VolumeDetail] = None


class DiskImageList(RootModel[List[DiskImage]]):
    root: List[DiskImage]


class EbsInfo(BaseModel):
    EbsOptimizedInfo_1: Optional[EbsOptimizedInfo] = Field(
        None, alias='EbsOptimizedInfo'
    )
    EbsOptimizedSupport_1: Optional[EbsOptimizedSupport] = Field(
        None, alias='EbsOptimizedSupport'
    )
    EncryptionSupport: Optional[EbsEncryptionSupport] = None
    NvmeSupport: Optional[EbsNvmeSupport] = None


class EgressOnlyInternetGateway(BaseModel):
    Attachments: Optional[InternetGatewayAttachmentList] = None
    EgressOnlyInternetGatewayId_1: Optional[EgressOnlyInternetGatewayId] = Field(
        None, alias='EgressOnlyInternetGatewayId'
    )
    Tags: Optional[TagList] = None


class EgressOnlyInternetGatewayList(RootModel[List[EgressOnlyInternetGateway]]):
    root: List[EgressOnlyInternetGateway]


class ElasticGpuSet(RootModel[List[ElasticGpus]]):
    root: List[ElasticGpus]


class EnableFastLaunchRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')
    LaunchTemplate: Optional[FastLaunchLaunchTemplateSpecificationRequest] = None
    MaxParallelLaunches: Optional[Integer] = None
    ResourceType: Optional[String] = None
    SnapshotConfiguration: Optional[FastLaunchSnapshotConfigurationRequest] = None


class EnableFastLaunchResult(BaseModel):
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    LaunchTemplate: Optional[FastLaunchLaunchTemplateSpecificationResponse] = None
    MaxParallelLaunches: Optional[Integer] = None
    OwnerId: Optional[String] = None
    ResourceType: Optional[FastLaunchResourceType] = None
    SnapshotConfiguration: Optional[FastLaunchSnapshotConfigurationResponse] = None
    State: Optional[FastLaunchStateCode] = None
    StateTransitionReason: Optional[String] = None
    StateTransitionTime: Optional[MillisecondDateTime] = None


class EnableFastSnapshotRestoreErrorItem(BaseModel):
    FastSnapshotRestoreStateErrors: Optional[EnableFastSnapshotRestoreStateErrorSet] = (
        None
    )
    SnapshotId: Optional[String] = None


class EnableFastSnapshotRestoreErrorSet(
    RootModel[List[EnableFastSnapshotRestoreErrorItem]]
):
    root: List[EnableFastSnapshotRestoreErrorItem]


class EnableFastSnapshotRestoresResult(BaseModel):
    Successful: Optional[EnableFastSnapshotRestoreSuccessSet] = None
    Unsuccessful: Optional[EnableFastSnapshotRestoreErrorSet] = None


class EnableTransitGatewayRouteTablePropagationResult(BaseModel):
    Propagation: Optional[TransitGatewayPropagation] = None


class EndpointSet(RootModel[List[ClientVpnEndpoint]]):
    root: List[ClientVpnEndpoint]


class Explanation(BaseModel):
    Acl: Optional[AnalysisComponent] = None
    AclRule: Optional[AnalysisAclRule] = None
    Address: Optional[IpAddress] = None
    Addresses: Optional[IpAddressList] = None
    AttachedTo: Optional[AnalysisComponent] = None
    AvailabilityZones: Optional[ValueStringList] = None
    Cidrs: Optional[ValueStringList] = None
    ClassicLoadBalancerListener: Optional[AnalysisLoadBalancerListener] = None
    Component: Optional[AnalysisComponent] = None
    ComponentAccount_1: Optional[ComponentAccount] = Field(
        None, alias='ComponentAccount'
    )
    ComponentRegion_1: Optional[ComponentRegion] = Field(None, alias='ComponentRegion')
    CustomerGateway: Optional[AnalysisComponent] = None
    Destination: Optional[AnalysisComponent] = None
    DestinationVpc: Optional[AnalysisComponent] = None
    Direction: Optional[String] = None
    ElasticLoadBalancerListener: Optional[AnalysisComponent] = None
    ExplanationCode: Optional[String] = None
    FirewallStatefulRule_1: Optional[FirewallStatefulRule] = Field(
        None, alias='FirewallStatefulRule'
    )
    FirewallStatelessRule_1: Optional[FirewallStatelessRule] = Field(
        None, alias='FirewallStatelessRule'
    )
    IngressRouteTable: Optional[AnalysisComponent] = None
    InternetGateway: Optional[AnalysisComponent] = None
    LoadBalancerArn: Optional[ResourceArn] = None
    LoadBalancerListenerPort: Optional[Port] = None
    LoadBalancerTarget: Optional[AnalysisLoadBalancerTarget] = None
    LoadBalancerTargetGroup: Optional[AnalysisComponent] = None
    LoadBalancerTargetGroups: Optional[AnalysisComponentList] = None
    LoadBalancerTargetPort: Optional[Port] = None
    MissingComponent: Optional[String] = None
    NatGateway: Optional[AnalysisComponent] = None
    NetworkInterface: Optional[AnalysisComponent] = None
    PacketField: Optional[String] = None
    Port_1: Optional[Port] = Field(None, alias='Port')
    PortRanges: Optional[PortRangeList] = None
    PrefixList: Optional[AnalysisComponent] = None
    Protocols: Optional[StringList] = None
    RouteTable: Optional[AnalysisComponent] = None
    RouteTableRoute: Optional[AnalysisRouteTableRoute] = None
    SecurityGroup: Optional[AnalysisComponent] = None
    SecurityGroupRule: Optional[AnalysisSecurityGroupRule] = None
    SecurityGroups: Optional[AnalysisComponentList] = None
    SourceVpc: Optional[AnalysisComponent] = None
    State: Optional[String] = None
    Subnet: Optional[AnalysisComponent] = None
    SubnetRouteTable: Optional[AnalysisComponent] = None
    TransitGateway: Optional[AnalysisComponent] = None
    TransitGatewayAttachment: Optional[AnalysisComponent] = None
    TransitGatewayRouteTable: Optional[AnalysisComponent] = None
    TransitGatewayRouteTableRoute_1: Optional[TransitGatewayRouteTableRoute] = Field(
        None, alias='TransitGatewayRouteTableRoute'
    )
    Vpc: Optional[AnalysisComponent] = None
    VpcEndpoint: Optional[AnalysisComponent] = None
    VpcPeeringConnection: Optional[AnalysisComponent] = None
    VpnConnection: Optional[AnalysisComponent] = None
    VpnGateway: Optional[AnalysisComponent] = None


class ExplanationList(RootModel[List[Explanation]]):
    root: List[Explanation]


class ExportImageRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DiskImageFormat_1: DiskImageFormat = Field(..., alias='DiskImageFormat')
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')
    RoleName: Optional[String] = None
    S3ExportLocation: ExportTaskS3LocationRequest
    TagSpecifications: Optional[TagSpecificationList] = None


class ExportImageResult(BaseModel):
    Description: Optional[String] = None
    DiskImageFormat_1: Optional[DiskImageFormat] = Field(None, alias='DiskImageFormat')
    ExportImageTaskId: Optional[String] = None
    ImageId: Optional[String] = None
    Progress: Optional[String] = None
    RoleName: Optional[String] = None
    S3ExportLocation: Optional[ExportTaskS3Location] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None
    Tags: Optional[TagList] = None


class ExportImageTask(BaseModel):
    Description: Optional[String] = None
    ExportImageTaskId: Optional[String] = None
    ImageId: Optional[String] = None
    Progress: Optional[String] = None
    S3ExportLocation: Optional[ExportTaskS3Location] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None
    Tags: Optional[TagList] = None


class ExportImageTaskList(RootModel[List[ExportImageTask]]):
    root: List[ExportImageTask]


class ExportTask(BaseModel):
    Description: Optional[String] = None
    ExportTaskId: Optional[String] = None
    ExportToS3Task_1: Optional[ExportToS3Task] = Field(None, alias='ExportToS3Task')
    InstanceExportDetails_1: Optional[InstanceExportDetails] = Field(
        None, alias='InstanceExportDetails'
    )
    State: Optional[ExportTaskState] = None
    StatusMessage: Optional[String] = None
    Tags: Optional[TagList] = None


class ExportTaskList(RootModel[List[ExportTask]]):
    root: List[ExportTask]


class ExportTransitGatewayRoutesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    S3Bucket: String
    TransitGatewayRouteTableId_1: TransitGatewayRouteTableId = Field(
        ..., alias='TransitGatewayRouteTableId'
    )


class FleetLaunchTemplateOverrides(BaseModel):
    AvailabilityZone: Optional[String] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceRequirements_1: Optional[InstanceRequirements] = Field(
        None, alias='InstanceRequirements'
    )
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    MaxPrice: Optional[String] = None
    Placement: Optional[PlacementResponse] = None
    Priority: Optional[Double] = None
    SubnetId: Optional[String] = None
    WeightedCapacity: Optional[Double] = None


class FleetLaunchTemplateOverridesList(RootModel[List[FleetLaunchTemplateOverrides]]):
    root: List[FleetLaunchTemplateOverrides]


class FleetLaunchTemplateOverridesRequest(BaseModel):
    AvailabilityZone: Optional[String] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceRequirements: Optional[InstanceRequirementsRequest] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    MaxPrice: Optional[String] = None
    Placement_1: Optional[Placement] = Field(None, alias='Placement')
    Priority: Optional[Double] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    WeightedCapacity: Optional[Double] = None


class FpgaDeviceInfo(BaseModel):
    Count: Optional[FpgaDeviceCount] = None
    Manufacturer: Optional[FpgaDeviceManufacturerName] = None
    MemoryInfo: Optional[FpgaDeviceMemoryInfo] = None
    Name: Optional[FpgaDeviceName] = None


class FpgaDeviceInfoList(RootModel[List[FpgaDeviceInfo]]):
    root: List[FpgaDeviceInfo]


class FpgaImage(BaseModel):
    CreateTime: Optional[DateTime] = None
    DataRetentionSupport: Optional[Boolean] = None
    Description: Optional[String] = None
    FpgaImageGlobalId: Optional[String] = None
    FpgaImageId: Optional[String] = None
    InstanceTypes: Optional[InstanceTypesList] = None
    Name: Optional[String] = None
    OwnerAlias: Optional[String] = None
    OwnerId: Optional[String] = None
    PciId_1: Optional[PciId] = Field(None, alias='PciId')
    ProductCodes: Optional[ProductCodeList] = None
    Public: Optional[Boolean] = None
    ShellVersion: Optional[String] = None
    State: Optional[FpgaImageState] = None
    Tags: Optional[TagList] = None
    UpdateTime: Optional[DateTime] = None


class FpgaImageAttribute(BaseModel):
    Description: Optional[String] = None
    FpgaImageId: Optional[String] = None
    LoadPermissions: Optional[LoadPermissionList] = None
    Name: Optional[String] = None
    ProductCodes: Optional[ProductCodeList] = None


class FpgaImageList(RootModel[List[FpgaImage]]):
    root: List[FpgaImage]


class FpgaInfo(BaseModel):
    Fpgas: Optional[FpgaDeviceInfoList] = None
    TotalFpgaMemoryInMiB: Optional[TotalFpgaMemory] = None


class GetAssociatedIpv6PoolCidrsResult(BaseModel):
    Ipv6CidrAssociations: Optional[Ipv6CidrAssociationSet] = None
    NextToken: Optional[String] = None


class GetAwsNetworkPerformanceDataRequest(BaseModel):
    DataQueries_1: Optional[DataQueries] = Field(None, alias='DataQueries')
    DryRun: Optional[Boolean] = None
    EndTime: Optional[MillisecondDateTime] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    StartTime: Optional[MillisecondDateTime] = None


class GetAwsNetworkPerformanceDataResult(BaseModel):
    DataResponses_1: Optional[DataResponses] = Field(None, alias='DataResponses')
    NextToken: Optional[String] = None


class GetCapacityReservationUsageResult(BaseModel):
    AvailableInstanceCount: Optional[Integer] = None
    CapacityReservationId: Optional[String] = None
    InstanceType: Optional[String] = None
    InstanceUsages: Optional[InstanceUsageSet] = None
    NextToken: Optional[String] = None
    State: Optional[CapacityReservationState] = None
    TotalInstanceCount: Optional[Integer] = None


class GetDefaultCreditSpecificationResult(BaseModel):
    InstanceFamilyCreditSpecification_1: Optional[InstanceFamilyCreditSpecification] = (
        Field(None, alias='InstanceFamilyCreditSpecification')
    )


class GetFlowLogsIntegrationTemplateRequest(BaseModel):
    ConfigDeliveryS3DestinationArn: String
    DryRun: Optional[Boolean] = None
    FlowLogId: VpcFlowLogId
    IntegrateServices_1: IntegrateServices = Field(..., alias='IntegrateServices')


class GetInstanceTypesFromInstanceRequirementsRequest(BaseModel):
    ArchitectureTypes: ArchitectureTypeSet
    DryRun: Optional[Boolean] = None
    InstanceRequirements: InstanceRequirementsRequest
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None
    VirtualizationTypes: VirtualizationTypeSet


class GetInstanceTypesFromInstanceRequirementsResult(BaseModel):
    InstanceTypes: Optional[InstanceTypeInfoFromInstanceRequirementsSet] = None
    NextToken: Optional[String] = None


class GetIpamAddressHistoryResult(BaseModel):
    HistoryRecords: Optional[IpamAddressHistoryRecordSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetIpamPoolAllocationsResult(BaseModel):
    IpamPoolAllocations: Optional[IpamPoolAllocationSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetIpamResourceCidrsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    Filters: Optional[FilterList] = None
    IpamPoolId_1: Optional[IpamPoolId] = Field(None, alias='IpamPoolId')
    IpamScopeId_1: IpamScopeId = Field(..., alias='IpamScopeId')
    MaxResults: Optional[IpamMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceId: Optional[String] = None
    ResourceOwner: Optional[String] = None
    ResourceTag: Optional[RequestIpamResourceTag] = None
    ResourceType: Optional[IpamResourceType] = None


class GetManagedPrefixListAssociationsResult(BaseModel):
    NextToken: Optional[String] = None
    PrefixListAssociations: Optional[PrefixListAssociationSet] = None


class GetManagedPrefixListEntriesResult(BaseModel):
    Entries: Optional[PrefixListEntrySet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetReservedInstancesExchangeQuoteResult(BaseModel):
    CurrencyCode: Optional[String] = None
    IsValidExchange: Optional[Boolean] = None
    OutputReservedInstancesWillExpireAt: Optional[DateTime] = None
    PaymentDue: Optional[String] = None
    ReservedInstanceValueRollup: Optional[ReservationValue] = None
    ReservedInstanceValueSet: Optional[ReservedInstanceReservationValueSet] = None
    TargetConfigurationValueRollup: Optional[ReservationValue] = None
    TargetConfigurationValueSet: Optional[TargetReservationValueSet] = None
    ValidationFailureReason: Optional[String] = None


class GetSpotPlacementScoresRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceRequirementsWithMetadata: Optional[
        InstanceRequirementsWithMetadataRequest
    ] = None
    InstanceTypes_1: Optional[InstanceTypes] = Field(None, alias='InstanceTypes')
    MaxResults: Optional[SpotPlacementScoresMaxResults] = None
    NextToken: Optional[String] = None
    RegionNames_1: Optional[RegionNames] = Field(None, alias='RegionNames')
    SingleAvailabilityZone: Optional[Boolean] = None
    TargetCapacity: SpotPlacementScoresTargetCapacity
    TargetCapacityUnitType_1: Optional[TargetCapacityUnitType] = Field(
        None, alias='TargetCapacityUnitType'
    )


class GetSpotPlacementScoresResult(BaseModel):
    NextToken: Optional[String] = None
    SpotPlacementScores_1: Optional[SpotPlacementScores] = Field(
        None, alias='SpotPlacementScores'
    )


class GetSubnetCidrReservationsResult(BaseModel):
    NextToken: Optional[String] = None
    SubnetIpv4CidrReservations: Optional[SubnetCidrReservationList] = None
    SubnetIpv6CidrReservations: Optional[SubnetCidrReservationList] = None


class GetTransitGatewayAttachmentPropagationsResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayAttachmentPropagations: Optional[
        TransitGatewayAttachmentPropagationList
    ] = None


class GetTransitGatewayMulticastDomainAssociationsResult(BaseModel):
    MulticastDomainAssociations: Optional[
        TransitGatewayMulticastDomainAssociationList
    ] = None
    NextToken: Optional[String] = None


class GetTransitGatewayPolicyTableAssociationsResult(BaseModel):
    Associations: Optional[TransitGatewayPolicyTableAssociationList] = None
    NextToken: Optional[String] = None


class GetTransitGatewayPolicyTableEntriesResult(BaseModel):
    TransitGatewayPolicyTableEntries: Optional[TransitGatewayPolicyTableEntryList] = (
        None
    )


class GetTransitGatewayPrefixListReferencesResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayPrefixListReferences: Optional[
        TransitGatewayPrefixListReferenceSet
    ] = None


class GetVpnTunnelReplacementStatusResult(BaseModel):
    CustomerGatewayId_1: Optional[CustomerGatewayId] = Field(
        None, alias='CustomerGatewayId'
    )
    MaintenanceDetails_1: Optional[MaintenanceDetails] = Field(
        None, alias='MaintenanceDetails'
    )
    TransitGatewayId_1: Optional[TransitGatewayId] = Field(
        None, alias='TransitGatewayId'
    )
    VpnConnectionId_1: Optional[VpnConnectionId] = Field(None, alias='VpnConnectionId')
    VpnGatewayId_1: Optional[VpnGatewayId] = Field(None, alias='VpnGatewayId')
    VpnTunnelOutsideIpAddress: Optional[String] = None


class GpuDeviceInfo(BaseModel):
    Count: Optional[GpuDeviceCount] = None
    Manufacturer: Optional[GpuDeviceManufacturerName] = None
    MemoryInfo: Optional[GpuDeviceMemoryInfo] = None
    Name: Optional[GpuDeviceName] = None


class GpuDeviceInfoList(RootModel[List[GpuDeviceInfo]]):
    root: List[GpuDeviceInfo]


class GpuInfo(BaseModel):
    Gpus: Optional[GpuDeviceInfoList] = None
    TotalGpuMemoryInMiB: Optional[TotalGpuMemory] = None


class GroupIdentifierSet(RootModel[List[SecurityGroupIdentifier]]):
    root: List[SecurityGroupIdentifier]


class HostReservation(BaseModel):
    Count: Optional[Integer] = None
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Duration: Optional[Integer] = None
    End: Optional[DateTime] = None
    HostIdSet: Optional[ResponseHostIdSet] = None
    HostReservationId_1: Optional[HostReservationId] = Field(
        None, alias='HostReservationId'
    )
    HourlyPrice: Optional[String] = None
    InstanceFamily: Optional[String] = None
    OfferingId_1: Optional[OfferingId] = Field(None, alias='OfferingId')
    PaymentOption_1: Optional[PaymentOption] = Field(None, alias='PaymentOption')
    Start: Optional[DateTime] = None
    State: Optional[ReservationState] = None
    Tags: Optional[TagList] = None
    UpfrontPrice: Optional[String] = None


class HostReservationSet(RootModel[List[HostReservation]]):
    root: List[HostReservation]


class IKEVersionsList(RootModel[List[IKEVersionsListValue]]):
    root: List[IKEVersionsListValue]


class IKEVersionsRequestList(RootModel[List[IKEVersionsRequestListValue]]):
    root: List[IKEVersionsRequestListValue]


class Image(BaseModel):
    Architecture: Optional[ArchitectureValues] = None
    BlockDeviceMappings: Optional[BlockDeviceMappingList] = None
    BootMode: Optional[BootModeValues] = None
    CreationDate: Optional[String] = None
    DeprecationTime: Optional[String] = None
    Description: Optional[String] = None
    EnaSupport: Optional[Boolean] = None
    Hypervisor: Optional[HypervisorType] = None
    ImageId: Optional[String] = None
    ImageLocation: Optional[String] = None
    ImageOwnerAlias: Optional[String] = None
    ImageType: Optional[ImageTypeValues] = None
    ImdsSupport: Optional[ImdsSupportValues] = None
    KernelId: Optional[String] = None
    Name: Optional[String] = None
    OwnerId: Optional[String] = None
    Platform: Optional[PlatformValues] = None
    PlatformDetails: Optional[String] = None
    ProductCodes: Optional[ProductCodeList] = None
    Public: Optional[Boolean] = None
    RamdiskId: Optional[String] = None
    RootDeviceName: Optional[String] = None
    RootDeviceType: Optional[DeviceType] = None
    SriovNetSupport: Optional[String] = None
    State: Optional[ImageState] = None
    StateReason_1: Optional[StateReason] = Field(None, alias='StateReason')
    Tags: Optional[TagList] = None
    TpmSupport: Optional[TpmSupportValues] = None
    UsageOperation: Optional[String] = None
    VirtualizationType_1: Optional[VirtualizationType] = Field(
        None, alias='VirtualizationType'
    )


class ImageAttribute(BaseModel):
    BlockDeviceMappings: Optional[BlockDeviceMappingList] = None
    BootMode: Optional[AttributeValue] = None
    Description: Optional[AttributeValue] = None
    ImageId: Optional[String] = None
    ImdsSupport: Optional[AttributeValue] = None
    KernelId: Optional[AttributeValue] = None
    LastLaunchedTime: Optional[AttributeValue] = None
    LaunchPermissions: Optional[LaunchPermissionList] = None
    ProductCodes: Optional[ProductCodeList] = None
    RamdiskId: Optional[AttributeValue] = None
    SriovNetSupport: Optional[AttributeValue] = None
    TpmSupport: Optional[AttributeValue] = None
    UefiData: Optional[AttributeValue] = None


class ImageList(RootModel[List[Image]]):
    root: List[Image]


class ImportImageResult(BaseModel):
    Architecture: Optional[String] = None
    Description: Optional[String] = None
    Encrypted: Optional[Boolean] = None
    Hypervisor: Optional[String] = None
    ImageId: Optional[String] = None
    ImportTaskId: Optional[ImportImageTaskId] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    LicenseSpecifications: Optional[ImportImageLicenseSpecificationListResponse] = None
    LicenseType: Optional[String] = None
    Platform: Optional[String] = None
    Progress: Optional[String] = None
    SnapshotDetails: Optional[SnapshotDetailList] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None
    Tags: Optional[TagList] = None
    UsageOperation: Optional[String] = None


class ImportImageTask(BaseModel):
    Architecture: Optional[String] = None
    BootMode: Optional[BootModeValues] = None
    Description: Optional[String] = None
    Encrypted: Optional[Boolean] = None
    Hypervisor: Optional[String] = None
    ImageId: Optional[String] = None
    ImportTaskId: Optional[String] = None
    KmsKeyId: Optional[String] = None
    LicenseSpecifications: Optional[ImportImageLicenseSpecificationListResponse] = None
    LicenseType: Optional[String] = None
    Platform: Optional[String] = None
    Progress: Optional[String] = None
    SnapshotDetails: Optional[SnapshotDetailList] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None
    Tags: Optional[TagList] = None
    UsageOperation: Optional[String] = None


class ImportImageTaskList(RootModel[List[ImportImageTask]]):
    root: List[ImportImageTask]


class ImportInstanceLaunchSpecification(BaseModel):
    AdditionalInfo: Optional[String] = None
    Architecture: Optional[ArchitectureValues] = None
    GroupIds: Optional[SecurityGroupIdStringList] = None
    GroupNames: Optional[SecurityGroupStringList] = None
    InstanceInitiatedShutdownBehavior: Optional[ShutdownBehavior] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Monitoring: Optional[Boolean] = None
    Placement_1: Optional[Placement] = Field(None, alias='Placement')
    PrivateIpAddress: Optional[String] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    UserData_1: Optional[UserData] = Field(None, alias='UserData')


class ImportInstanceRequest(BaseModel):
    Description: Optional[String] = None
    DiskImages: Optional[DiskImageList] = None
    DryRun: Optional[Boolean] = None
    LaunchSpecification: Optional[ImportInstanceLaunchSpecification] = None
    Platform: PlatformValues


class ImportInstanceTaskDetails(BaseModel):
    Description: Optional[String] = None
    InstanceId: Optional[String] = None
    Platform: Optional[PlatformValues] = None
    Volumes: Optional[ImportInstanceVolumeDetailSet] = None


class ImportSnapshotRequest(BaseModel):
    ClientData_1: Optional[ClientData] = Field(None, alias='ClientData')
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DiskContainer: Optional[SnapshotDiskContainer] = None
    DryRun: Optional[Boolean] = None
    Encrypted: Optional[Boolean] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    RoleName: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class ImportSnapshotResult(BaseModel):
    Description: Optional[String] = None
    ImportTaskId: Optional[String] = None
    SnapshotTaskDetail_1: Optional[SnapshotTaskDetail] = Field(
        None, alias='SnapshotTaskDetail'
    )
    Tags: Optional[TagList] = None


class ImportSnapshotTask(BaseModel):
    Description: Optional[String] = None
    ImportTaskId: Optional[String] = None
    SnapshotTaskDetail_1: Optional[SnapshotTaskDetail] = Field(
        None, alias='SnapshotTaskDetail'
    )
    Tags: Optional[TagList] = None


class ImportSnapshotTaskList(RootModel[List[ImportSnapshotTask]]):
    root: List[ImportSnapshotTask]


class InferenceAcceleratorInfo(BaseModel):
    Accelerators: Optional[InferenceDeviceInfoList] = None


class InstanceAttribute(BaseModel):
    BlockDeviceMappings: Optional[InstanceBlockDeviceMappingList] = None
    DisableApiStop: Optional[AttributeBooleanValue] = None
    DisableApiTermination: Optional[AttributeBooleanValue] = None
    EbsOptimized: Optional[AttributeBooleanValue] = None
    EnaSupport: Optional[AttributeBooleanValue] = None
    EnclaveOptions_1: Optional[EnclaveOptions] = Field(None, alias='EnclaveOptions')
    Groups: Optional[GroupIdentifierList] = None
    InstanceId: Optional[String] = None
    InstanceInitiatedShutdownBehavior: Optional[AttributeValue] = None
    InstanceType: Optional[AttributeValue] = None
    KernelId: Optional[AttributeValue] = None
    ProductCodes: Optional[ProductCodeList] = None
    RamdiskId: Optional[AttributeValue] = None
    RootDeviceName: Optional[AttributeValue] = None
    SourceDestCheck: Optional[AttributeBooleanValue] = None
    SriovNetSupport: Optional[AttributeValue] = None
    UserData: Optional[AttributeValue] = None


class InstanceCreditSpecificationListRequest(
    RootModel[List[InstanceCreditSpecificationRequest]]
):
    root: List[InstanceCreditSpecificationRequest]


class InstanceEventWindow(BaseModel):
    AssociationTarget: Optional[InstanceEventWindowAssociationTarget] = None
    CronExpression: Optional[InstanceEventWindowCronExpression] = None
    InstanceEventWindowId_1: Optional[InstanceEventWindowId] = Field(
        None, alias='InstanceEventWindowId'
    )
    Name: Optional[String] = None
    State: Optional[InstanceEventWindowState] = None
    Tags: Optional[TagList] = None
    TimeRanges: Optional[InstanceEventWindowTimeRangeList] = None


class InstanceEventWindowSet(RootModel[List[InstanceEventWindow]]):
    root: List[InstanceEventWindow]


class InstanceIpv6AddressListRequest(RootModel[List[InstanceIpv6AddressRequest]]):
    root: List[InstanceIpv6AddressRequest]


class InstanceMarketOptionsRequest(BaseModel):
    MarketType_1: Optional[MarketType] = Field(None, alias='MarketType')
    SpotOptions: Optional[SpotMarketOptions] = None


class InstanceMonitoring(BaseModel):
    InstanceId: Optional[String] = None
    Monitoring_1: Optional[Monitoring] = Field(None, alias='Monitoring')


class InstanceMonitoringList(RootModel[List[InstanceMonitoring]]):
    root: List[InstanceMonitoring]


class InstanceNetworkInterface(BaseModel):
    Association: Optional[InstanceNetworkInterfaceAssociation] = None
    Attachment: Optional[InstanceNetworkInterfaceAttachment] = None
    Description: Optional[String] = None
    Groups: Optional[GroupIdentifierList] = None
    InterfaceType: Optional[String] = None
    Ipv4Prefixes: Optional[InstanceIpv4PrefixList] = None
    Ipv6Addresses: Optional[InstanceIpv6AddressList] = None
    Ipv6Prefixes: Optional[InstanceIpv6PrefixList] = None
    MacAddress: Optional[String] = None
    NetworkInterfaceId: Optional[String] = None
    OwnerId: Optional[String] = None
    PrivateDnsName: Optional[String] = None
    PrivateIpAddress: Optional[String] = None
    PrivateIpAddresses: Optional[InstancePrivateIpAddressList] = None
    SourceDestCheck: Optional[Boolean] = None
    Status: Optional[NetworkInterfaceStatus] = None
    SubnetId: Optional[String] = None
    VpcId: Optional[String] = None


class InstanceNetworkInterfaceList(RootModel[List[InstanceNetworkInterface]]):
    root: List[InstanceNetworkInterface]


class InstanceStatus(BaseModel):
    AvailabilityZone: Optional[String] = None
    Events: Optional[InstanceStatusEventList] = None
    InstanceId: Optional[String] = None
    InstanceState_1: Optional[InstanceState] = Field(None, alias='InstanceState')
    InstanceStatus: Optional[InstanceStatusSummary] = None
    OutpostArn: Optional[String] = None
    SystemStatus: Optional[InstanceStatusSummary] = None


class InstanceStatusList(RootModel[List[InstanceStatus]]):
    root: List[InstanceStatus]


class InstanceTypeInfo(BaseModel):
    AutoRecoverySupported: Optional[AutoRecoveryFlag] = None
    BareMetal: Optional[BareMetalFlag] = None
    BurstablePerformanceSupported: Optional[BurstablePerformanceFlag] = None
    CurrentGeneration: Optional[CurrentGenerationFlag] = None
    DedicatedHostsSupported: Optional[DedicatedHostFlag] = None
    EbsInfo_1: Optional[EbsInfo] = Field(None, alias='EbsInfo')
    FpgaInfo_1: Optional[FpgaInfo] = Field(None, alias='FpgaInfo')
    FreeTierEligible: Optional[FreeTierEligibleFlag] = None
    GpuInfo_1: Optional[GpuInfo] = Field(None, alias='GpuInfo')
    HibernationSupported: Optional[HibernationFlag] = None
    Hypervisor: Optional[InstanceTypeHypervisor] = None
    InferenceAcceleratorInfo_1: Optional[InferenceAcceleratorInfo] = Field(
        None, alias='InferenceAcceleratorInfo'
    )
    InstanceStorageInfo_1: Optional[InstanceStorageInfo] = Field(
        None, alias='InstanceStorageInfo'
    )
    InstanceStorageSupported: Optional[InstanceStorageFlag] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    MemoryInfo_1: Optional[MemoryInfo] = Field(None, alias='MemoryInfo')
    NetworkInfo_1: Optional[NetworkInfo] = Field(None, alias='NetworkInfo')
    PlacementGroupInfo_1: Optional[PlacementGroupInfo] = Field(
        None, alias='PlacementGroupInfo'
    )
    ProcessorInfo_1: Optional[ProcessorInfo] = Field(None, alias='ProcessorInfo')
    SupportedBootModes: Optional[BootModeTypeList] = None
    SupportedRootDeviceTypes: Optional[RootDeviceTypeList] = None
    SupportedUsageClasses: Optional[UsageClassTypeList] = None
    SupportedVirtualizationTypes: Optional[VirtualizationTypeList] = None
    VCpuInfo_1: Optional[VCpuInfo] = Field(None, alias='VCpuInfo')


class InstanceTypeInfoList(RootModel[List[InstanceTypeInfo]]):
    root: List[InstanceTypeInfo]


class InternetGateway(BaseModel):
    Attachments: Optional[InternetGatewayAttachmentList] = None
    InternetGatewayId: Optional[String] = None
    OwnerId: Optional[String] = None
    Tags: Optional[TagList] = None


class InternetGatewayList(RootModel[List[InternetGateway]]):
    root: List[InternetGateway]


class IpPermission(BaseModel):
    FromPort: Optional[Integer] = None
    IpProtocol: Optional[String] = None
    IpRanges: Optional[IpRangeList] = None
    Ipv6Ranges: Optional[Ipv6RangeList] = None
    PrefixListIds: Optional[PrefixListIdList] = None
    ToPort: Optional[Integer] = None
    UserIdGroupPairs: Optional[UserIdGroupPairList] = None


class IpPermissionList(RootModel[List[IpPermission]]):
    root: List[IpPermission]


class Ipam(BaseModel):
    DefaultResourceDiscoveryAssociationId: Optional[
        IpamResourceDiscoveryAssociationId
    ] = None
    DefaultResourceDiscoveryId: Optional[IpamResourceDiscoveryId] = None
    Description: Optional[String] = None
    IpamArn: Optional[ResourceArn] = None
    IpamId_1: Optional[IpamId] = Field(None, alias='IpamId')
    IpamRegion: Optional[String] = None
    OperatingRegions: Optional[IpamOperatingRegionSet] = None
    OwnerId: Optional[String] = None
    PrivateDefaultScopeId: Optional[IpamScopeId] = None
    PublicDefaultScopeId: Optional[IpamScopeId] = None
    ResourceDiscoveryAssociationCount: Optional[Integer] = None
    ScopeCount: Optional[Integer] = None
    State: Optional[IpamState] = None
    Tags: Optional[TagList] = None


class IpamDiscoveredAccount(BaseModel):
    AccountId: Optional[String] = None
    DiscoveryRegion: Optional[String] = None
    FailureReason: Optional[IpamDiscoveryFailureReason] = None
    LastAttemptedDiscoveryTime: Optional[MillisecondDateTime] = None
    LastSuccessfulDiscoveryTime: Optional[MillisecondDateTime] = None


class IpamDiscoveredAccountSet(RootModel[List[IpamDiscoveredAccount]]):
    root: List[IpamDiscoveredAccount]


class IpamDiscoveredResourceCidr(BaseModel):
    IpUsage: Optional[BoxedDouble] = None
    IpamResourceDiscoveryId_1: Optional[IpamResourceDiscoveryId] = Field(
        None, alias='IpamResourceDiscoveryId'
    )
    ResourceCidr: Optional[String] = None
    ResourceId: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceRegion: Optional[String] = None
    ResourceTags: Optional[IpamResourceTagList] = None
    ResourceType: Optional[IpamResourceType] = None
    SampleTime: Optional[MillisecondDateTime] = None
    VpcId: Optional[String] = None


class IpamDiscoveredResourceCidrSet(RootModel[List[IpamDiscoveredResourceCidr]]):
    root: List[IpamDiscoveredResourceCidr]


class IpamPool(BaseModel):
    AddressFamily_1: Optional[AddressFamily] = Field(None, alias='AddressFamily')
    AllocationDefaultNetmaskLength: Optional[IpamNetmaskLength] = None
    AllocationMaxNetmaskLength: Optional[IpamNetmaskLength] = None
    AllocationMinNetmaskLength: Optional[IpamNetmaskLength] = None
    AllocationResourceTags: Optional[IpamResourceTagList] = None
    AutoImport: Optional[Boolean] = None
    AwsService: Optional[IpamPoolAwsService] = None
    Description: Optional[String] = None
    IpamArn: Optional[ResourceArn] = None
    IpamPoolArn: Optional[ResourceArn] = None
    IpamPoolId_1: Optional[IpamPoolId] = Field(None, alias='IpamPoolId')
    IpamRegion: Optional[String] = None
    IpamScopeArn: Optional[ResourceArn] = None
    IpamScopeType_1: Optional[IpamScopeType] = Field(None, alias='IpamScopeType')
    Locale: Optional[String] = None
    OwnerId: Optional[String] = None
    PoolDepth: Optional[Integer] = None
    PublicIpSource: Optional[IpamPoolPublicIpSource] = None
    PubliclyAdvertisable: Optional[Boolean] = None
    SourceIpamPoolId: Optional[IpamPoolId] = None
    State: Optional[IpamPoolState] = None
    StateMessage: Optional[String] = None
    Tags: Optional[TagList] = None


class IpamPoolCidr(BaseModel):
    Cidr: Optional[String] = None
    FailureReason: Optional[IpamPoolCidrFailureReason] = None
    IpamPoolCidrId_1: Optional[IpamPoolCidrId] = Field(None, alias='IpamPoolCidrId')
    NetmaskLength: Optional[Integer] = None
    State: Optional[IpamPoolCidrState] = None


class IpamPoolCidrSet(RootModel[List[IpamPoolCidr]]):
    root: List[IpamPoolCidr]


class IpamPoolSet(RootModel[List[IpamPool]]):
    root: List[IpamPool]


class IpamResourceCidr(BaseModel):
    ComplianceStatus: Optional[IpamComplianceStatus] = None
    IpUsage: Optional[BoxedDouble] = None
    IpamId_1: Optional[IpamId] = Field(None, alias='IpamId')
    IpamPoolId_1: Optional[IpamPoolId] = Field(None, alias='IpamPoolId')
    IpamScopeId_1: Optional[IpamScopeId] = Field(None, alias='IpamScopeId')
    ManagementState: Optional[IpamManagementState] = None
    OverlapStatus: Optional[IpamOverlapStatus] = None
    ResourceCidr: Optional[String] = None
    ResourceId: Optional[String] = None
    ResourceName: Optional[String] = None
    ResourceOwnerId: Optional[String] = None
    ResourceRegion: Optional[String] = None
    ResourceTags: Optional[IpamResourceTagList] = None
    ResourceType: Optional[IpamResourceType] = None
    VpcId: Optional[String] = None


class IpamResourceCidrSet(RootModel[List[IpamResourceCidr]]):
    root: List[IpamResourceCidr]


class IpamSet(RootModel[List[Ipam]]):
    root: List[Ipam]


class Ipv4PrefixList(RootModel[List[Ipv4PrefixSpecificationRequest]]):
    root: List[Ipv4PrefixSpecificationRequest]


class Ipv4PrefixListResponse(RootModel[List[Ipv4PrefixSpecificationResponse]]):
    root: List[Ipv4PrefixSpecificationResponse]


class Ipv6Pool(BaseModel):
    Description: Optional[String] = None
    PoolCidrBlocks: Optional[PoolCidrBlocksSet] = None
    PoolId: Optional[String] = None
    Tags: Optional[TagList] = None


class Ipv6PoolSet(RootModel[List[Ipv6Pool]]):
    root: List[Ipv6Pool]


class Ipv6PrefixList(RootModel[List[Ipv6PrefixSpecificationRequest]]):
    root: List[Ipv6PrefixSpecificationRequest]


class Ipv6PrefixListResponse(RootModel[List[Ipv6PrefixSpecificationResponse]]):
    root: List[Ipv6PrefixSpecificationResponse]


class LaunchTemplateAndOverridesResponse(BaseModel):
    LaunchTemplateSpecification: Optional[FleetLaunchTemplateSpecification] = None
    Overrides: Optional[FleetLaunchTemplateOverrides] = None


class LaunchTemplateBlockDeviceMapping(BaseModel):
    DeviceName: Optional[String] = None
    Ebs: Optional[LaunchTemplateEbsBlockDevice] = None
    NoDevice: Optional[String] = None
    VirtualName: Optional[String] = None


class LaunchTemplateBlockDeviceMappingList(
    RootModel[List[LaunchTemplateBlockDeviceMapping]]
):
    root: List[LaunchTemplateBlockDeviceMapping]


class LaunchTemplateBlockDeviceMappingRequest(BaseModel):
    DeviceName: Optional[String] = None
    Ebs: Optional[LaunchTemplateEbsBlockDeviceRequest] = None
    NoDevice: Optional[String] = None
    VirtualName: Optional[String] = None


class LaunchTemplateBlockDeviceMappingRequestList(
    RootModel[List[LaunchTemplateBlockDeviceMappingRequest]]
):
    root: List[LaunchTemplateBlockDeviceMappingRequest]


class LaunchTemplateConfig(BaseModel):
    LaunchTemplateSpecification: Optional[FleetLaunchTemplateSpecification] = None
    Overrides: Optional[LaunchTemplateOverridesList] = None


class LaunchTemplateConfigList(RootModel[List[LaunchTemplateConfig]]):
    root: List[LaunchTemplateConfig]


class LaunchTemplateInstanceMarketOptions(BaseModel):
    MarketType_1: Optional[MarketType] = Field(None, alias='MarketType')
    SpotOptions: Optional[LaunchTemplateSpotMarketOptions] = None


class LaunchTemplateInstanceMarketOptionsRequest(BaseModel):
    MarketType_1: Optional[MarketType] = Field(None, alias='MarketType')
    SpotOptions: Optional[LaunchTemplateSpotMarketOptionsRequest] = None


class LaunchTemplateInstanceNetworkInterfaceSpecification(BaseModel):
    AssociateCarrierIpAddress: Optional[Boolean] = None
    AssociatePublicIpAddress: Optional[Boolean] = None
    DeleteOnTermination: Optional[Boolean] = None
    Description: Optional[String] = None
    DeviceIndex: Optional[Integer] = None
    Groups: Optional[GroupIdStringList] = None
    InterfaceType: Optional[String] = None
    Ipv4PrefixCount: Optional[Integer] = None
    Ipv4Prefixes: Optional[Ipv4PrefixListResponse] = None
    Ipv6AddressCount: Optional[Integer] = None
    Ipv6Addresses: Optional[InstanceIpv6AddressList] = None
    Ipv6PrefixCount: Optional[Integer] = None
    Ipv6Prefixes: Optional[Ipv6PrefixListResponse] = None
    NetworkCardIndex: Optional[Integer] = None
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    PrivateIpAddress: Optional[String] = None
    PrivateIpAddresses: Optional[PrivateIpAddressSpecificationList] = None
    SecondaryPrivateIpAddressCount: Optional[Integer] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')


class LaunchTemplateInstanceNetworkInterfaceSpecificationList(
    RootModel[List[LaunchTemplateInstanceNetworkInterfaceSpecification]]
):
    root: List[LaunchTemplateInstanceNetworkInterfaceSpecification]


class LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(BaseModel):
    AssociateCarrierIpAddress: Optional[Boolean] = None
    AssociatePublicIpAddress: Optional[Boolean] = None
    DeleteOnTermination: Optional[Boolean] = None
    Description: Optional[String] = None
    DeviceIndex: Optional[Integer] = None
    Groups: Optional[SecurityGroupIdStringList] = None
    InterfaceType: Optional[String] = None
    Ipv4PrefixCount: Optional[Integer] = None
    Ipv4Prefixes: Optional[Ipv4PrefixList] = None
    Ipv6AddressCount: Optional[Integer] = None
    Ipv6Addresses: Optional[InstanceIpv6AddressListRequest] = None
    Ipv6PrefixCount: Optional[Integer] = None
    Ipv6Prefixes: Optional[Ipv6PrefixList] = None
    NetworkCardIndex: Optional[Integer] = None
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    PrivateIpAddress: Optional[String] = None
    PrivateIpAddresses: Optional[PrivateIpAddressSpecificationList] = None
    SecondaryPrivateIpAddressCount: Optional[Integer] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')


class LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(
    RootModel[List[LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]]
):
    root: List[LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]


class ListSnapshotsInRecycleBinResult(BaseModel):
    NextToken: Optional[String] = None
    Snapshots: Optional[SnapshotRecycleBinInfoList] = None


class LoadPermissionListRequest(RootModel[List[LoadPermissionRequest]]):
    root: List[LoadPermissionRequest]


class LoadPermissionModifications(BaseModel):
    Add: Optional[LoadPermissionListRequest] = None
    Remove: Optional[LoadPermissionListRequest] = None


class LocalGatewayRouteTable(BaseModel):
    LocalGatewayId_1: Optional[LocalGatewayId] = Field(None, alias='LocalGatewayId')
    LocalGatewayRouteTableArn: Optional[ResourceArn] = None
    LocalGatewayRouteTableId: Optional[String] = None
    Mode: Optional[LocalGatewayRouteTableMode] = None
    OutpostArn: Optional[String] = None
    OwnerId: Optional[String] = None
    State: Optional[String] = None
    StateReason_1: Optional[StateReason] = Field(None, alias='StateReason')
    Tags: Optional[TagList] = None


class LocalGatewayRouteTableSet(RootModel[List[LocalGatewayRouteTable]]):
    root: List[LocalGatewayRouteTable]


class ModifyAddressAttributeResult(BaseModel):
    Address: Optional[AddressAttribute] = None


class ModifyFpgaImageAttributeRequest(BaseModel):
    Attribute: Optional[FpgaImageAttributeName] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    FpgaImageId_1: FpgaImageId = Field(..., alias='FpgaImageId')
    LoadPermission: Optional[LoadPermissionModifications] = None
    Name: Optional[String] = None
    OperationType_1: Optional[OperationType] = Field(None, alias='OperationType')
    ProductCodes: Optional[ProductCodeStringList] = None
    UserGroups: Optional[UserGroupStringList] = None
    UserIds: Optional[UserIdStringList] = None


class ModifyFpgaImageAttributeResult(BaseModel):
    FpgaImageAttribute_1: Optional[FpgaImageAttribute] = Field(
        None, alias='FpgaImageAttribute'
    )


class ModifyHostsResult(BaseModel):
    Successful: Optional[ResponseHostIdList] = None
    Unsuccessful: Optional[UnsuccessfulItemList] = None


class ModifyImageAttributeRequest(BaseModel):
    Attribute: Optional[String] = None
    Description: Optional[AttributeValue] = None
    DryRun: Optional[Boolean] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')
    ImdsSupport: Optional[AttributeValue] = None
    LaunchPermission: Optional[LaunchPermissionModifications] = None
    OperationType_1: Optional[OperationType] = Field(None, alias='OperationType')
    OrganizationArns: Optional[OrganizationArnStringList] = None
    OrganizationalUnitArns: Optional[OrganizationalUnitArnStringList] = None
    ProductCodes: Optional[ProductCodeStringList] = None
    UserGroups: Optional[UserGroupStringList] = None
    UserIds: Optional[UserIdStringList] = None
    Value: Optional[String] = None


class ModifyInstanceCapacityReservationAttributesRequest(BaseModel):
    CapacityReservationSpecification_1: CapacityReservationSpecification = Field(
        ..., alias='CapacityReservationSpecification'
    )
    DryRun: Optional[Boolean] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class ModifyInstanceCreditSpecificationRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    InstanceCreditSpecifications: InstanceCreditSpecificationListRequest


class ModifyInstanceCreditSpecificationResult(BaseModel):
    SuccessfulInstanceCreditSpecifications: Optional[
        SuccessfulInstanceCreditSpecificationSet
    ] = None
    UnsuccessfulInstanceCreditSpecifications: Optional[
        UnsuccessfulInstanceCreditSpecificationSet
    ] = None


class ModifyInstanceEventWindowResult(BaseModel):
    InstanceEventWindow_1: Optional[InstanceEventWindow] = Field(
        None, alias='InstanceEventWindow'
    )


class ModifyIpamPoolRequest(BaseModel):
    AddAllocationResourceTags: Optional[RequestIpamResourceTagList] = None
    AllocationDefaultNetmaskLength: Optional[IpamNetmaskLength] = None
    AllocationMaxNetmaskLength: Optional[IpamNetmaskLength] = None
    AllocationMinNetmaskLength: Optional[IpamNetmaskLength] = None
    AutoImport: Optional[Boolean] = None
    ClearAllocationDefaultNetmaskLength: Optional[Boolean] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamPoolId_1: IpamPoolId = Field(..., alias='IpamPoolId')
    RemoveAllocationResourceTags: Optional[RequestIpamResourceTagList] = None


class ModifyIpamPoolResult(BaseModel):
    IpamPool_1: Optional[IpamPool] = Field(None, alias='IpamPool')


class ModifyIpamRequest(BaseModel):
    AddOperatingRegions: Optional[AddIpamOperatingRegionSet] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamId_1: IpamId = Field(..., alias='IpamId')
    RemoveOperatingRegions: Optional[RemoveIpamOperatingRegionSet] = None


class ModifyIpamResourceCidrResult(BaseModel):
    IpamResourceCidr_1: Optional[IpamResourceCidr] = Field(
        None, alias='IpamResourceCidr'
    )


class ModifyIpamResourceDiscoveryRequest(BaseModel):
    AddOperatingRegions: Optional[AddIpamOperatingRegionSet] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    IpamResourceDiscoveryId_1: IpamResourceDiscoveryId = Field(
        ..., alias='IpamResourceDiscoveryId'
    )
    RemoveOperatingRegions: Optional[RemoveIpamOperatingRegionSet] = None


class ModifyIpamResult(BaseModel):
    Ipam_1: Optional[Ipam] = Field(None, alias='Ipam')


class ModifyNetworkInterfaceAttributeRequest(BaseModel):
    Attachment: Optional[NetworkInterfaceAttachmentChanges] = None
    Description: Optional[AttributeValue] = None
    DryRun: Optional[Boolean] = None
    EnaSrdSpecification_1: Optional[EnaSrdSpecification] = Field(
        None, alias='EnaSrdSpecification'
    )
    Groups: Optional[SecurityGroupIdStringList] = None
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    SourceDestCheck: Optional[AttributeBooleanValue] = None


class ModifyReservedInstancesRequest(BaseModel):
    ClientToken: Optional[String] = None
    ReservedInstancesIds: ReservedInstancesIdStringList
    TargetConfigurations: ReservedInstancesConfigurationList


class ModifySecurityGroupRulesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupId: SecurityGroupId
    SecurityGroupRules: SecurityGroupRuleUpdateList


class ModifySpotFleetRequestRequest(BaseModel):
    Context: Optional[String] = None
    ExcessCapacityTerminationPolicy_1: Optional[ExcessCapacityTerminationPolicy] = (
        Field(None, alias='ExcessCapacityTerminationPolicy')
    )
    LaunchTemplateConfigs: Optional[LaunchTemplateConfigList] = None
    OnDemandTargetCapacity: Optional[Integer] = None
    SpotFleetRequestId_1: SpotFleetRequestId = Field(..., alias='SpotFleetRequestId')
    TargetCapacity: Optional[Integer] = None


class ModifyTrafficMirrorFilterRuleResult(BaseModel):
    TrafficMirrorFilterRule_1: Optional[TrafficMirrorFilterRule] = Field(
        None, alias='TrafficMirrorFilterRule'
    )


class ModifyTransitGatewayPrefixListReferenceResult(BaseModel):
    TransitGatewayPrefixListReference_1: Optional[TransitGatewayPrefixListReference] = (
        Field(None, alias='TransitGatewayPrefixListReference')
    )


class ModifyTransitGatewayVpcAttachmentResult(BaseModel):
    TransitGatewayVpcAttachment_1: Optional[TransitGatewayVpcAttachment] = Field(
        None, alias='TransitGatewayVpcAttachment'
    )


class ModifyVerifiedAccessEndpointLoadBalancerOptions(BaseModel):
    Port: Optional[VerifiedAccessEndpointPortNumber] = None
    Protocol: Optional[VerifiedAccessEndpointProtocol] = None
    SubnetIds: Optional[ModifyVerifiedAccessEndpointSubnetIdList] = None


class ModifyVerifiedAccessEndpointRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    LoadBalancerOptions: Optional[ModifyVerifiedAccessEndpointLoadBalancerOptions] = (
        None
    )
    NetworkInterfaceOptions: Optional[ModifyVerifiedAccessEndpointEniOptions] = None
    VerifiedAccessEndpointId_1: VerifiedAccessEndpointId = Field(
        ..., alias='VerifiedAccessEndpointId'
    )
    VerifiedAccessGroupId_1: Optional[VerifiedAccessGroupId] = Field(
        None, alias='VerifiedAccessGroupId'
    )


class ModifyVerifiedAccessInstanceLoggingConfigurationRequest(BaseModel):
    AccessLogs: VerifiedAccessLogOptions
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    VerifiedAccessInstanceId_1: VerifiedAccessInstanceId = Field(
        ..., alias='VerifiedAccessInstanceId'
    )


class ModifyVerifiedAccessInstanceResult(BaseModel):
    VerifiedAccessInstance_1: Optional[VerifiedAccessInstance] = Field(
        None, alias='VerifiedAccessInstance'
    )


class ModifyVerifiedAccessTrustProviderResult(BaseModel):
    VerifiedAccessTrustProvider_1: Optional[VerifiedAccessTrustProvider] = Field(
        None, alias='VerifiedAccessTrustProvider'
    )


class ModifyVolumeResult(BaseModel):
    VolumeModification_1: Optional[VolumeModification] = Field(
        None, alias='VolumeModification'
    )


class MonitorInstancesResult(BaseModel):
    InstanceMonitorings: Optional[InstanceMonitoringList] = None


class NatGateway(BaseModel):
    ConnectivityType_1: Optional[ConnectivityType] = Field(
        None, alias='ConnectivityType'
    )
    CreateTime: Optional[DateTime] = None
    DeleteTime: Optional[DateTime] = None
    FailureCode: Optional[String] = None
    FailureMessage: Optional[String] = None
    NatGatewayAddresses: Optional[NatGatewayAddressList] = None
    NatGatewayId: Optional[String] = None
    ProvisionedBandwidth_1: Optional[ProvisionedBandwidth] = Field(
        None, alias='ProvisionedBandwidth'
    )
    State: Optional[NatGatewayState] = None
    SubnetId: Optional[String] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class NatGatewayList(RootModel[List[NatGateway]]):
    root: List[NatGateway]


class NetworkAcl(BaseModel):
    Associations: Optional[NetworkAclAssociationList] = None
    Entries: Optional[NetworkAclEntryList] = None
    IsDefault: Optional[Boolean] = None
    NetworkAclId: Optional[String] = None
    OwnerId: Optional[String] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class NetworkAclList(RootModel[List[NetworkAcl]]):
    root: List[NetworkAcl]


class NetworkInsightsPath(BaseModel):
    CreatedDate: Optional[MillisecondDateTime] = None
    Destination: Optional[String] = None
    DestinationArn: Optional[ResourceArn] = None
    DestinationIp: Optional[IpAddress] = None
    DestinationPort: Optional[Integer] = None
    FilterAtDestination: Optional[PathFilter] = None
    FilterAtSource: Optional[PathFilter] = None
    NetworkInsightsPathArn: Optional[ResourceArn] = None
    NetworkInsightsPathId_1: Optional[NetworkInsightsPathId] = Field(
        None, alias='NetworkInsightsPathId'
    )
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')
    Source: Optional[String] = None
    SourceArn: Optional[ResourceArn] = None
    SourceIp: Optional[IpAddress] = None
    Tags: Optional[TagList] = None


class NetworkInsightsPathList(RootModel[List[NetworkInsightsPath]]):
    root: List[NetworkInsightsPath]


class NetworkInterfaceAttachment(BaseModel):
    AttachTime: Optional[DateTime] = None
    AttachmentId: Optional[String] = None
    DeleteOnTermination: Optional[Boolean] = None
    DeviceIndex: Optional[Integer] = None
    EnaSrdSpecification: Optional[AttachmentEnaSrdSpecification] = None
    InstanceId: Optional[String] = None
    InstanceOwnerId: Optional[String] = None
    NetworkCardIndex: Optional[Integer] = None
    Status: Optional[AttachmentStatus] = None


class NetworkInterfacePermission(BaseModel):
    AwsAccountId: Optional[String] = None
    AwsService: Optional[String] = None
    NetworkInterfaceId: Optional[String] = None
    NetworkInterfacePermissionId: Optional[String] = None
    Permission: Optional[InterfacePermissionType] = None
    PermissionState: Optional[NetworkInterfacePermissionState] = None


class NetworkInterfacePermissionList(RootModel[List[NetworkInterfacePermission]]):
    root: List[NetworkInterfacePermission]


class PathStatement(BaseModel):
    PacketHeaderStatement_1: Optional[PacketHeaderStatement] = Field(
        None, alias='PacketHeaderStatement'
    )
    ResourceStatement_1: Optional[ResourceStatement] = Field(
        None, alias='ResourceStatement'
    )


class PathStatementRequest(BaseModel):
    PacketHeaderStatement: Optional[PacketHeaderStatementRequest] = None
    ResourceStatement: Optional[ResourceStatementRequest] = None


class Phase1EncryptionAlgorithmsList(
    RootModel[List[Phase1EncryptionAlgorithmsListValue]]
):
    root: List[Phase1EncryptionAlgorithmsListValue]


class Phase1EncryptionAlgorithmsRequestList(
    RootModel[List[Phase1EncryptionAlgorithmsRequestListValue]]
):
    root: List[Phase1EncryptionAlgorithmsRequestListValue]


class Phase1IntegrityAlgorithmsList(
    RootModel[List[Phase1IntegrityAlgorithmsListValue]]
):
    root: List[Phase1IntegrityAlgorithmsListValue]


class Phase1IntegrityAlgorithmsRequestList(
    RootModel[List[Phase1IntegrityAlgorithmsRequestListValue]]
):
    root: List[Phase1IntegrityAlgorithmsRequestListValue]


class Phase2EncryptionAlgorithmsList(
    RootModel[List[Phase2EncryptionAlgorithmsListValue]]
):
    root: List[Phase2EncryptionAlgorithmsListValue]


class Phase2EncryptionAlgorithmsRequestList(
    RootModel[List[Phase2EncryptionAlgorithmsRequestListValue]]
):
    root: List[Phase2EncryptionAlgorithmsRequestListValue]


class Phase2IntegrityAlgorithmsList(
    RootModel[List[Phase2IntegrityAlgorithmsListValue]]
):
    root: List[Phase2IntegrityAlgorithmsListValue]


class Phase2IntegrityAlgorithmsRequestList(
    RootModel[List[Phase2IntegrityAlgorithmsRequestListValue]]
):
    root: List[Phase2IntegrityAlgorithmsRequestListValue]


class PrivateIpAddressConfigSet(
    RootModel[List[ScheduledInstancesPrivateIpAddressConfig]]
):
    root: List[ScheduledInstancesPrivateIpAddressConfig]


class ProvisionIpamPoolCidrResult(BaseModel):
    IpamPoolCidr_1: Optional[IpamPoolCidr] = Field(None, alias='IpamPoolCidr')


class ProvisionPublicIpv4PoolCidrResult(BaseModel):
    PoolAddressRange: Optional[PublicIpv4PoolRange] = None
    PoolId: Optional[Ipv4PoolEc2Id] = None


class PublicIpv4Pool(BaseModel):
    Description: Optional[String] = None
    NetworkBorderGroup: Optional[String] = None
    PoolAddressRanges: Optional[PublicIpv4PoolRangeSet] = None
    PoolId: Optional[String] = None
    Tags: Optional[TagList] = None
    TotalAddressCount: Optional[Integer] = None
    TotalAvailableAddressCount: Optional[Integer] = None


class PublicIpv4PoolSet(RootModel[List[PublicIpv4Pool]]):
    root: List[PublicIpv4Pool]


class Purchase(BaseModel):
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Duration: Optional[Integer] = None
    HostIdSet: Optional[ResponseHostIdSet] = None
    HostReservationId_1: Optional[HostReservationId] = Field(
        None, alias='HostReservationId'
    )
    HourlyPrice: Optional[String] = None
    InstanceFamily: Optional[String] = None
    PaymentOption_1: Optional[PaymentOption] = Field(None, alias='PaymentOption')
    UpfrontPrice: Optional[String] = None


class PurchaseSet(RootModel[List[Purchase]]):
    root: List[Purchase]


class RegisterImageRequest(BaseModel):
    Architecture: Optional[ArchitectureValues] = None
    BillingProducts: Optional[BillingProductList] = None
    BlockDeviceMappings: Optional[BlockDeviceMappingRequestList] = None
    BootMode: Optional[BootModeValues] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    EnaSupport: Optional[Boolean] = None
    ImageLocation: Optional[String] = None
    ImdsSupport: Optional[ImdsSupportValues] = None
    KernelId_1: Optional[KernelId] = Field(None, alias='KernelId')
    Name: String
    RamdiskId_1: Optional[RamdiskId] = Field(None, alias='RamdiskId')
    RootDeviceName: Optional[String] = None
    SriovNetSupport: Optional[String] = None
    TpmSupport: Optional[TpmSupportValues] = None
    UefiData: Optional[StringType] = None
    VirtualizationType: Optional[String] = None


class RegisterInstanceEventNotificationAttributesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceTagAttribute: Optional[RegisterInstanceTagAttributeRequest] = None


class RegisterTransitGatewayMulticastGroupMembersResult(BaseModel):
    RegisteredMulticastGroupMembers: Optional[
        TransitGatewayMulticastRegisteredGroupMembers
    ] = None


class RegisterTransitGatewayMulticastGroupSourcesResult(BaseModel):
    RegisteredMulticastGroupSources: Optional[
        TransitGatewayMulticastRegisteredGroupSources
    ] = None


class RejectTransitGatewayMulticastDomainAssociationsResult(BaseModel):
    Associations: Optional[TransitGatewayMulticastDomainAssociations] = None


class RejectTransitGatewayPeeringAttachmentResult(BaseModel):
    TransitGatewayPeeringAttachment_1: Optional[TransitGatewayPeeringAttachment] = (
        Field(None, alias='TransitGatewayPeeringAttachment')
    )


class RejectTransitGatewayVpcAttachmentResult(BaseModel):
    TransitGatewayVpcAttachment_1: Optional[TransitGatewayVpcAttachment] = Field(
        None, alias='TransitGatewayVpcAttachment'
    )


class RejectVpcEndpointConnectionsResult(BaseModel):
    Unsuccessful: Optional[UnsuccessfulItemSet] = None


class ReleaseHostsResult(BaseModel):
    Successful: Optional[ResponseHostIdList] = None
    Unsuccessful: Optional[UnsuccessfulItemList] = None


class RemovePrefixListEntries(RootModel[List[RemovePrefixListEntry]]):
    root: List[RemovePrefixListEntry] = Field(..., max_length=100, min_length=0)


class ReplaceRouteTableAssociationResult(BaseModel):
    AssociationState: Optional[RouteTableAssociationState] = None
    NewAssociationId: Optional[String] = None


class ReplaceTransitGatewayRouteResult(BaseModel):
    Route: Optional[TransitGatewayRoute] = None


class RequestLaunchTemplateData(BaseModel):
    BlockDeviceMappings: Optional[LaunchTemplateBlockDeviceMappingRequestList] = None
    CapacityReservationSpecification: Optional[
        LaunchTemplateCapacityReservationSpecificationRequest
    ] = None
    CpuOptions: Optional[LaunchTemplateCpuOptionsRequest] = None
    CreditSpecification: Optional[CreditSpecificationRequest] = None
    DisableApiStop: Optional[Boolean] = None
    DisableApiTermination: Optional[Boolean] = None
    EbsOptimized: Optional[Boolean] = None
    ElasticGpuSpecifications: Optional[ElasticGpuSpecificationList] = None
    ElasticInferenceAccelerators: Optional[
        LaunchTemplateElasticInferenceAcceleratorList
    ] = None
    EnclaveOptions: Optional[LaunchTemplateEnclaveOptionsRequest] = None
    HibernationOptions: Optional[LaunchTemplateHibernationOptionsRequest] = None
    IamInstanceProfile: Optional[
        LaunchTemplateIamInstanceProfileSpecificationRequest
    ] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceInitiatedShutdownBehavior: Optional[ShutdownBehavior] = None
    InstanceMarketOptions: Optional[LaunchTemplateInstanceMarketOptionsRequest] = None
    InstanceRequirements: Optional[InstanceRequirementsRequest] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    KernelId_1: Optional[KernelId] = Field(None, alias='KernelId')
    KeyName: Optional[KeyPairName] = None
    LicenseSpecifications: Optional[LaunchTemplateLicenseSpecificationListRequest] = (
        None
    )
    MaintenanceOptions: Optional[LaunchTemplateInstanceMaintenanceOptionsRequest] = None
    MetadataOptions: Optional[LaunchTemplateInstanceMetadataOptionsRequest] = None
    Monitoring: Optional[LaunchTemplatesMonitoringRequest] = None
    NetworkInterfaces: Optional[
        LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList
    ] = None
    Placement: Optional[LaunchTemplatePlacementRequest] = None
    PrivateDnsNameOptions: Optional[LaunchTemplatePrivateDnsNameOptionsRequest] = None
    RamDiskId: Optional[RamdiskId] = None
    SecurityGroupIds: Optional[SecurityGroupIdStringList] = None
    SecurityGroups: Optional[SecurityGroupStringList] = None
    TagSpecifications: Optional[LaunchTemplateTagSpecificationRequestList] = None
    UserData: Optional[String] = None


class ReservedInstancesModification(BaseModel):
    ClientToken: Optional[String] = None
    CreateDate: Optional[DateTime] = None
    EffectiveDate: Optional[DateTime] = None
    ModificationResults: Optional[ReservedInstancesModificationResultList] = None
    ReservedInstancesIds: Optional[ReservedIntancesIds] = None
    ReservedInstancesModificationId: Optional[String] = None
    Status: Optional[String] = None
    StatusMessage: Optional[String] = None
    UpdateDate: Optional[DateTime] = None


class ReservedInstancesModificationList(RootModel[List[ReservedInstancesModification]]):
    root: List[ReservedInstancesModification]


class ResetAddressAttributeResult(BaseModel):
    Address: Optional[AddressAttribute] = None


class ResponseLaunchTemplateData(BaseModel):
    BlockDeviceMappings: Optional[LaunchTemplateBlockDeviceMappingList] = None
    CapacityReservationSpecification: Optional[
        LaunchTemplateCapacityReservationSpecificationResponse
    ] = None
    CpuOptions: Optional[LaunchTemplateCpuOptions] = None
    CreditSpecification_1: Optional[CreditSpecification] = Field(
        None, alias='CreditSpecification'
    )
    DisableApiStop: Optional[Boolean] = None
    DisableApiTermination: Optional[Boolean] = None
    EbsOptimized: Optional[Boolean] = None
    ElasticGpuSpecifications: Optional[ElasticGpuSpecificationResponseList] = None
    ElasticInferenceAccelerators: Optional[
        LaunchTemplateElasticInferenceAcceleratorResponseList
    ] = None
    EnclaveOptions: Optional[LaunchTemplateEnclaveOptions] = None
    HibernationOptions: Optional[LaunchTemplateHibernationOptions] = None
    IamInstanceProfile: Optional[LaunchTemplateIamInstanceProfileSpecification] = None
    ImageId: Optional[String] = None
    InstanceInitiatedShutdownBehavior: Optional[ShutdownBehavior] = None
    InstanceMarketOptions: Optional[LaunchTemplateInstanceMarketOptions] = None
    InstanceRequirements_1: Optional[InstanceRequirements] = Field(
        None, alias='InstanceRequirements'
    )
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    KernelId: Optional[String] = None
    KeyName: Optional[String] = None
    LicenseSpecifications: Optional[LaunchTemplateLicenseList] = None
    MaintenanceOptions: Optional[LaunchTemplateInstanceMaintenanceOptions] = None
    MetadataOptions: Optional[LaunchTemplateInstanceMetadataOptions] = None
    Monitoring: Optional[LaunchTemplatesMonitoring] = None
    NetworkInterfaces: Optional[
        LaunchTemplateInstanceNetworkInterfaceSpecificationList
    ] = None
    Placement: Optional[LaunchTemplatePlacement] = None
    PrivateDnsNameOptions: Optional[LaunchTemplatePrivateDnsNameOptions] = None
    RamDiskId: Optional[String] = None
    SecurityGroupIds: Optional[ValueStringList] = None
    SecurityGroups: Optional[ValueStringList] = None
    TagSpecifications: Optional[LaunchTemplateTagSpecificationList] = None
    UserData: Optional[SensitiveUserData] = None


class RevokeSecurityGroupEgressRequest(BaseModel):
    CidrIp: Optional[String] = None
    DryRun: Optional[Boolean] = None
    FromPort: Optional[Integer] = None
    GroupId: SecurityGroupId
    IpPermissions: Optional[IpPermissionList] = None
    IpProtocol: Optional[String] = None
    SecurityGroupRuleIds: Optional[SecurityGroupRuleIdList] = None
    SourceSecurityGroupName: Optional[String] = None
    SourceSecurityGroupOwnerId: Optional[String] = None
    ToPort: Optional[Integer] = None


class RevokeSecurityGroupEgressResult(BaseModel):
    Return: Optional[Boolean] = None
    UnknownIpPermissions: Optional[IpPermissionList] = None


class RevokeSecurityGroupIngressRequest(BaseModel):
    CidrIp: Optional[String] = None
    DryRun: Optional[Boolean] = None
    FromPort: Optional[Integer] = None
    GroupId: Optional[SecurityGroupId] = None
    GroupName: Optional[SecurityGroupName] = None
    IpPermissions: Optional[IpPermissionList] = None
    IpProtocol: Optional[String] = None
    SecurityGroupRuleIds: Optional[SecurityGroupRuleIdList] = None
    SourceSecurityGroupName: Optional[String] = None
    SourceSecurityGroupOwnerId: Optional[String] = None
    ToPort: Optional[Integer] = None


class RevokeSecurityGroupIngressResult(BaseModel):
    Return: Optional[Boolean] = None
    UnknownIpPermissions: Optional[IpPermissionList] = None


class RouteTableAssociation(BaseModel):
    AssociationState: Optional[RouteTableAssociationState] = None
    GatewayId: Optional[String] = None
    Main: Optional[Boolean] = None
    RouteTableAssociationId: Optional[String] = None
    RouteTableId: Optional[String] = None
    SubnetId: Optional[String] = None


class RouteTableAssociationList(RootModel[List[RouteTableAssociation]]):
    root: List[RouteTableAssociation]


class RuleGroupRuleOptionsPair(BaseModel):
    RuleGroupArn: Optional[ResourceArn] = None
    RuleOptions: Optional[RuleOptionList] = None


class RuleGroupRuleOptionsPairList(RootModel[List[RuleGroupRuleOptionsPair]]):
    root: List[RuleGroupRuleOptionsPair]


class ScheduledInstance(BaseModel):
    AvailabilityZone: Optional[String] = None
    CreateDate: Optional[DateTime] = None
    HourlyPrice: Optional[String] = None
    InstanceCount: Optional[Integer] = None
    InstanceType: Optional[String] = None
    NetworkPlatform: Optional[String] = None
    NextSlotStartTime: Optional[DateTime] = None
    Platform: Optional[String] = None
    PreviousSlotEndTime: Optional[DateTime] = None
    Recurrence: Optional[ScheduledInstanceRecurrence] = None
    ScheduledInstanceId: Optional[String] = None
    SlotDurationInHours: Optional[Integer] = None
    TermEndDate: Optional[DateTime] = None
    TermStartDate: Optional[DateTime] = None
    TotalScheduledInstanceHours: Optional[Integer] = None


class ScheduledInstanceAvailability(BaseModel):
    AvailabilityZone: Optional[String] = None
    AvailableInstanceCount: Optional[Integer] = None
    FirstSlotStartTime: Optional[DateTime] = None
    HourlyPrice: Optional[String] = None
    InstanceType: Optional[String] = None
    MaxTermDurationInDays: Optional[Integer] = None
    MinTermDurationInDays: Optional[Integer] = None
    NetworkPlatform: Optional[String] = None
    Platform: Optional[String] = None
    PurchaseToken: Optional[String] = None
    Recurrence: Optional[ScheduledInstanceRecurrence] = None
    SlotDurationInHours: Optional[Integer] = None
    TotalScheduledInstanceHours: Optional[Integer] = None


class ScheduledInstanceAvailabilitySet(RootModel[List[ScheduledInstanceAvailability]]):
    root: List[ScheduledInstanceAvailability]


class ScheduledInstanceSet(RootModel[List[ScheduledInstance]]):
    root: List[ScheduledInstance]


class ScheduledInstancesBlockDeviceMapping(BaseModel):
    DeviceName: Optional[String] = None
    Ebs: Optional[ScheduledInstancesEbs] = None
    NoDevice: Optional[String] = None
    VirtualName: Optional[String] = None


class ScheduledInstancesBlockDeviceMappingSet(
    RootModel[List[ScheduledInstancesBlockDeviceMapping]]
):
    root: List[ScheduledInstancesBlockDeviceMapping]


class ScheduledInstancesNetworkInterface(BaseModel):
    AssociatePublicIpAddress: Optional[Boolean] = None
    DeleteOnTermination: Optional[Boolean] = None
    Description: Optional[String] = None
    DeviceIndex: Optional[Integer] = None
    Groups: Optional[ScheduledInstancesSecurityGroupIdSet] = None
    Ipv6AddressCount: Optional[Integer] = None
    Ipv6Addresses: Optional[ScheduledInstancesIpv6AddressList] = None
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    PrivateIpAddress: Optional[String] = None
    PrivateIpAddressConfigs: Optional[PrivateIpAddressConfigSet] = None
    SecondaryPrivateIpAddressCount: Optional[Integer] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')


class ScheduledInstancesNetworkInterfaceSet(
    RootModel[List[ScheduledInstancesNetworkInterface]]
):
    root: List[ScheduledInstancesNetworkInterface]


class SearchTransitGatewayRoutesResult(BaseModel):
    AdditionalRoutesAvailable: Optional[Boolean] = None
    Routes: Optional[TransitGatewayRouteList] = None


class SecurityGroup(BaseModel):
    Description: Optional[String] = None
    GroupId: Optional[String] = None
    GroupName: Optional[String] = None
    IpPermissions: Optional[IpPermissionList] = None
    IpPermissionsEgress: Optional[IpPermissionList] = None
    OwnerId: Optional[String] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class SecurityGroupList(RootModel[List[SecurityGroup]]):
    root: List[SecurityGroup]


class SpotDatafeedSubscription(BaseModel):
    Bucket: Optional[String] = None
    Fault: Optional[SpotInstanceStateFault] = None
    OwnerId: Optional[String] = None
    Prefix: Optional[String] = None
    State: Optional[DatafeedSubscriptionState] = None


class Subnet(BaseModel):
    AssignIpv6AddressOnCreation: Optional[Boolean] = None
    AvailabilityZone: Optional[String] = None
    AvailabilityZoneId: Optional[String] = None
    AvailableIpAddressCount: Optional[Integer] = None
    CidrBlock: Optional[String] = None
    CustomerOwnedIpv4Pool: Optional[CoipPoolId] = None
    DefaultForAz: Optional[Boolean] = None
    EnableDns64: Optional[Boolean] = None
    EnableLniAtDeviceIndex: Optional[Integer] = None
    Ipv6CidrBlockAssociationSet: Optional[SubnetIpv6CidrBlockAssociationSet] = None
    Ipv6Native: Optional[Boolean] = None
    MapCustomerOwnedIpOnLaunch: Optional[Boolean] = None
    MapPublicIpOnLaunch: Optional[Boolean] = None
    OutpostArn: Optional[String] = None
    OwnerId: Optional[String] = None
    PrivateDnsNameOptionsOnLaunch_1: Optional[PrivateDnsNameOptionsOnLaunch] = Field(
        None, alias='PrivateDnsNameOptionsOnLaunch'
    )
    State: Optional[SubnetState] = None
    SubnetArn: Optional[String] = None
    SubnetId: Optional[String] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class SubnetList(RootModel[List[Subnet]]):
    root: List[Subnet]


class TerminateClientVpnConnectionsResult(BaseModel):
    ClientVpnEndpointId: Optional[String] = None
    ConnectionStatuses: Optional[TerminateConnectionStatusSet] = None
    Username: Optional[String] = None


class TrafficMirrorFilter(BaseModel):
    Description: Optional[String] = None
    EgressFilterRules: Optional[TrafficMirrorFilterRuleList] = None
    IngressFilterRules: Optional[TrafficMirrorFilterRuleList] = None
    NetworkServices: Optional[TrafficMirrorNetworkServiceList] = None
    Tags: Optional[TagList] = None
    TrafficMirrorFilterId: Optional[String] = None


class TrafficMirrorFilterSet(RootModel[List[TrafficMirrorFilter]]):
    root: List[TrafficMirrorFilter]


class TransitGateway(BaseModel):
    CreationTime: Optional[DateTime] = None
    Description: Optional[String] = None
    Options: Optional[TransitGatewayOptions] = None
    OwnerId: Optional[String] = None
    State: Optional[TransitGatewayState] = None
    Tags: Optional[TagList] = None
    TransitGatewayArn: Optional[String] = None
    TransitGatewayId: Optional[String] = None


class TransitGatewayConnectPeer(BaseModel):
    ConnectPeerConfiguration: Optional[TransitGatewayConnectPeerConfiguration] = None
    CreationTime: Optional[DateTime] = None
    State: Optional[TransitGatewayConnectPeerState] = None
    Tags: Optional[TagList] = None
    TransitGatewayAttachmentId_1: Optional[TransitGatewayAttachmentId] = Field(
        None, alias='TransitGatewayAttachmentId'
    )
    TransitGatewayConnectPeerId_1: Optional[TransitGatewayConnectPeerId] = Field(
        None, alias='TransitGatewayConnectPeerId'
    )


class TransitGatewayConnectPeerList(RootModel[List[TransitGatewayConnectPeer]]):
    root: List[TransitGatewayConnectPeer]


class TransitGatewayList(RootModel[List[TransitGateway]]):
    root: List[TransitGateway]


class TunnelOption(BaseModel):
    DpdTimeoutAction: Optional[String] = None
    DpdTimeoutSeconds: Optional[Integer] = None
    EnableTunnelLifecycleControl: Optional[Boolean] = None
    IkeVersions: Optional[IKEVersionsList] = None
    LogOptions: Optional[VpnTunnelLogOptions] = None
    OutsideIpAddress: Optional[String] = None
    Phase1DHGroupNumbers: Optional[Phase1DHGroupNumbersList] = None
    Phase1EncryptionAlgorithms: Optional[Phase1EncryptionAlgorithmsList] = None
    Phase1IntegrityAlgorithms: Optional[Phase1IntegrityAlgorithmsList] = None
    Phase1LifetimeSeconds: Optional[Integer] = None
    Phase2DHGroupNumbers: Optional[Phase2DHGroupNumbersList] = None
    Phase2EncryptionAlgorithms: Optional[Phase2EncryptionAlgorithmsList] = None
    Phase2IntegrityAlgorithms: Optional[Phase2IntegrityAlgorithmsList] = None
    Phase2LifetimeSeconds: Optional[Integer] = None
    PreSharedKey: Optional[String] = None
    RekeyFuzzPercentage: Optional[Integer] = None
    RekeyMarginTimeSeconds: Optional[Integer] = None
    ReplayWindowSize: Optional[Integer] = None
    StartupAction: Optional[String] = None
    TunnelInsideCidr: Optional[String] = None
    TunnelInsideIpv6Cidr: Optional[String] = None


class TunnelOptionsList(RootModel[List[TunnelOption]]):
    root: List[TunnelOption]


class UnmonitorInstancesResult(BaseModel):
    InstanceMonitorings: Optional[InstanceMonitoringList] = None


class UpdateSecurityGroupRuleDescriptionsEgressRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupId: Optional[SecurityGroupId] = None
    GroupName: Optional[SecurityGroupName] = None
    IpPermissions: Optional[IpPermissionList] = None
    SecurityGroupRuleDescriptions: Optional[SecurityGroupRuleDescriptionList] = None


class UpdateSecurityGroupRuleDescriptionsIngressRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    GroupId: Optional[SecurityGroupId] = None
    GroupName: Optional[SecurityGroupName] = None
    IpPermissions: Optional[IpPermissionList] = None
    SecurityGroupRuleDescriptions: Optional[SecurityGroupRuleDescriptionList] = None


class VerifiedAccessEndpoint(BaseModel):
    ApplicationDomain: Optional[String] = None
    AttachmentType: Optional[VerifiedAccessEndpointAttachmentType] = None
    CreationTime: Optional[String] = None
    DeletionTime: Optional[String] = None
    Description: Optional[String] = None
    DeviceValidationDomain: Optional[String] = None
    DomainCertificateArn: Optional[String] = None
    EndpointDomain: Optional[String] = None
    EndpointType: Optional[VerifiedAccessEndpointType] = None
    LastUpdatedTime: Optional[String] = None
    LoadBalancerOptions: Optional[VerifiedAccessEndpointLoadBalancerOptions] = None
    NetworkInterfaceOptions: Optional[VerifiedAccessEndpointEniOptions] = None
    SecurityGroupIds: Optional[SecurityGroupIdList] = None
    Status: Optional[VerifiedAccessEndpointStatus] = None
    Tags: Optional[TagList] = None
    VerifiedAccessEndpointId: Optional[String] = None
    VerifiedAccessGroupId: Optional[String] = None
    VerifiedAccessInstanceId: Optional[String] = None


class VerifiedAccessEndpointList(RootModel[List[VerifiedAccessEndpoint]]):
    root: List[VerifiedAccessEndpoint]


class VerifiedAccessLogCloudWatchLogsDestination(BaseModel):
    DeliveryStatus: Optional[VerifiedAccessLogDeliveryStatus] = None
    Enabled: Optional[Boolean] = None
    LogGroup: Optional[String] = None


class VerifiedAccessLogs(BaseModel):
    CloudWatchLogs: Optional[VerifiedAccessLogCloudWatchLogsDestination] = None
    KinesisDataFirehose: Optional[VerifiedAccessLogKinesisDataFirehoseDestination] = (
        None
    )
    S3: Optional[VerifiedAccessLogS3Destination] = None


class Volume(BaseModel):
    Attachments: Optional[VolumeAttachmentList] = None
    AvailabilityZone: Optional[String] = None
    CreateTime: Optional[DateTime] = None
    Encrypted: Optional[Boolean] = None
    FastRestored: Optional[Boolean] = None
    Iops: Optional[Integer] = None
    KmsKeyId: Optional[String] = None
    MultiAttachEnabled: Optional[Boolean] = None
    OutpostArn: Optional[String] = None
    Size: Optional[Integer] = None
    SnapshotId: Optional[String] = None
    State: Optional[VolumeState] = None
    Tags: Optional[TagList] = None
    Throughput: Optional[Integer] = None
    VolumeId: Optional[String] = None
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')


class VolumeList(RootModel[List[Volume]]):
    root: List[Volume]


class VpcCidrBlockAssociation(BaseModel):
    AssociationId: Optional[String] = None
    CidrBlock: Optional[String] = None
    CidrBlockState: Optional[VpcCidrBlockState] = None


class VpcCidrBlockAssociationSet(RootModel[List[VpcCidrBlockAssociation]]):
    root: List[VpcCidrBlockAssociation]


class VpcEndpoint(BaseModel):
    CreationTimestamp: Optional[MillisecondDateTime] = None
    DnsEntries: Optional[DnsEntrySet] = None
    DnsOptions_1: Optional[DnsOptions] = Field(None, alias='DnsOptions')
    Groups: Optional[GroupIdentifierSet] = None
    IpAddressType_1: Optional[IpAddressType] = Field(None, alias='IpAddressType')
    LastError_1: Optional[LastError] = Field(None, alias='LastError')
    NetworkInterfaceIds: Optional[ValueStringList] = None
    OwnerId: Optional[String] = None
    PolicyDocument: Optional[String] = None
    PrivateDnsEnabled: Optional[Boolean] = None
    RequesterManaged: Optional[Boolean] = None
    RouteTableIds: Optional[ValueStringList] = None
    ServiceName: Optional[String] = None
    State_1: Optional[State] = Field(None, alias='State')
    SubnetIds: Optional[ValueStringList] = None
    Tags: Optional[TagList] = None
    VpcEndpointId: Optional[String] = None
    VpcEndpointType_1: Optional[VpcEndpointType] = Field(None, alias='VpcEndpointType')
    VpcId: Optional[String] = None


class VpcEndpointSet(RootModel[List[VpcEndpoint]]):
    root: List[VpcEndpoint]


class VpcPeeringConnection(BaseModel):
    AccepterVpcInfo: Optional[VpcPeeringConnectionVpcInfo] = None
    ExpirationTime: Optional[DateTime] = None
    RequesterVpcInfo: Optional[VpcPeeringConnectionVpcInfo] = None
    Status: Optional[VpcPeeringConnectionStateReason] = None
    Tags: Optional[TagList] = None
    VpcPeeringConnectionId: Optional[String] = None


class VpcPeeringConnectionList(RootModel[List[VpcPeeringConnection]]):
    root: List[VpcPeeringConnection]


class VpnConnectionOptions(BaseModel):
    EnableAcceleration: Optional[Boolean] = None
    LocalIpv4NetworkCidr: Optional[String] = None
    LocalIpv6NetworkCidr: Optional[String] = None
    OutsideIpAddressType: Optional[String] = None
    RemoteIpv4NetworkCidr: Optional[String] = None
    RemoteIpv6NetworkCidr: Optional[String] = None
    StaticRoutesOnly: Optional[Boolean] = None
    TransportTransitGatewayAttachmentId: Optional[String] = None
    TunnelInsideIpVersion_1: Optional[TunnelInsideIpVersion] = Field(
        None, alias='TunnelInsideIpVersion'
    )
    TunnelOptions: Optional[TunnelOptionsList] = None


class VpnTunnelOptionsSpecification(BaseModel):
    DPDTimeoutAction: Optional[String] = None
    DPDTimeoutSeconds: Optional[Integer] = None
    EnableTunnelLifecycleControl: Optional[Boolean] = None
    IKEVersions: Optional[IKEVersionsRequestList] = None
    LogOptions: Optional[VpnTunnelLogOptionsSpecification] = None
    Phase1DHGroupNumbers: Optional[Phase1DHGroupNumbersRequestList] = None
    Phase1EncryptionAlgorithms: Optional[Phase1EncryptionAlgorithmsRequestList] = None
    Phase1IntegrityAlgorithms: Optional[Phase1IntegrityAlgorithmsRequestList] = None
    Phase1LifetimeSeconds: Optional[Integer] = None
    Phase2DHGroupNumbers: Optional[Phase2DHGroupNumbersRequestList] = None
    Phase2EncryptionAlgorithms: Optional[Phase2EncryptionAlgorithmsRequestList] = None
    Phase2IntegrityAlgorithms: Optional[Phase2IntegrityAlgorithmsRequestList] = None
    Phase2LifetimeSeconds: Optional[Integer] = None
    PreSharedKey: Optional[String] = None
    RekeyFuzzPercentage: Optional[Integer] = None
    RekeyMarginTimeSeconds: Optional[Integer] = None
    ReplayWindowSize: Optional[Integer] = None
    StartupAction: Optional[String] = None
    TunnelInsideCidr: Optional[String] = None
    TunnelInsideIpv6Cidr: Optional[String] = None


class VpnTunnelOptionsSpecificationsList(
    RootModel[List[VpnTunnelOptionsSpecification]]
):
    root: List[VpnTunnelOptionsSpecification]


class IpPermissions(RootModel[List[IpPermission]]):
    root: List[IpPermission]


class Authentication(RootModel[List[ClientVpnAuthenticationRequest]]):
    root: List[ClientVpnAuthenticationRequest]


class BlockDeviceMapping1(RootModel[List[BlockDeviceMapping]]):
    root: List[BlockDeviceMapping]


class LaunchTemplateData(BaseModel):
    BlockDeviceMappings: Optional[LaunchTemplateBlockDeviceMappingRequestList] = None
    CapacityReservationSpecification: Optional[
        LaunchTemplateCapacityReservationSpecificationRequest
    ] = None
    CpuOptions: Optional[LaunchTemplateCpuOptionsRequest] = None
    CreditSpecification: Optional[CreditSpecificationRequest] = None
    DisableApiStop: Optional[Boolean] = None
    DisableApiTermination: Optional[Boolean] = None
    EbsOptimized: Optional[Boolean] = None
    ElasticGpuSpecifications: Optional[ElasticGpuSpecificationList] = None
    ElasticInferenceAccelerators: Optional[
        LaunchTemplateElasticInferenceAcceleratorList
    ] = None
    EnclaveOptions: Optional[LaunchTemplateEnclaveOptionsRequest] = None
    HibernationOptions: Optional[LaunchTemplateHibernationOptionsRequest] = None
    IamInstanceProfile: Optional[
        LaunchTemplateIamInstanceProfileSpecificationRequest
    ] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceInitiatedShutdownBehavior: Optional[ShutdownBehavior] = None
    InstanceMarketOptions: Optional[LaunchTemplateInstanceMarketOptionsRequest] = None
    InstanceRequirements: Optional[InstanceRequirementsRequest] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    KernelId_1: Optional[KernelId] = Field(None, alias='KernelId')
    KeyName: Optional[KeyPairName] = None
    LicenseSpecifications: Optional[LaunchTemplateLicenseSpecificationListRequest] = (
        None
    )
    MaintenanceOptions: Optional[LaunchTemplateInstanceMaintenanceOptionsRequest] = None
    MetadataOptions: Optional[LaunchTemplateInstanceMetadataOptionsRequest] = None
    Monitoring: Optional[LaunchTemplatesMonitoringRequest] = None
    NetworkInterfaces: Optional[
        LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList
    ] = None
    Placement: Optional[LaunchTemplatePlacementRequest] = None
    PrivateDnsNameOptions: Optional[LaunchTemplatePrivateDnsNameOptionsRequest] = None
    RamDiskId: Optional[RamdiskId] = None
    SecurityGroupIds: Optional[SecurityGroupIdStringList] = None
    SecurityGroups: Optional[SecurityGroupStringList] = None
    TagSpecifications: Optional[LaunchTemplateTagSpecificationRequestList] = None
    UserData: Optional[String] = None


class Options10(BaseModel):
    EnableAcceleration: Optional[Boolean] = None
    LocalIpv4NetworkCidr: Optional[String] = None
    LocalIpv6NetworkCidr: Optional[String] = None
    OutsideIpAddressType: Optional[String] = None
    RemoteIpv4NetworkCidr: Optional[String] = None
    RemoteIpv6NetworkCidr: Optional[String] = None
    StaticRoutesOnly: Optional[Boolean] = None
    TransportTransitGatewayAttachmentId: Optional[TransitGatewayAttachmentId] = None
    TunnelInsideIpVersion_1: Optional[TunnelInsideIpVersion] = Field(
        None, alias='TunnelInsideIpVersion'
    )
    TunnelOptions: Optional[VpnTunnelOptionsSpecificationsList] = None


class DiskImage1(RootModel[List[DiskImage]]):
    root: List[DiskImage]


class LoadPermission1(BaseModel):
    Add: Optional[LoadPermissionListRequest] = None
    Remove: Optional[LoadPermissionListRequest] = None


class LaunchTemplateConfig2(RootModel[List[LaunchTemplateConfig]]):
    root: List[LaunchTemplateConfig]


class TunnelOptions(BaseModel):
    DPDTimeoutAction: Optional[String] = None
    DPDTimeoutSeconds: Optional[Integer] = None
    EnableTunnelLifecycleControl: Optional[Boolean] = None
    IKEVersions: Optional[IKEVersionsRequestList] = None
    LogOptions: Optional[VpnTunnelLogOptionsSpecification] = None
    Phase1DHGroupNumbers: Optional[Phase1DHGroupNumbersRequestList] = None
    Phase1EncryptionAlgorithms: Optional[Phase1EncryptionAlgorithmsRequestList] = None
    Phase1IntegrityAlgorithms: Optional[Phase1IntegrityAlgorithmsRequestList] = None
    Phase1LifetimeSeconds: Optional[Integer] = None
    Phase2DHGroupNumbers: Optional[Phase2DHGroupNumbersRequestList] = None
    Phase2EncryptionAlgorithms: Optional[Phase2EncryptionAlgorithmsRequestList] = None
    Phase2IntegrityAlgorithms: Optional[Phase2IntegrityAlgorithmsRequestList] = None
    Phase2LifetimeSeconds: Optional[Integer] = None
    PreSharedKey: Optional[String] = None
    RekeyFuzzPercentage: Optional[Integer] = None
    RekeyMarginTimeSeconds: Optional[Integer] = None
    ReplayWindowSize: Optional[Integer] = None
    StartupAction: Optional[String] = None
    TunnelInsideCidr: Optional[String] = None
    TunnelInsideIpv6Cidr: Optional[String] = None


class LaunchSpecification5(BaseModel):
    BlockDeviceMappings: Optional[ScheduledInstancesBlockDeviceMappingSet] = None
    EbsOptimized: Optional[Boolean] = None
    IamInstanceProfile: Optional[ScheduledInstancesIamInstanceProfile] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')
    InstanceType: Optional[String] = None
    KernelId_1: Optional[KernelId] = Field(None, alias='KernelId')
    KeyName: Optional[KeyPairName] = None
    Monitoring: Optional[ScheduledInstancesMonitoring] = None
    NetworkInterfaces: Optional[ScheduledInstancesNetworkInterfaceSet] = None
    Placement: Optional[ScheduledInstancesPlacement] = None
    RamdiskId_1: Optional[RamdiskId] = Field(None, alias='RamdiskId')
    SecurityGroupIds: Optional[ScheduledInstancesSecurityGroupIdSet] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    UserData: Optional[String] = None


class AcceptVpcPeeringConnectionResult(BaseModel):
    VpcPeeringConnection_1: Optional[VpcPeeringConnection] = Field(
        None, alias='VpcPeeringConnection'
    )


class AccessScopePath(BaseModel):
    Destination: Optional[PathStatement] = None
    Source: Optional[PathStatement] = None
    ThroughResources: Optional[ThroughResourcesStatementList] = None


class AccessScopePathList(RootModel[List[AccessScopePath]]):
    root: List[AccessScopePath]


class AccessScopePathRequest(BaseModel):
    Destination: Optional[PathStatementRequest] = None
    Source: Optional[PathStatementRequest] = None
    ThroughResources: Optional[ThroughResourcesStatementRequestList] = None


class AdditionalDetail(BaseModel):
    AdditionalDetailType: Optional[String] = None
    Component: Optional[AnalysisComponent] = None
    LoadBalancers: Optional[AnalysisComponentList] = None
    RuleGroupRuleOptionsPairs: Optional[RuleGroupRuleOptionsPairList] = None
    RuleGroupTypePairs: Optional[RuleGroupTypePairList] = None
    RuleOptions: Optional[RuleOptionList] = None
    ServiceName: Optional[String] = None
    VpcEndpointService: Optional[AnalysisComponent] = None


class AdditionalDetailList(RootModel[List[AdditionalDetail]]):
    root: List[AdditionalDetail]


class AssociateInstanceEventWindowResult(BaseModel):
    InstanceEventWindow_1: Optional[InstanceEventWindow] = Field(
        None, alias='InstanceEventWindow'
    )


class AssociateVpcCidrBlockResult(BaseModel):
    CidrBlockAssociation: Optional[VpcCidrBlockAssociation] = None
    Ipv6CidrBlockAssociation: Optional[VpcIpv6CidrBlockAssociation] = None
    VpcId: Optional[String] = None


class AuthorizeSecurityGroupEgressRequest(BaseModel):
    CidrIp: Optional[String] = None
    DryRun: Optional[Boolean] = None
    FromPort: Optional[Integer] = None
    GroupId: SecurityGroupId
    IpPermissions: Optional[IpPermissionList] = None
    IpProtocol: Optional[String] = None
    SourceSecurityGroupName: Optional[String] = None
    SourceSecurityGroupOwnerId: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    ToPort: Optional[Integer] = None


class AuthorizeSecurityGroupIngressRequest(BaseModel):
    CidrIp: Optional[String] = None
    DryRun: Optional[Boolean] = None
    FromPort: Optional[Integer] = None
    GroupId: Optional[SecurityGroupId] = None
    GroupName: Optional[SecurityGroupName] = None
    IpPermissions: Optional[IpPermissionList] = None
    IpProtocol: Optional[String] = None
    SourceSecurityGroupName: Optional[String] = None
    SourceSecurityGroupOwnerId: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    ToPort: Optional[Integer] = None


class AvailableCapacity(BaseModel):
    AvailableInstanceCapacity: Optional[AvailableInstanceCapacityList] = None
    AvailableVCpus: Optional[Integer] = None


class BundleInstanceResult(BaseModel):
    BundleTask_1: Optional[BundleTask] = Field(None, alias='BundleTask')


class ConversionTask(BaseModel):
    ConversionTaskId: Optional[String] = None
    ExpirationTime: Optional[String] = None
    ImportInstance: Optional[ImportInstanceTaskDetails] = None
    ImportVolume: Optional[ImportVolumeTaskDetails] = None
    State: Optional[ConversionTaskState] = None
    StatusMessage: Optional[String] = None
    Tags: Optional[TagList] = None


class CreateDefaultSubnetResult(BaseModel):
    Subnet_1: Optional[Subnet] = Field(None, alias='Subnet')


class CreateDhcpOptionsResult(BaseModel):
    DhcpOptions_1: Optional[DhcpOptions] = Field(None, alias='DhcpOptions')


class CreateEgressOnlyInternetGatewayResult(BaseModel):
    ClientToken: Optional[String] = None
    EgressOnlyInternetGateway_1: Optional[EgressOnlyInternetGateway] = Field(
        None, alias='EgressOnlyInternetGateway'
    )


class CreateFleetError(BaseModel):
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LaunchTemplateAndOverrides: Optional[LaunchTemplateAndOverridesResponse] = None
    Lifecycle: Optional[InstanceLifecycle] = None


class CreateFleetErrorsSet(RootModel[List[CreateFleetError]]):
    root: List[CreateFleetError]


class CreateFleetInstance(BaseModel):
    InstanceIds: Optional[InstanceIdsSet] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    LaunchTemplateAndOverrides: Optional[LaunchTemplateAndOverridesResponse] = None
    Lifecycle: Optional[InstanceLifecycle] = None
    Platform: Optional[PlatformValues] = None


class CreateFleetInstancesSet(RootModel[List[CreateFleetInstance]]):
    root: List[CreateFleetInstance]


class CreateFleetResult(BaseModel):
    Errors: Optional[CreateFleetErrorsSet] = None
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    Instances: Optional[CreateFleetInstancesSet] = None


class CreateInstanceEventWindowResult(BaseModel):
    InstanceEventWindow_1: Optional[InstanceEventWindow] = Field(
        None, alias='InstanceEventWindow'
    )


class CreateInstanceExportTaskResult(BaseModel):
    ExportTask_1: Optional[ExportTask] = Field(None, alias='ExportTask')


class CreateInternetGatewayResult(BaseModel):
    InternetGateway_1: Optional[InternetGateway] = Field(None, alias='InternetGateway')


class CreateIpamPoolResult(BaseModel):
    IpamPool_1: Optional[IpamPool] = Field(None, alias='IpamPool')


class CreateIpamResult(BaseModel):
    Ipam_1: Optional[Ipam] = Field(None, alias='Ipam')


class CreateLaunchTemplateRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    LaunchTemplateData: RequestLaunchTemplateData
    LaunchTemplateName_1: LaunchTemplateName = Field(..., alias='LaunchTemplateName')
    TagSpecifications: Optional[TagSpecificationList] = None
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )


class CreateLaunchTemplateVersionRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    LaunchTemplateData: RequestLaunchTemplateData
    LaunchTemplateId_1: Optional[LaunchTemplateId] = Field(
        None, alias='LaunchTemplateId'
    )
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    ResolveAlias: Optional[Boolean] = None
    SourceVersion: Optional[String] = None
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )


class CreateLocalGatewayRouteTableResult(BaseModel):
    LocalGatewayRouteTable_1: Optional[LocalGatewayRouteTable] = Field(
        None, alias='LocalGatewayRouteTable'
    )


class CreateNatGatewayResult(BaseModel):
    ClientToken: Optional[String] = None
    NatGateway_1: Optional[NatGateway] = Field(None, alias='NatGateway')


class CreateNetworkAclResult(BaseModel):
    NetworkAcl_1: Optional[NetworkAcl] = Field(None, alias='NetworkAcl')


class CreateNetworkInsightsPathResult(BaseModel):
    NetworkInsightsPath_1: Optional[NetworkInsightsPath] = Field(
        None, alias='NetworkInsightsPath'
    )


class CreateNetworkInterfacePermissionResult(BaseModel):
    InterfacePermission: Optional[NetworkInterfacePermission] = None


class CreateNetworkInterfaceRequest(BaseModel):
    ClientToken: Optional[String] = None
    Description: Optional[String] = None
    DryRun: Optional[Boolean] = None
    Groups: Optional[SecurityGroupIdStringList] = None
    InterfaceType: Optional[NetworkInterfaceCreationType] = None
    Ipv4PrefixCount: Optional[Integer] = None
    Ipv4Prefixes: Optional[Ipv4PrefixList] = None
    Ipv6AddressCount: Optional[Integer] = None
    Ipv6Addresses: Optional[InstanceIpv6AddressList] = None
    Ipv6PrefixCount: Optional[Integer] = None
    Ipv6Prefixes: Optional[Ipv6PrefixList] = None
    PrivateIpAddress: Optional[String] = None
    PrivateIpAddresses: Optional[PrivateIpAddressSpecificationList] = None
    SecondaryPrivateIpAddressCount: Optional[Integer] = None
    SubnetId_1: SubnetId = Field(..., alias='SubnetId')
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateSpotDatafeedSubscriptionResult(BaseModel):
    SpotDatafeedSubscription_1: Optional[SpotDatafeedSubscription] = Field(
        None, alias='SpotDatafeedSubscription'
    )


class CreateSubnetResult(BaseModel):
    Subnet_1: Optional[Subnet] = Field(None, alias='Subnet')


class CreateTrafficMirrorFilterResult(BaseModel):
    ClientToken: Optional[String] = None
    TrafficMirrorFilter_1: Optional[TrafficMirrorFilter] = Field(
        None, alias='TrafficMirrorFilter'
    )


class CreateTransitGatewayConnectPeerResult(BaseModel):
    TransitGatewayConnectPeer_1: Optional[TransitGatewayConnectPeer] = Field(
        None, alias='TransitGatewayConnectPeer'
    )


class CreateTransitGatewayResult(BaseModel):
    TransitGateway_1: Optional[TransitGateway] = Field(None, alias='TransitGateway')


class CreateVerifiedAccessEndpointResult(BaseModel):
    VerifiedAccessEndpoint_1: Optional[VerifiedAccessEndpoint] = Field(
        None, alias='VerifiedAccessEndpoint'
    )


class CreateVpcEndpointResult(BaseModel):
    ClientToken: Optional[String] = None
    VpcEndpoint_1: Optional[VpcEndpoint] = Field(None, alias='VpcEndpoint')


class CreateVpcPeeringConnectionResult(BaseModel):
    VpcPeeringConnection_1: Optional[VpcPeeringConnection] = Field(
        None, alias='VpcPeeringConnection'
    )


class DeleteIpamPoolResult(BaseModel):
    IpamPool_1: Optional[IpamPool] = Field(None, alias='IpamPool')


class DeleteIpamResult(BaseModel):
    Ipam_1: Optional[Ipam] = Field(None, alias='Ipam')


class DeleteLocalGatewayRouteTableResult(BaseModel):
    LocalGatewayRouteTable_1: Optional[LocalGatewayRouteTable] = Field(
        None, alias='LocalGatewayRouteTable'
    )


class DeleteTransitGatewayConnectPeerResult(BaseModel):
    TransitGatewayConnectPeer_1: Optional[TransitGatewayConnectPeer] = Field(
        None, alias='TransitGatewayConnectPeer'
    )


class DeleteTransitGatewayResult(BaseModel):
    TransitGateway_1: Optional[TransitGateway] = Field(None, alias='TransitGateway')


class DeleteVerifiedAccessEndpointResult(BaseModel):
    VerifiedAccessEndpoint_1: Optional[VerifiedAccessEndpoint] = Field(
        None, alias='VerifiedAccessEndpoint'
    )


class DeprovisionIpamPoolCidrResult(BaseModel):
    IpamPoolCidr_1: Optional[IpamPoolCidr] = Field(None, alias='IpamPoolCidr')


class DeregisterInstanceEventNotificationAttributesRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    InstanceTagAttribute: Optional[DeregisterInstanceTagAttributeRequest] = None


class DescribeClientVpnEndpointsResult(BaseModel):
    ClientVpnEndpoints: Optional[EndpointSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeConversionTaskList(RootModel[List[ConversionTask]]):
    root: List[ConversionTask]


class DescribeConversionTasksResult(BaseModel):
    ConversionTasks: Optional[DescribeConversionTaskList] = None


class DescribeDhcpOptionsResult(BaseModel):
    DhcpOptions: Optional[DhcpOptionsList] = None
    NextToken: Optional[String] = None


class DescribeEgressOnlyInternetGatewaysResult(BaseModel):
    EgressOnlyInternetGateways: Optional[EgressOnlyInternetGatewayList] = None
    NextToken: Optional[String] = None


class DescribeElasticGpusResult(BaseModel):
    ElasticGpuSet_1: Optional[ElasticGpuSet] = Field(None, alias='ElasticGpuSet')
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class DescribeExportImageTasksResult(BaseModel):
    ExportImageTasks: Optional[ExportImageTaskList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeExportTasksResult(BaseModel):
    ExportTasks: Optional[ExportTaskList] = None


class DescribeFastLaunchImagesResult(BaseModel):
    FastLaunchImages: Optional[DescribeFastLaunchImagesSuccessSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeFleetError(BaseModel):
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    LaunchTemplateAndOverrides: Optional[LaunchTemplateAndOverridesResponse] = None
    Lifecycle: Optional[InstanceLifecycle] = None


class DescribeFleetsErrorSet(RootModel[List[DescribeFleetError]]):
    root: List[DescribeFleetError]


class DescribeFleetsInstances(BaseModel):
    InstanceIds: Optional[InstanceIdsSet] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    LaunchTemplateAndOverrides: Optional[LaunchTemplateAndOverridesResponse] = None
    Lifecycle: Optional[InstanceLifecycle] = None
    Platform: Optional[PlatformValues] = None


class DescribeFleetsInstancesSet(RootModel[List[DescribeFleetsInstances]]):
    root: List[DescribeFleetsInstances]


class DescribeFpgaImageAttributeResult(BaseModel):
    FpgaImageAttribute_1: Optional[FpgaImageAttribute] = Field(
        None, alias='FpgaImageAttribute'
    )


class DescribeFpgaImagesResult(BaseModel):
    FpgaImages: Optional[FpgaImageList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeHostReservationsResult(BaseModel):
    HostReservationSet_1: Optional[HostReservationSet] = Field(
        None, alias='HostReservationSet'
    )
    NextToken: Optional[String] = None


class DescribeImagesResult(BaseModel):
    Images: Optional[ImageList] = None
    NextToken: Optional[String] = None


class DescribeImportImageTasksResult(BaseModel):
    ImportImageTasks: Optional[ImportImageTaskList] = None
    NextToken: Optional[String] = None


class DescribeImportSnapshotTasksResult(BaseModel):
    ImportSnapshotTasks: Optional[ImportSnapshotTaskList] = None
    NextToken: Optional[String] = None


class DescribeInstanceEventWindowsResult(BaseModel):
    InstanceEventWindows: Optional[InstanceEventWindowSet] = None
    NextToken: Optional[String] = None


class DescribeInstanceStatusResult(BaseModel):
    InstanceStatuses: Optional[InstanceStatusList] = None
    NextToken: Optional[String] = None


class DescribeInstanceTypesResult(BaseModel):
    InstanceTypes: Optional[InstanceTypeInfoList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeInternetGatewaysResult(BaseModel):
    InternetGateways: Optional[InternetGatewayList] = None
    NextToken: Optional[String] = None


class DescribeIpamPoolsResult(BaseModel):
    IpamPools: Optional[IpamPoolSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpamsResult(BaseModel):
    Ipams: Optional[IpamSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeIpv6PoolsResult(BaseModel):
    Ipv6Pools: Optional[Ipv6PoolSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeLocalGatewayRouteTablesResult(BaseModel):
    LocalGatewayRouteTables: Optional[LocalGatewayRouteTableSet] = None
    NextToken: Optional[String] = None


class DescribeNatGatewaysResult(BaseModel):
    NatGateways: Optional[NatGatewayList] = None
    NextToken: Optional[String] = None


class DescribeNetworkAclsResult(BaseModel):
    NetworkAcls: Optional[NetworkAclList] = None
    NextToken: Optional[String] = None


class DescribeNetworkInsightsPathsResult(BaseModel):
    NetworkInsightsPaths: Optional[NetworkInsightsPathList] = None
    NextToken: Optional[String] = None


class DescribeNetworkInterfaceAttributeResult(BaseModel):
    Attachment: Optional[NetworkInterfaceAttachment] = None
    Description: Optional[AttributeValue] = None
    Groups: Optional[GroupIdentifierList] = None
    NetworkInterfaceId: Optional[String] = None
    SourceDestCheck: Optional[AttributeBooleanValue] = None


class DescribeNetworkInterfacePermissionsResult(BaseModel):
    NetworkInterfacePermissions: Optional[NetworkInterfacePermissionList] = None
    NextToken: Optional[String] = None


class DescribePublicIpv4PoolsResult(BaseModel):
    NextToken: Optional[String] = None
    PublicIpv4Pools: Optional[PublicIpv4PoolSet] = None


class DescribeReservedInstancesModificationsResult(BaseModel):
    NextToken: Optional[String] = None
    ReservedInstancesModifications: Optional[ReservedInstancesModificationList] = None


class DescribeScheduledInstanceAvailabilityResult(BaseModel):
    NextToken: Optional[String] = None
    ScheduledInstanceAvailabilitySet_1: Optional[ScheduledInstanceAvailabilitySet] = (
        Field(None, alias='ScheduledInstanceAvailabilitySet')
    )


class DescribeScheduledInstancesResult(BaseModel):
    NextToken: Optional[String] = None
    ScheduledInstanceSet_1: Optional[ScheduledInstanceSet] = Field(
        None, alias='ScheduledInstanceSet'
    )


class DescribeSecurityGroupsResult(BaseModel):
    NextToken: Optional[String] = None
    SecurityGroups: Optional[SecurityGroupList] = None


class DescribeSpotDatafeedSubscriptionResult(BaseModel):
    SpotDatafeedSubscription_1: Optional[SpotDatafeedSubscription] = Field(
        None, alias='SpotDatafeedSubscription'
    )


class DescribeSubnetsResult(BaseModel):
    NextToken: Optional[String] = None
    Subnets: Optional[SubnetList] = None


class DescribeTrafficMirrorFiltersResult(BaseModel):
    NextToken: Optional[String] = None
    TrafficMirrorFilters: Optional[TrafficMirrorFilterSet] = None


class DescribeTransitGatewayConnectPeersResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGatewayConnectPeers: Optional[TransitGatewayConnectPeerList] = None


class DescribeTransitGatewaysResult(BaseModel):
    NextToken: Optional[String] = None
    TransitGateways: Optional[TransitGatewayList] = None


class DescribeVerifiedAccessEndpointsResult(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VerifiedAccessEndpoints: Optional[VerifiedAccessEndpointList] = None


class DescribeVolumesResult(BaseModel):
    NextToken: Optional[String] = None
    Volumes: Optional[VolumeList] = None


class DescribeVpcEndpointsResult(BaseModel):
    NextToken: Optional[String] = None
    VpcEndpoints: Optional[VpcEndpointSet] = None


class DescribeVpcPeeringConnectionsResult(BaseModel):
    NextToken: Optional[String] = None
    VpcPeeringConnections: Optional[VpcPeeringConnectionList] = None


class DisassociateInstanceEventWindowResult(BaseModel):
    InstanceEventWindow_1: Optional[InstanceEventWindow] = Field(
        None, alias='InstanceEventWindow'
    )


class DisassociateVpcCidrBlockResult(BaseModel):
    CidrBlockAssociation: Optional[VpcCidrBlockAssociation] = None
    Ipv6CidrBlockAssociation: Optional[VpcIpv6CidrBlockAssociation] = None
    VpcId: Optional[String] = None


class FleetLaunchTemplateConfig(BaseModel):
    LaunchTemplateSpecification: Optional[FleetLaunchTemplateSpecification] = None
    Overrides: Optional[FleetLaunchTemplateOverridesList] = None


class FleetLaunchTemplateConfigList(RootModel[List[FleetLaunchTemplateConfig]]):
    root: List[FleetLaunchTemplateConfig]


class FleetLaunchTemplateOverridesListRequest(
    RootModel[List[FleetLaunchTemplateOverridesRequest]]
):
    root: List[FleetLaunchTemplateOverridesRequest]


class GetHostReservationPurchasePreviewResult(BaseModel):
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Purchase: Optional[PurchaseSet] = None
    TotalHourlyPrice: Optional[String] = None
    TotalUpfrontPrice: Optional[String] = None


class GetIpamDiscoveredAccountsResult(BaseModel):
    IpamDiscoveredAccounts: Optional[IpamDiscoveredAccountSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetIpamDiscoveredResourceCidrsResult(BaseModel):
    IpamDiscoveredResourceCidrs: Optional[IpamDiscoveredResourceCidrSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetIpamPoolCidrsResult(BaseModel):
    IpamPoolCidrs: Optional[IpamPoolCidrSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetIpamResourceCidrsResult(BaseModel):
    IpamResourceCidrs: Optional[IpamResourceCidrSet] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetLaunchTemplateDataResult(BaseModel):
    LaunchTemplateData: Optional[ResponseLaunchTemplateData] = None


class Host(BaseModel):
    AllocationTime: Optional[DateTime] = None
    AllowsMultipleInstanceTypes_1: Optional[AllowsMultipleInstanceTypes] = Field(
        None, alias='AllowsMultipleInstanceTypes'
    )
    AutoPlacement_1: Optional[AutoPlacement] = Field(None, alias='AutoPlacement')
    AvailabilityZone: Optional[String] = None
    AvailabilityZoneId: Optional[String] = None
    AvailableCapacity_1: Optional[AvailableCapacity] = Field(
        None, alias='AvailableCapacity'
    )
    ClientToken: Optional[String] = None
    HostId: Optional[String] = None
    HostMaintenance_1: Optional[HostMaintenance] = Field(None, alias='HostMaintenance')
    HostProperties_1: Optional[HostProperties] = Field(None, alias='HostProperties')
    HostRecovery_1: Optional[HostRecovery] = Field(None, alias='HostRecovery')
    HostReservationId: Optional[String] = None
    Instances: Optional[HostInstanceList] = None
    MemberOfServiceLinkedResourceGroup: Optional[Boolean] = None
    OutpostArn: Optional[String] = None
    OwnerId: Optional[String] = None
    ReleaseTime: Optional[DateTime] = None
    State: Optional[AllocationState] = None
    Tags: Optional[TagList] = None


class HostList(RootModel[List[Host]]):
    root: List[Host]


class ImportInstanceResult(BaseModel):
    ConversionTask_1: Optional[ConversionTask] = Field(None, alias='ConversionTask')


class ImportVolumeResult(BaseModel):
    ConversionTask_1: Optional[ConversionTask] = Field(None, alias='ConversionTask')


class Instance(BaseModel):
    AmiLaunchIndex: Optional[Integer] = None
    Architecture: Optional[ArchitectureValues] = None
    BlockDeviceMappings: Optional[InstanceBlockDeviceMappingList] = None
    BootMode: Optional[BootModeValues] = None
    CapacityReservationId: Optional[String] = None
    CapacityReservationSpecification: Optional[
        CapacityReservationSpecificationResponse
    ] = None
    ClientToken: Optional[String] = None
    CpuOptions_1: Optional[CpuOptions] = Field(None, alias='CpuOptions')
    CurrentInstanceBootMode: Optional[InstanceBootModeValues] = None
    EbsOptimized: Optional[Boolean] = None
    ElasticGpuAssociations: Optional[ElasticGpuAssociationList] = None
    ElasticInferenceAcceleratorAssociations: Optional[
        ElasticInferenceAcceleratorAssociationList
    ] = None
    EnaSupport: Optional[Boolean] = None
    EnclaveOptions_1: Optional[EnclaveOptions] = Field(None, alias='EnclaveOptions')
    HibernationOptions_1: Optional[HibernationOptions] = Field(
        None, alias='HibernationOptions'
    )
    Hypervisor: Optional[HypervisorType] = None
    IamInstanceProfile_1: Optional[IamInstanceProfile] = Field(
        None, alias='IamInstanceProfile'
    )
    ImageId: Optional[String] = None
    InstanceId: Optional[String] = None
    InstanceLifecycle: Optional[InstanceLifecycleType] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Ipv6Address: Optional[String] = None
    KernelId: Optional[String] = None
    KeyName: Optional[String] = None
    LaunchTime: Optional[DateTime] = None
    Licenses: Optional[LicenseList] = None
    MaintenanceOptions: Optional[InstanceMaintenanceOptions] = None
    MetadataOptions: Optional[InstanceMetadataOptionsResponse] = None
    Monitoring_1: Optional[Monitoring] = Field(None, alias='Monitoring')
    NetworkInterfaces: Optional[InstanceNetworkInterfaceList] = None
    OutpostArn: Optional[String] = None
    Placement_1: Optional[Placement] = Field(None, alias='Placement')
    Platform: Optional[PlatformValues] = None
    PlatformDetails: Optional[String] = None
    PrivateDnsName: Optional[String] = None
    PrivateDnsNameOptions: Optional[PrivateDnsNameOptionsResponse] = None
    PrivateIpAddress: Optional[String] = None
    ProductCodes: Optional[ProductCodeList] = None
    PublicDnsName: Optional[String] = None
    PublicIpAddress: Optional[String] = None
    RamdiskId: Optional[String] = None
    RootDeviceName: Optional[String] = None
    RootDeviceType: Optional[DeviceType] = None
    SecurityGroups: Optional[GroupIdentifierList] = None
    SourceDestCheck: Optional[Boolean] = None
    SpotInstanceRequestId: Optional[String] = None
    SriovNetSupport: Optional[String] = None
    State: Optional[InstanceState] = None
    StateReason_1: Optional[StateReason] = Field(None, alias='StateReason')
    StateTransitionReason: Optional[String] = None
    SubnetId: Optional[String] = None
    Tags: Optional[TagList] = None
    TpmSupport: Optional[String] = None
    UsageOperation: Optional[String] = None
    UsageOperationUpdateTime: Optional[MillisecondDateTime] = None
    VirtualizationType_1: Optional[VirtualizationType] = Field(
        None, alias='VirtualizationType'
    )
    VpcId: Optional[String] = None


class InstanceList(RootModel[List[Instance]]):
    root: List[Instance]


class InstanceNetworkInterfaceSpecification(BaseModel):
    AssociateCarrierIpAddress: Optional[Boolean] = None
    AssociatePublicIpAddress: Optional[Boolean] = None
    DeleteOnTermination: Optional[Boolean] = None
    Description: Optional[String] = None
    DeviceIndex: Optional[Integer] = None
    Groups: Optional[SecurityGroupIdStringList] = None
    InterfaceType: Optional[String] = None
    Ipv4PrefixCount: Optional[Integer] = None
    Ipv4Prefixes: Optional[Ipv4PrefixList] = None
    Ipv6AddressCount: Optional[Integer] = None
    Ipv6Addresses: Optional[InstanceIpv6AddressList] = None
    Ipv6PrefixCount: Optional[Integer] = None
    Ipv6Prefixes: Optional[Ipv6PrefixList] = None
    NetworkCardIndex: Optional[Integer] = None
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    PrivateIpAddress: Optional[String] = None
    PrivateIpAddresses: Optional[PrivateIpAddressSpecificationList] = None
    SecondaryPrivateIpAddressCount: Optional[Integer] = None
    SubnetId: Optional[String] = None


class InstanceNetworkInterfaceSpecificationList(
    RootModel[List[InstanceNetworkInterfaceSpecification]]
):
    root: List[InstanceNetworkInterfaceSpecification]


class LaunchSpecification(BaseModel):
    AddressingType: Optional[String] = None
    BlockDeviceMappings: Optional[BlockDeviceMappingList] = None
    EbsOptimized: Optional[Boolean] = None
    IamInstanceProfile: Optional[IamInstanceProfileSpecification] = None
    ImageId: Optional[String] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    KernelId: Optional[String] = None
    KeyName: Optional[String] = None
    Monitoring: Optional[RunInstancesMonitoringEnabled] = None
    NetworkInterfaces: Optional[InstanceNetworkInterfaceSpecificationList] = None
    Placement: Optional[SpotPlacement] = None
    RamdiskId: Optional[String] = None
    SecurityGroups: Optional[GroupIdentifierList] = None
    SubnetId: Optional[String] = None
    UserData: Optional[SensitiveUserData] = None


class LaunchTemplateVersion(BaseModel):
    CreateTime: Optional[DateTime] = None
    CreatedBy: Optional[String] = None
    DefaultVersion: Optional[Boolean] = None
    LaunchTemplateData: Optional[ResponseLaunchTemplateData] = None
    LaunchTemplateId: Optional[String] = None
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )
    VersionNumber: Optional[Long] = None


class LaunchTemplateVersionSet(RootModel[List[LaunchTemplateVersion]]):
    root: List[LaunchTemplateVersion]


class ModifyManagedPrefixListRequest(BaseModel):
    AddEntries: Optional[AddPrefixListEntries] = None
    CurrentVersion: Optional[Long] = None
    DryRun: Optional[Boolean] = None
    MaxEntries: Optional[Integer] = None
    PrefixListId: PrefixListResourceId
    PrefixListName: Optional[String] = None
    RemoveEntries: Optional[RemovePrefixListEntries] = None


class ModifyTrafficMirrorFilterNetworkServicesResult(BaseModel):
    TrafficMirrorFilter_1: Optional[TrafficMirrorFilter] = Field(
        None, alias='TrafficMirrorFilter'
    )


class ModifyTransitGatewayResult(BaseModel):
    TransitGateway_1: Optional[TransitGateway] = Field(None, alias='TransitGateway')


class ModifyVerifiedAccessEndpointResult(BaseModel):
    VerifiedAccessEndpoint_1: Optional[VerifiedAccessEndpoint] = Field(
        None, alias='VerifiedAccessEndpoint'
    )


class ModifyVpnTunnelOptionsSpecification(BaseModel):
    DPDTimeoutAction: Optional[String] = None
    DPDTimeoutSeconds: Optional[Integer] = None
    EnableTunnelLifecycleControl: Optional[Boolean] = None
    IKEVersions: Optional[IKEVersionsRequestList] = None
    LogOptions: Optional[VpnTunnelLogOptionsSpecification] = None
    Phase1DHGroupNumbers: Optional[Phase1DHGroupNumbersRequestList] = None
    Phase1EncryptionAlgorithms: Optional[Phase1EncryptionAlgorithmsRequestList] = None
    Phase1IntegrityAlgorithms: Optional[Phase1IntegrityAlgorithmsRequestList] = None
    Phase1LifetimeSeconds: Optional[Integer] = None
    Phase2DHGroupNumbers: Optional[Phase2DHGroupNumbersRequestList] = None
    Phase2EncryptionAlgorithms: Optional[Phase2EncryptionAlgorithmsRequestList] = None
    Phase2IntegrityAlgorithms: Optional[Phase2IntegrityAlgorithmsRequestList] = None
    Phase2LifetimeSeconds: Optional[Integer] = None
    PreSharedKey: Optional[String] = None
    RekeyFuzzPercentage: Optional[Integer] = None
    RekeyMarginTimeSeconds: Optional[Integer] = None
    ReplayWindowSize: Optional[Integer] = None
    StartupAction: Optional[String] = None
    TunnelInsideCidr: Optional[String] = None
    TunnelInsideIpv6Cidr: Optional[String] = None


class NetworkInsightsAccessScopeContent(BaseModel):
    ExcludePaths: Optional[AccessScopePathList] = None
    MatchPaths: Optional[AccessScopePathList] = None
    NetworkInsightsAccessScopeId_1: Optional[NetworkInsightsAccessScopeId] = Field(
        None, alias='NetworkInsightsAccessScopeId'
    )


class NetworkInterface(BaseModel):
    Association: Optional[NetworkInterfaceAssociation] = None
    Attachment: Optional[NetworkInterfaceAttachment] = None
    AvailabilityZone: Optional[String] = None
    DenyAllIgwTraffic: Optional[Boolean] = None
    Description: Optional[String] = None
    Groups: Optional[GroupIdentifierList] = None
    InterfaceType: Optional[NetworkInterfaceType] = None
    Ipv4Prefixes: Optional[Ipv4PrefixesList] = None
    Ipv6Address: Optional[String] = None
    Ipv6Addresses: Optional[NetworkInterfaceIpv6AddressesList] = None
    Ipv6Native: Optional[Boolean] = None
    Ipv6Prefixes: Optional[Ipv6PrefixesList] = None
    MacAddress: Optional[String] = None
    NetworkInterfaceId: Optional[String] = None
    OutpostArn: Optional[String] = None
    OwnerId: Optional[String] = None
    PrivateDnsName: Optional[String] = None
    PrivateIpAddress: Optional[String] = None
    PrivateIpAddresses: Optional[NetworkInterfacePrivateIpAddressList] = None
    RequesterId: Optional[String] = None
    RequesterManaged: Optional[Boolean] = None
    SourceDestCheck: Optional[Boolean] = None
    Status: Optional[NetworkInterfaceStatus] = None
    SubnetId: Optional[String] = None
    TagSet: Optional[TagList] = None
    VpcId: Optional[String] = None


class NetworkInterfaceList(RootModel[List[NetworkInterface]]):
    root: List[NetworkInterface]


class PathComponent(BaseModel):
    AclRule: Optional[AnalysisAclRule] = None
    AdditionalDetails: Optional[AdditionalDetailList] = None
    AttachedTo: Optional[AnalysisComponent] = None
    Component: Optional[AnalysisComponent] = None
    DestinationVpc: Optional[AnalysisComponent] = None
    ElasticLoadBalancerListener: Optional[AnalysisComponent] = None
    Explanations: Optional[ExplanationList] = None
    FirewallStatefulRule_1: Optional[FirewallStatefulRule] = Field(
        None, alias='FirewallStatefulRule'
    )
    FirewallStatelessRule_1: Optional[FirewallStatelessRule] = Field(
        None, alias='FirewallStatelessRule'
    )
    InboundHeader: Optional[AnalysisPacketHeader] = None
    OutboundHeader: Optional[AnalysisPacketHeader] = None
    RouteTableRoute: Optional[AnalysisRouteTableRoute] = None
    SecurityGroupRule: Optional[AnalysisSecurityGroupRule] = None
    SequenceNumber: Optional[Integer] = None
    ServiceName: Optional[String] = None
    SourceVpc: Optional[AnalysisComponent] = None
    Subnet: Optional[AnalysisComponent] = None
    TransitGateway: Optional[AnalysisComponent] = None
    TransitGatewayRouteTableRoute_1: Optional[TransitGatewayRouteTableRoute] = Field(
        None, alias='TransitGatewayRouteTableRoute'
    )
    Vpc: Optional[AnalysisComponent] = None


class PathComponentList(RootModel[List[PathComponent]]):
    root: List[PathComponent]


class PurchaseHostReservationResult(BaseModel):
    ClientToken: Optional[String] = None
    CurrencyCode: Optional[CurrencyCodeValues] = None
    Purchase: Optional[PurchaseSet] = None
    TotalHourlyPrice: Optional[String] = None
    TotalUpfrontPrice: Optional[String] = None


class PurchasedScheduledInstanceSet(RootModel[List[ScheduledInstance]]):
    root: List[ScheduledInstance]


class RequestSpotLaunchSpecification(BaseModel):
    AddressingType: Optional[String] = None
    BlockDeviceMappings: Optional[BlockDeviceMappingList] = None
    EbsOptimized: Optional[Boolean] = None
    IamInstanceProfile: Optional[IamInstanceProfileSpecification] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    KernelId_1: Optional[KernelId] = Field(None, alias='KernelId')
    KeyName: Optional[KeyPairName] = None
    Monitoring: Optional[RunInstancesMonitoringEnabled] = None
    NetworkInterfaces: Optional[InstanceNetworkInterfaceSpecificationList] = None
    Placement: Optional[SpotPlacement] = None
    RamdiskId_1: Optional[RamdiskId] = Field(None, alias='RamdiskId')
    SecurityGroupIds: Optional[RequestSpotLaunchSpecificationSecurityGroupIdList] = None
    SecurityGroups: Optional[RequestSpotLaunchSpecificationSecurityGroupList] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    UserData: Optional[SensitiveUserData] = None


class Reservation(BaseModel):
    Groups: Optional[GroupIdentifierList] = None
    Instances: Optional[InstanceList] = None
    OwnerId: Optional[String] = None
    RequesterId: Optional[String] = None
    ReservationId: Optional[String] = None


class ReservationList(RootModel[List[Reservation]]):
    root: List[Reservation]


class RouteTable(BaseModel):
    Associations: Optional[RouteTableAssociationList] = None
    OwnerId: Optional[String] = None
    PropagatingVgws: Optional[PropagatingVgwList] = None
    RouteTableId: Optional[String] = None
    Routes: Optional[RouteList] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class RouteTableList(RootModel[List[RouteTable]]):
    root: List[RouteTable]


class RunInstancesRequest(BaseModel):
    AdditionalInfo: Optional[String] = None
    BlockDeviceMappings: Optional[BlockDeviceMappingRequestList] = None
    CapacityReservationSpecification_1: Optional[CapacityReservationSpecification] = (
        Field(None, alias='CapacityReservationSpecification')
    )
    ClientToken: Optional[String] = None
    CpuOptions: Optional[CpuOptionsRequest] = None
    CreditSpecification: Optional[CreditSpecificationRequest] = None
    DisableApiStop: Optional[Boolean] = None
    DisableApiTermination: Optional[Boolean] = None
    DryRun: Optional[Boolean] = None
    EbsOptimized: Optional[Boolean] = None
    ElasticGpuSpecification: Optional[ElasticGpuSpecifications] = None
    ElasticInferenceAccelerators_1: Optional[ElasticInferenceAccelerators] = Field(
        None, alias='ElasticInferenceAccelerators'
    )
    EnclaveOptions: Optional[EnclaveOptionsRequest] = None
    HibernationOptions: Optional[HibernationOptionsRequest] = None
    IamInstanceProfile: Optional[IamInstanceProfileSpecification] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceInitiatedShutdownBehavior: Optional[ShutdownBehavior] = None
    InstanceMarketOptions: Optional[InstanceMarketOptionsRequest] = None
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    Ipv6AddressCount: Optional[Integer] = None
    Ipv6Addresses: Optional[InstanceIpv6AddressList] = None
    KernelId_1: Optional[KernelId] = Field(None, alias='KernelId')
    KeyName: Optional[KeyPairName] = None
    LaunchTemplate: Optional[LaunchTemplateSpecification] = None
    LicenseSpecifications: Optional[LicenseSpecificationListRequest] = None
    MaintenanceOptions: Optional[InstanceMaintenanceOptionsRequest] = None
    MaxCount: Integer
    MetadataOptions: Optional[InstanceMetadataOptionsRequest] = None
    MinCount: Integer
    Monitoring: Optional[RunInstancesMonitoringEnabled] = None
    NetworkInterfaces: Optional[InstanceNetworkInterfaceSpecificationList] = None
    Placement_1: Optional[Placement] = Field(None, alias='Placement')
    PrivateDnsNameOptions: Optional[PrivateDnsNameOptionsRequest] = None
    PrivateIpAddress: Optional[String] = None
    RamdiskId_1: Optional[RamdiskId] = Field(None, alias='RamdiskId')
    SecurityGroupIds: Optional[SecurityGroupIdStringList] = None
    SecurityGroups: Optional[SecurityGroupStringList] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    TagSpecifications: Optional[TagSpecificationList] = None
    UserData: Optional[RunInstancesUserData] = None


class ScheduledInstancesLaunchSpecification(BaseModel):
    BlockDeviceMappings: Optional[ScheduledInstancesBlockDeviceMappingSet] = None
    EbsOptimized: Optional[Boolean] = None
    IamInstanceProfile: Optional[ScheduledInstancesIamInstanceProfile] = None
    ImageId_1: ImageId = Field(..., alias='ImageId')
    InstanceType: Optional[String] = None
    KernelId_1: Optional[KernelId] = Field(None, alias='KernelId')
    KeyName: Optional[KeyPairName] = None
    Monitoring: Optional[ScheduledInstancesMonitoring] = None
    NetworkInterfaces: Optional[ScheduledInstancesNetworkInterfaceSet] = None
    Placement: Optional[ScheduledInstancesPlacement] = None
    RamdiskId_1: Optional[RamdiskId] = Field(None, alias='RamdiskId')
    SecurityGroupIds: Optional[ScheduledInstancesSecurityGroupIdSet] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    UserData: Optional[String] = None


class SpotFleetLaunchSpecification(BaseModel):
    AddressingType: Optional[String] = None
    BlockDeviceMappings: Optional[BlockDeviceMappingList] = None
    EbsOptimized: Optional[Boolean] = None
    IamInstanceProfile: Optional[IamInstanceProfileSpecification] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceRequirements_1: Optional[InstanceRequirements] = Field(
        None, alias='InstanceRequirements'
    )
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    KernelId: Optional[String] = None
    KeyName: Optional[KeyPairName] = None
    Monitoring: Optional[SpotFleetMonitoring] = None
    NetworkInterfaces: Optional[InstanceNetworkInterfaceSpecificationList] = None
    Placement: Optional[SpotPlacement] = None
    RamdiskId: Optional[String] = None
    SecurityGroups: Optional[GroupIdentifierList] = None
    SpotPrice: Optional[String] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    TagSpecifications: Optional[SpotFleetTagSpecificationList] = None
    UserData: Optional[SensitiveUserData] = None
    WeightedCapacity: Optional[Double] = None


class SpotInstanceRequest(BaseModel):
    ActualBlockHourlyPrice: Optional[String] = None
    AvailabilityZoneGroup: Optional[String] = None
    BlockDurationMinutes: Optional[Integer] = None
    CreateTime: Optional[DateTime] = None
    Fault: Optional[SpotInstanceStateFault] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    InstanceInterruptionBehavior_1: Optional[InstanceInterruptionBehavior] = Field(
        None, alias='InstanceInterruptionBehavior'
    )
    LaunchGroup: Optional[String] = None
    LaunchSpecification_1: Optional[LaunchSpecification] = Field(
        None, alias='LaunchSpecification'
    )
    LaunchedAvailabilityZone: Optional[String] = None
    ProductDescription: Optional[RIProductDescription] = None
    SpotInstanceRequestId: Optional[String] = None
    SpotPrice: Optional[String] = None
    State: Optional[SpotInstanceState] = None
    Status: Optional[SpotInstanceStatus] = None
    Tags: Optional[TagList] = None
    Type: Optional[SpotInstanceType] = None
    ValidFrom: Optional[DateTime] = None
    ValidUntil: Optional[DateTime] = None


class SpotInstanceRequestList(RootModel[List[SpotInstanceRequest]]):
    root: List[SpotInstanceRequest]


class VerifiedAccessInstanceLoggingConfiguration(BaseModel):
    AccessLogs: Optional[VerifiedAccessLogs] = None
    VerifiedAccessInstanceId: Optional[String] = None


class VerifiedAccessInstanceLoggingConfigurationList(
    RootModel[List[VerifiedAccessInstanceLoggingConfiguration]]
):
    root: List[VerifiedAccessInstanceLoggingConfiguration]


class Vpc(BaseModel):
    CidrBlock: Optional[String] = None
    CidrBlockAssociationSet: Optional[VpcCidrBlockAssociationSet] = None
    DhcpOptionsId: Optional[String] = None
    InstanceTenancy: Optional[Tenancy] = None
    Ipv6CidrBlockAssociationSet: Optional[VpcIpv6CidrBlockAssociationSet] = None
    IsDefault: Optional[Boolean] = None
    OwnerId: Optional[String] = None
    State: Optional[VpcState] = None
    Tags: Optional[TagList] = None
    VpcId: Optional[String] = None


class VpcList(RootModel[List[Vpc]]):
    root: List[Vpc]


class VpnConnection(BaseModel):
    Category: Optional[String] = None
    CoreNetworkArn: Optional[String] = None
    CoreNetworkAttachmentArn: Optional[String] = None
    CustomerGatewayConfiguration: Optional[String] = None
    CustomerGatewayId: Optional[String] = None
    GatewayAssociationState_1: Optional[GatewayAssociationState] = Field(
        None, alias='GatewayAssociationState'
    )
    Options: Optional[VpnConnectionOptions] = None
    Routes: Optional[VpnStaticRouteList] = None
    State: Optional[VpnState] = None
    Tags: Optional[TagList] = None
    TransitGatewayId: Optional[String] = None
    Type: Optional[GatewayType] = None
    VgwTelemetry: Optional[VgwTelemetryList] = None
    VpnConnectionId: Optional[String] = None
    VpnGatewayId: Optional[String] = None


class VpnConnectionList(RootModel[List[VpnConnection]]):
    root: List[VpnConnection]


class VpnConnectionOptionsSpecification(BaseModel):
    EnableAcceleration: Optional[Boolean] = None
    LocalIpv4NetworkCidr: Optional[String] = None
    LocalIpv6NetworkCidr: Optional[String] = None
    OutsideIpAddressType: Optional[String] = None
    RemoteIpv4NetworkCidr: Optional[String] = None
    RemoteIpv6NetworkCidr: Optional[String] = None
    StaticRoutesOnly: Optional[Boolean] = None
    TransportTransitGatewayAttachmentId: Optional[TransitGatewayAttachmentId] = None
    TunnelInsideIpVersion_1: Optional[TunnelInsideIpVersion] = Field(
        None, alias='TunnelInsideIpVersion'
    )
    TunnelOptions: Optional[VpnTunnelOptionsSpecificationsList] = None


class MatchPath(RootModel[List[AccessScopePathRequest]]):
    root: List[AccessScopePathRequest]


class ExcludePath(RootModel[List[AccessScopePathRequest]]):
    root: List[AccessScopePathRequest]


class LaunchSpecification3(BaseModel):
    AddressingType: Optional[String] = None
    BlockDeviceMappings: Optional[BlockDeviceMappingList] = None
    EbsOptimized: Optional[Boolean] = None
    IamInstanceProfile: Optional[IamInstanceProfileSpecification] = None
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')
    KernelId_1: Optional[KernelId] = Field(None, alias='KernelId')
    KeyName: Optional[KeyPairName] = None
    Monitoring: Optional[RunInstancesMonitoringEnabled] = None
    NetworkInterfaces: Optional[InstanceNetworkInterfaceSpecificationList] = None
    Placement: Optional[SpotPlacement] = None
    RamdiskId_1: Optional[RamdiskId] = Field(None, alias='RamdiskId')
    SecurityGroupIds: Optional[RequestSpotLaunchSpecificationSecurityGroupIdList] = None
    SecurityGroups: Optional[RequestSpotLaunchSpecificationSecurityGroupList] = None
    SubnetId_1: Optional[SubnetId] = Field(None, alias='SubnetId')
    UserData: Optional[SensitiveUserData] = None


class NetworkInterface1(RootModel[List[InstanceNetworkInterfaceSpecification]]):
    root: List[InstanceNetworkInterfaceSpecification]


class AccessScopeAnalysisFinding(BaseModel):
    FindingComponents: Optional[PathComponentList] = None
    FindingId: Optional[String] = None
    NetworkInsightsAccessScopeAnalysisId_1: Optional[
        NetworkInsightsAccessScopeAnalysisId
    ] = Field(None, alias='NetworkInsightsAccessScopeAnalysisId')
    NetworkInsightsAccessScopeId_1: Optional[NetworkInsightsAccessScopeId] = Field(
        None, alias='NetworkInsightsAccessScopeId'
    )


class AccessScopeAnalysisFindingList(RootModel[List[AccessScopeAnalysisFinding]]):
    root: List[AccessScopeAnalysisFinding]


class AccessScopePathListRequest(RootModel[List[AccessScopePathRequest]]):
    root: List[AccessScopePathRequest]


class CreateDefaultVpcResult(BaseModel):
    Vpc_1: Optional[Vpc] = Field(None, alias='Vpc')


class CreateLaunchTemplateVersionResult(BaseModel):
    LaunchTemplateVersion_1: Optional[LaunchTemplateVersion] = Field(
        None, alias='LaunchTemplateVersion'
    )
    Warning: Optional[ValidationWarning] = None


class CreateNetworkInsightsAccessScopeRequest(BaseModel):
    ClientToken: String
    DryRun: Optional[Boolean] = None
    ExcludePaths: Optional[AccessScopePathListRequest] = None
    MatchPaths: Optional[AccessScopePathListRequest] = None
    TagSpecifications: Optional[TagSpecificationList] = None


class CreateNetworkInsightsAccessScopeResult(BaseModel):
    NetworkInsightsAccessScope_1: Optional[NetworkInsightsAccessScope] = Field(
        None, alias='NetworkInsightsAccessScope'
    )
    NetworkInsightsAccessScopeContent_1: Optional[NetworkInsightsAccessScopeContent] = (
        Field(None, alias='NetworkInsightsAccessScopeContent')
    )


class CreateNetworkInterfaceResult(BaseModel):
    ClientToken: Optional[String] = None
    NetworkInterface_1: Optional[NetworkInterface] = Field(
        None, alias='NetworkInterface'
    )


class CreateRouteTableResult(BaseModel):
    RouteTable_1: Optional[RouteTable] = Field(None, alias='RouteTable')


class CreateVpcResult(BaseModel):
    Vpc_1: Optional[Vpc] = Field(None, alias='Vpc')


class CreateVpnConnectionRequest(BaseModel):
    CustomerGatewayId_1: CustomerGatewayId = Field(..., alias='CustomerGatewayId')
    DryRun: Optional[Boolean] = None
    Options: Optional[VpnConnectionOptionsSpecification] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TransitGatewayId_1: Optional[TransitGatewayId] = Field(
        None, alias='TransitGatewayId'
    )
    Type: String
    VpnGatewayId_1: Optional[VpnGatewayId] = Field(None, alias='VpnGatewayId')


class CreateVpnConnectionResult(BaseModel):
    VpnConnection_1: Optional[VpnConnection] = Field(None, alias='VpnConnection')


class DescribeHostsResult(BaseModel):
    Hosts: Optional[HostList] = None
    NextToken: Optional[String] = None


class DescribeInstancesResult(BaseModel):
    NextToken: Optional[String] = None
    Reservations: Optional[ReservationList] = None


class DescribeLaunchTemplateVersionsResult(BaseModel):
    LaunchTemplateVersions: Optional[LaunchTemplateVersionSet] = None
    NextToken: Optional[String] = None


class DescribeNetworkInterfacesResult(BaseModel):
    NetworkInterfaces: Optional[NetworkInterfaceList] = None
    NextToken: Optional[String] = None


class DescribeRouteTablesResult(BaseModel):
    NextToken: Optional[String] = None
    RouteTables: Optional[RouteTableList] = None


class DescribeSpotInstanceRequestsResult(BaseModel):
    NextToken: Optional[String] = None
    SpotInstanceRequests: Optional[SpotInstanceRequestList] = None


class DescribeVerifiedAccessInstanceLoggingConfigurationsResult(BaseModel):
    LoggingConfigurations: Optional[VerifiedAccessInstanceLoggingConfigurationList] = (
        None
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeVpcsResult(BaseModel):
    NextToken: Optional[String] = None
    Vpcs: Optional[VpcList] = None


class DescribeVpnConnectionsResult(BaseModel):
    VpnConnections: Optional[VpnConnectionList] = None


class FleetData(BaseModel):
    ActivityStatus: Optional[FleetActivityStatus] = None
    ClientToken: Optional[String] = None
    Context: Optional[String] = None
    CreateTime: Optional[DateTime] = None
    Errors: Optional[DescribeFleetsErrorSet] = None
    ExcessCapacityTerminationPolicy: Optional[FleetExcessCapacityTerminationPolicy] = (
        None
    )
    FleetId_1: Optional[FleetId] = Field(None, alias='FleetId')
    FleetState: Optional[FleetStateCode] = None
    FulfilledCapacity: Optional[Double] = None
    FulfilledOnDemandCapacity: Optional[Double] = None
    Instances: Optional[DescribeFleetsInstancesSet] = None
    LaunchTemplateConfigs: Optional[FleetLaunchTemplateConfigList] = None
    OnDemandOptions_1: Optional[OnDemandOptions] = Field(None, alias='OnDemandOptions')
    ReplaceUnhealthyInstances: Optional[Boolean] = None
    SpotOptions_1: Optional[SpotOptions] = Field(None, alias='SpotOptions')
    Tags: Optional[TagList] = None
    TargetCapacitySpecification_1: Optional[TargetCapacitySpecification] = Field(
        None, alias='TargetCapacitySpecification'
    )
    TerminateInstancesWithExpiration: Optional[Boolean] = None
    Type: Optional[FleetType] = None
    ValidFrom: Optional[DateTime] = None
    ValidUntil: Optional[DateTime] = None


class FleetLaunchTemplateConfigRequest(BaseModel):
    LaunchTemplateSpecification: Optional[FleetLaunchTemplateSpecificationRequest] = (
        None
    )
    Overrides: Optional[FleetLaunchTemplateOverridesListRequest] = None


class FleetSet(RootModel[List[FleetData]]):
    root: List[FleetData]


class GetNetworkInsightsAccessScopeAnalysisFindingsResult(BaseModel):
    AnalysisFindings: Optional[AccessScopeAnalysisFindingList] = None
    AnalysisStatus_1: Optional[AnalysisStatus] = Field(None, alias='AnalysisStatus')
    NetworkInsightsAccessScopeAnalysisId_1: Optional[
        NetworkInsightsAccessScopeAnalysisId
    ] = Field(None, alias='NetworkInsightsAccessScopeAnalysisId')
    NextToken: Optional[String] = None


class GetNetworkInsightsAccessScopeContentResult(BaseModel):
    NetworkInsightsAccessScopeContent_1: Optional[NetworkInsightsAccessScopeContent] = (
        Field(None, alias='NetworkInsightsAccessScopeContent')
    )


class LaunchSpecsList(RootModel[List[SpotFleetLaunchSpecification]]):
    root: List[SpotFleetLaunchSpecification]


class ModifyVerifiedAccessInstanceLoggingConfigurationResult(BaseModel):
    LoggingConfiguration: Optional[VerifiedAccessInstanceLoggingConfiguration] = None


class ModifyVpnConnectionOptionsResult(BaseModel):
    VpnConnection_1: Optional[VpnConnection] = Field(None, alias='VpnConnection')


class ModifyVpnConnectionResult(BaseModel):
    VpnConnection_1: Optional[VpnConnection] = Field(None, alias='VpnConnection')


class ModifyVpnTunnelCertificateResult(BaseModel):
    VpnConnection_1: Optional[VpnConnection] = Field(None, alias='VpnConnection')


class ModifyVpnTunnelOptionsRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SkipTunnelReplacement: Optional[Boolean] = None
    TunnelOptions: ModifyVpnTunnelOptionsSpecification
    VpnConnectionId_1: VpnConnectionId = Field(..., alias='VpnConnectionId')
    VpnTunnelOutsideIpAddress: String


class ModifyVpnTunnelOptionsResult(BaseModel):
    VpnConnection_1: Optional[VpnConnection] = Field(None, alias='VpnConnection')


class NetworkInsightsAnalysis(BaseModel):
    AdditionalAccounts: Optional[ValueStringList] = None
    AlternatePathHints: Optional[AlternatePathHintList] = None
    Explanations: Optional[ExplanationList] = None
    FilterInArns: Optional[ArnList] = None
    ForwardPathComponents: Optional[PathComponentList] = None
    NetworkInsightsAnalysisArn: Optional[ResourceArn] = None
    NetworkInsightsAnalysisId_1: Optional[NetworkInsightsAnalysisId] = Field(
        None, alias='NetworkInsightsAnalysisId'
    )
    NetworkInsightsPathId_1: Optional[NetworkInsightsPathId] = Field(
        None, alias='NetworkInsightsPathId'
    )
    NetworkPathFound: Optional[Boolean] = None
    ReturnPathComponents: Optional[PathComponentList] = None
    StartDate: Optional[MillisecondDateTime] = None
    Status: Optional[AnalysisStatus] = None
    StatusMessage: Optional[String] = None
    SuggestedAccounts: Optional[ValueStringList] = None
    Tags: Optional[TagList] = None
    WarningMessage: Optional[String] = None


class NetworkInsightsAnalysisList(RootModel[List[NetworkInsightsAnalysis]]):
    root: List[NetworkInsightsAnalysis]


class PurchaseScheduledInstancesResult(BaseModel):
    ScheduledInstanceSet: Optional[PurchasedScheduledInstanceSet] = None


class RequestSpotInstancesRequest(BaseModel):
    AvailabilityZoneGroup: Optional[String] = None
    BlockDurationMinutes: Optional[Integer] = None
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    InstanceCount: Optional[Integer] = None
    InstanceInterruptionBehavior_1: Optional[InstanceInterruptionBehavior] = Field(
        None, alias='InstanceInterruptionBehavior'
    )
    LaunchGroup: Optional[String] = None
    LaunchSpecification: Optional[RequestSpotLaunchSpecification] = None
    SpotPrice: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    Type: Optional[SpotInstanceType] = None
    ValidFrom: Optional[DateTime] = None
    ValidUntil: Optional[DateTime] = None


class RequestSpotInstancesResult(BaseModel):
    SpotInstanceRequests: Optional[SpotInstanceRequestList] = None


class RunScheduledInstancesRequest(BaseModel):
    ClientToken: Optional[String] = None
    DryRun: Optional[Boolean] = None
    InstanceCount: Optional[Integer] = None
    LaunchSpecification: ScheduledInstancesLaunchSpecification
    ScheduledInstanceId_1: ScheduledInstanceId = Field(..., alias='ScheduledInstanceId')


class SpotFleetRequestConfigData(BaseModel):
    AllocationStrategy_1: Optional[AllocationStrategy] = Field(
        None, alias='AllocationStrategy'
    )
    ClientToken: Optional[String] = None
    Context: Optional[String] = None
    ExcessCapacityTerminationPolicy_1: Optional[ExcessCapacityTerminationPolicy] = (
        Field(None, alias='ExcessCapacityTerminationPolicy')
    )
    FulfilledCapacity: Optional[Double] = None
    IamFleetRole: String
    InstanceInterruptionBehavior_1: Optional[InstanceInterruptionBehavior] = Field(
        None, alias='InstanceInterruptionBehavior'
    )
    InstancePoolsToUseCount: Optional[Integer] = None
    LaunchSpecifications: Optional[LaunchSpecsList] = None
    LaunchTemplateConfigs: Optional[LaunchTemplateConfigList] = None
    LoadBalancersConfig_1: Optional[LoadBalancersConfig] = Field(
        None, alias='LoadBalancersConfig'
    )
    OnDemandAllocationStrategy_1: Optional[OnDemandAllocationStrategy] = Field(
        None, alias='OnDemandAllocationStrategy'
    )
    OnDemandFulfilledCapacity: Optional[Double] = None
    OnDemandMaxTotalPrice: Optional[String] = None
    OnDemandTargetCapacity: Optional[Integer] = None
    ReplaceUnhealthyInstances: Optional[Boolean] = None
    SpotMaintenanceStrategies_1: Optional[SpotMaintenanceStrategies] = Field(
        None, alias='SpotMaintenanceStrategies'
    )
    SpotMaxTotalPrice: Optional[String] = None
    SpotPrice: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TargetCapacity: Integer
    TargetCapacityUnitType_1: Optional[TargetCapacityUnitType] = Field(
        None, alias='TargetCapacityUnitType'
    )
    TerminateInstancesWithExpiration: Optional[Boolean] = None
    Type: Optional[FleetType] = None
    ValidFrom: Optional[DateTime] = None
    ValidUntil: Optional[DateTime] = None


class StartNetworkInsightsAnalysisResult(BaseModel):
    NetworkInsightsAnalysis_1: Optional[NetworkInsightsAnalysis] = Field(
        None, alias='NetworkInsightsAnalysis'
    )


class LaunchTemplateConfigs(RootModel[List[FleetLaunchTemplateConfigRequest]]):
    root: List[FleetLaunchTemplateConfigRequest] = Field(
        ..., max_length=50, min_length=0
    )


class LaunchTemplateConfig1(RootModel[List[FleetLaunchTemplateConfigRequest]]):
    root: List[FleetLaunchTemplateConfigRequest] = Field(
        ..., max_length=50, min_length=0
    )


class SpotFleetRequestConfig1(BaseModel):
    AllocationStrategy_1: Optional[AllocationStrategy] = Field(
        None, alias='AllocationStrategy'
    )
    ClientToken: Optional[String] = None
    Context: Optional[String] = None
    ExcessCapacityTerminationPolicy_1: Optional[ExcessCapacityTerminationPolicy] = (
        Field(None, alias='ExcessCapacityTerminationPolicy')
    )
    FulfilledCapacity: Optional[Double] = None
    IamFleetRole: String
    InstanceInterruptionBehavior_1: Optional[InstanceInterruptionBehavior] = Field(
        None, alias='InstanceInterruptionBehavior'
    )
    InstancePoolsToUseCount: Optional[Integer] = None
    LaunchSpecifications: Optional[LaunchSpecsList] = None
    LaunchTemplateConfigs: Optional[LaunchTemplateConfigList] = None
    LoadBalancersConfig_1: Optional[LoadBalancersConfig] = Field(
        None, alias='LoadBalancersConfig'
    )
    OnDemandAllocationStrategy_1: Optional[OnDemandAllocationStrategy] = Field(
        None, alias='OnDemandAllocationStrategy'
    )
    OnDemandFulfilledCapacity: Optional[Double] = None
    OnDemandMaxTotalPrice: Optional[String] = None
    OnDemandTargetCapacity: Optional[Integer] = None
    ReplaceUnhealthyInstances: Optional[Boolean] = None
    SpotMaintenanceStrategies_1: Optional[SpotMaintenanceStrategies] = Field(
        None, alias='SpotMaintenanceStrategies'
    )
    SpotMaxTotalPrice: Optional[String] = None
    SpotPrice: Optional[String] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TargetCapacity: Integer
    TargetCapacityUnitType_1: Optional[TargetCapacityUnitType] = Field(
        None, alias='TargetCapacityUnitType'
    )
    TerminateInstancesWithExpiration: Optional[Boolean] = None
    Type: Optional[FleetType] = None
    ValidFrom: Optional[DateTime] = None
    ValidUntil: Optional[DateTime] = None


class DescribeFleetsResult(BaseModel):
    Fleets: Optional[FleetSet] = None
    NextToken: Optional[String] = None


class DescribeNetworkInsightsAnalysesResult(BaseModel):
    NetworkInsightsAnalyses: Optional[NetworkInsightsAnalysisList] = None
    NextToken: Optional[String] = None


class FleetLaunchTemplateConfigListRequest(
    RootModel[List[FleetLaunchTemplateConfigRequest]]
):
    root: List[FleetLaunchTemplateConfigRequest] = Field(
        ..., max_length=50, min_length=0
    )


class ModifyFleetRequest(BaseModel):
    Context: Optional[String] = None
    DryRun: Optional[Boolean] = None
    ExcessCapacityTerminationPolicy: Optional[FleetExcessCapacityTerminationPolicy] = (
        None
    )
    FleetId_1: FleetId = Field(..., alias='FleetId')
    LaunchTemplateConfigs: Optional[FleetLaunchTemplateConfigListRequest] = None
    TargetCapacitySpecification: Optional[TargetCapacitySpecificationRequest] = None


class RequestSpotFleetRequest(BaseModel):
    DryRun: Optional[Boolean] = None
    SpotFleetRequestConfig: SpotFleetRequestConfigData


class SpotFleetRequestConfig(BaseModel):
    ActivityStatus_1: Optional[ActivityStatus] = Field(None, alias='ActivityStatus')
    CreateTime: Optional[MillisecondDateTime] = None
    SpotFleetRequestConfig: Optional[SpotFleetRequestConfigData] = None
    SpotFleetRequestId: Optional[String] = None
    SpotFleetRequestState: Optional[BatchState] = None
    Tags: Optional[TagList] = None


class SpotFleetRequestConfigSet(RootModel[List[SpotFleetRequestConfig]]):
    root: List[SpotFleetRequestConfig]


class CreateFleetRequest(BaseModel):
    ClientToken: Optional[String] = None
    Context: Optional[String] = None
    DryRun: Optional[Boolean] = None
    ExcessCapacityTerminationPolicy: Optional[FleetExcessCapacityTerminationPolicy] = (
        None
    )
    LaunchTemplateConfigs: FleetLaunchTemplateConfigListRequest
    OnDemandOptions: Optional[OnDemandOptionsRequest] = None
    ReplaceUnhealthyInstances: Optional[Boolean] = None
    SpotOptions: Optional[SpotOptionsRequest] = None
    TagSpecifications: Optional[TagSpecificationList] = None
    TargetCapacitySpecification: TargetCapacitySpecificationRequest
    TerminateInstancesWithExpiration: Optional[Boolean] = None
    Type: Optional[FleetType] = None
    ValidFrom: Optional[DateTime] = None
    ValidUntil: Optional[DateTime] = None


class DescribeSpotFleetRequestsResponse(BaseModel):
    NextToken: Optional[String] = None
    SpotFleetRequestConfigs: Optional[SpotFleetRequestConfigSet] = None
